{
	"_id": "postcss-specificity-decorator",
	"_rev": "1-a2b7650998897bfe741005693522efed",
	"name": "postcss-specificity-decorator",
	"description": "PostCSS plugin to increase the specificity of selectors",
	"dist-tags": {
		"latest": "0.1.0"
	},
	"versions": {
		"0.0.2": {
			"name": "postcss-specificity-decorator",
			"version": "0.0.2",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"specificity"
			],
			"author": {
				"name": "Maxim Morev",
				"email": "max.seainside@gmail.com"
			},
			"license": "MIT",
			"_id": "postcss-specificity-decorator@0.0.2",
			"maintainers": [
				{
					"name": "morev",
					"email": "max.seainside@gmail.com"
				}
			],
			"homepage": "https://github.com/MorevM/postcss-specificity-decorator#readme",
			"dist": {
				"shasum": "969970479019cd0f6b9e8b7ff013229370c9d25b",
				"tarball": "https://registry.npmjs.org/postcss-specificity-decorator/-/postcss-specificity-decorator-0.0.2.tgz",
				"fileCount": 17,
				"integrity": "sha512-J5Xr11hwAXx0+kWd1ozixALiz0fsWa57mbY213tTjyfzQHDUb2Klxf+SHaIKccUp/wlAGkt1gpDgWPqLND/vBg==",
				"signatures": [
					{
						"sig": "MEYCIQDvS4pP1+euLf9EJ+KO72FdlIM06L07n0VYPXpfagU1zwIhALvvcwT/t+VrS/0m10H/jOA3wr7qboCVhGU/hSH1f/31",
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"
					}
				],
				"unpackedSize": 17130,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJic80SACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp4rRAAhINJBA6hkFqOwrilTc4/0IaxxkwcV5rBNTmdDEMz22rWOWA8\r\nyXO42zpk/JH2+M9Z+I18d2DI2yBplsgV9+rFy+rJfOjK8CFpGKf4T0qVrd8A\r\nVhd/NbOcDk9t0xNO2ygnHkQOeuJqGsg5tRGu3rnAim04v+fpk5Z4DKe8h6Gw\r\nu/1m012AF9uZejePccfGfYLMQYjDSCsPAye3jvk8KGVGth/aNH1s/zBVXOOH\r\nUa3fLNyR9xxHQQORcR6HUtaKK9Wrjot7iJsWtUVbtorBl9WFlF2ykLJLBu/B\r\nvAR2fB8lNFUotP1kDpqElUQ+jVCPQ8yqDaSRJIY3ldGs4mGtQcMJ+eb3LIWj\r\nZDMQQPw+9ipsGzorGcGrbCbVzUPtnNRcgvvxAzCFHggXrUx9yDNpP/gFfY8+\r\nA2VyrGMZWYRF8m9z/tZyVzKmGEnbsKK8a4h1xW2EHUNL+S2DK5tQzZajJ/87\r\nOP48ft2RTAnvgt2lzmE899iYNrQ4n8tE4NP+cnp1tNz5i8x746JaXyt+iBDO\r\nI3R+9Zk16XUlU7ecmXxe+lv/k6SUo7VvBo6qUSmSkpZY834yiqss1FLg41OR\r\ne4FnhKj3IaL2K+AB8V+2G+cjQUkdy+YediYo+Jw8IGMdLPnwN8AdpQAB99Bo\r\nku09EY/WuuHPQuj1FuWBTrsytsQmRWbxugs=\r\n=el3A\r\n-----END PGP SIGNATURE-----\r\n"
			},
			"main": "./dist/index.cjs",
			"type": "module",
			"types": "./types/index.d.ts",
			"module": "./dist/index.mjs",
			"exports": {
				".": {
					"import": "./dist/index.mjs",
					"require": "./dist/index.cjs"
				},
				"./7": {
					"import": "./dist/postcss7.mjs",
					"require": "./dist/postcss7.cjs"
				}
			},
			"scripts": {
				"lint": "yarn lint:eslint",
				"test": "node --experimental-vm-modules ./node_modules/jest/bin/jest.js",
				"build": "unbuild",
				"prepare": "husky install ./.husky",
				"release": "release-it --disable-metrics",
				"lint:fix": "yarn lint:eslint:fix",
				"lint:eslint": "eslint \"**/*.{js,ts,vue,json,json5,jsonc,yml,yaml,md}\"",
				"lint:eslint:fix": "eslint \"**/*.{js,ts,vue,json,json5,jsonc,yml,yaml,md}\" --fix",
				"vscode-settings": "cp .vscode/settings.template.json .vscode/settings.json"
			},
			"_npmUser": {
				"name": "morev",
				"email": "max.seainside@gmail.com"
			},
			"repository": {
				"url": "https://github.com/MorevM/postcss-specificity-decorator",
				"type": "git"
			},
			"description": "PostCSS plugin to increase the specificity of selectors",
			"directories": {},
			"licenseText": "# The MIT License (MIT)\n\nCopyright © 2022 [Maxim Morev](https://github.com/MorevM)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES\nOR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
			"publishConfig": {
				"access": "public",
				"registry": "https://registry.npmjs.org/"
			},
			"_hasShrinkwrap": false,
			"devDependencies": {
				"jest": "^28.0.3",
				"sass": "^1.51.0",
				"husky": "^7.0.4",
				"eslint": "^8.14.0",
				"postcss": "^8.4.13",
				"unbuild": "^0.7.4",
				"clean-css": "^5.3.0",
				"release-it": "^15.0.0",
				"@types/jest": "^27.5.0",
				"lint-staged": "^12.4.1",
				"@morev/eslint-config": "^11.3.0",
				"@morev/commitlint-config": "^0.1.1",
				"commonjs-variables-for-esmodules": "^1.1.0",
				"@release-it/conventional-changelog": "^5.0.0"
			},
			"peerDependencies": {
				"postcss": ">=7"
			},
			"_npmOperationalInternal": {
				"tmp": "tmp/postcss-specificity-decorator_0.0.2_1651756306097_0.8134289527632035",
				"host": "s3://npm-registry-packages"
			}
		},
		"0.1.0": {
			"name": "postcss-specificity-decorator",
			"description": "PostCSS plugin to increase the specificity of selectors",
			"type": "module",
			"version": "0.1.0",
			"license": "MIT",
			"publishConfig": {
				"access": "public",
				"registry": "https://registry.npmjs.org/"
			},
			"author": {
				"name": "Maxim Morev",
				"email": "max.seainside@gmail.com"
			},
			"homepage": "https://github.com/MorevM/postcss-specificity-decorator#readme",
			"repository": {
				"type": "git",
				"url": "https://github.com/MorevM/postcss-specificity-decorator"
			},
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"specificity"
			],
			"exports": {
				".": {
					"require": {
						"types": "./dist/index.d.cts",
						"default": "./dist/index.cjs"
					},
					"import": {
						"types": "./dist/index.d.ts",
						"default": "./dist/index.js"
					}
				},
				"./7": {
					"require": {
						"types": "./dist/index.d.cts",
						"default": "./dist/postcss7.cjs"
					},
					"import": {
						"types": "./dist/index.d.ts",
						"default": "./dist/postcss7.js"
					}
				}
			},
			"main": "./dist/index.cjs",
			"module": "./dist/index.js",
			"types": "./dist/index.d.ts",
			"scripts": {
				"build": "tsup",
				"prepare": "lefthook install",
				"release": "release-it --disable-metrics",
				"lint": "yarn lint:eslint",
				"lint:fix": "yarn lint:eslint:fix",
				"lint:eslint": "eslint \"**/*.{js,ts,vue,json,json5,jsonc,yml,yaml,md}\"",
				"lint:eslint:fix": "eslint \"**/*.{js,ts,vue,json,json5,jsonc,yml,yaml,md}\" --fix",
				"test": "vitest",
				"test:dev": "vitest --watch"
			},
			"peerDependencies": {
				"postcss": ">=7"
			},
			"devDependencies": {
				"@morev/commitlint-config": "^0.2.2",
				"@morev/eslint-config": "^33.0.0",
				"@release-it/conventional-changelog": "^8.0.1",
				"@types/clean-css": "^4.2.11",
				"clean-css": "^5.3.3",
				"commonjs-variables-for-esmodules": "^1.1.0",
				"eslint": "8.57.0",
				"lefthook": "^1.6.15",
				"postcss": "^8.4.38",
				"release-it": "^17.3.0",
				"sass": "^1.77.4",
				"tsup": "^8.1.0",
				"vitest": "^1.6.0"
			},
			"licenseText": "# The MIT License (MIT)\n\nCopyright © 2022 [Maxim Morev](https://github.com/MorevM)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES\nOR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
			"_id": "postcss-specificity-decorator@0.1.0",
			"dist": {
				"shasum": "767acf1af4929f79c825e35da20b1965c5470738",
				"integrity": "sha512-gssL6q8TX2dNAMAJ0uvXKYXK+kywX+bzFarFypv7e5U3JmXrTZXvADjTQR215BHm2kcaAvU+9sD4gIGBbl8UYQ==",
				"tarball": "https://registry.npmjs.org/postcss-specificity-decorator/-/postcss-specificity-decorator-0.1.0.tgz",
				"fileCount": 13,
				"unpackedSize": 22760,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEYCIQChY3AX5qZAZzw4tKsRXO5JqPLcfztt448eVNvqwgYavQIhAPZAqoK4+yR3/jJhnkoMQkmGuhn+aDOegn3oa1hSRiRH"
					}
				]
			},
			"_npmUser": {
				"name": "morev",
				"email": "max.seainside@gmail.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "morev",
					"email": "max.seainside@gmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-specificity-decorator_0.1.0_1717773511531_0.5272081958737882"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2022-05-05T13:11:46.038Z",
		"modified": "2024-06-07T15:18:31.928Z",
		"0.0.2": "2022-05-05T13:11:46.350Z",
		"0.1.0": "2024-06-07T15:18:31.740Z"
	},
	"maintainers": [
		{
			"name": "morev",
			"email": "max.seainside@gmail.com"
		}
	],
	"author": {
		"name": "Maxim Morev",
		"email": "max.seainside@gmail.com"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/MorevM/postcss-specificity-decorator"
	},
	"keywords": [
		"postcss",
		"css",
		"postcss-plugin",
		"specificity"
	],
	"license": "MIT",
	"homepage": "https://github.com/MorevM/postcss-specificity-decorator#readme",
	"readme": "# PostCSS specificity decorator\n\n![Stability of \"master\" branch](https://img.shields.io/github/workflow/status/MorevM/postcss-specificity-decorator/Build/master)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n![Last commit](https://img.shields.io/github/last-commit/morevm/postcss-specificity-decorator)\n![Release version](https://img.shields.io/github/v/release/morevm/postcss-specificity-decorator?include_prereleases)\n![GitHub Release Date](https://img.shields.io/github/release-date/morevm/postcss-specificity-decorator)\n![Keywords](https://img.shields.io/github/package-json/keywords/morevm/postcss-specificity-decorator)\n\n[PostCSS](https://github.com/postcss/postcss) plugin to increase the specificity of selectors via decorator-like syntax. \\\nOriginally inspired from [postcss-increase-specificity](https://github.com/MadLittleMods/postcss-increase-specificity),\nthis plugin provides an easier way to pick selectors more selectively.\n\nThe main use case is to provide an easy way to increase the specificity of a selector when there is no way to control\nthe order of file inclusion and, accordingly, the order of selectors. \\\nThese can be glob imports or usage of component frameworks using HOC strategy, etc. \\\nSee details in [\"Why\"](#why) section.\n\n## Table of contents\n\n* [Installation](#installation)\n* [Usage](#usage)\n* [Why?](#why)\n* [SASS limitations](#sass-limitations)\n* [Plugin options](#plugin-options)\n* [Inline plugin options](#inline-plugin-options)\n\n## Installation\n\n> The plugin doesn't ship with `postcss` - so make sure it's already installed.\n\n### Using `yarn`\n\n```bash\nyarn add postcss-specificity-decorator --dev\n```\n\n### Using `npm`\n\n```bash\nnpm install -D postcss-specificity-decorator\n```\n\n### Using `pnpm`\n\n```bash\npnpm add -D postcss-specificity-decorator\n```\n\n\n## Usage\n\n### Basic Example\n\n> The plugin's default export provides a version for PostCSS 8. \\\n> If you need the version for PostCSS 7, import it with `/7` suffix like \\\n> `import specificityDecorator from 'postcss-specificity-decorator/7';`\n\n```js\nimport postcss from 'postcss';\nimport specificityDecorator from 'postcss-specificity-decorator';\nimport fs from 'fs';\n\nconst input = fs.readFileSync('input.css', { encoding: 'utf8' });\n\nconst output = postcss([\n  specificityDecorator({ /* options */ })\n]).process(input).css;\n\nconsole.log(output);\n```\n\n### Results\n\n#### Input:\n\n```css\n/* @specificity */\n.block {\n  background-color: #ffffff;\n}\n\n.unchanged {\n  color: rebeccapurple;\n}\n\n/* @specificity */\n.foo, .bar {\n  display: none;\n}\n```\n\n#### Output:\n\n```css\n:not(#\\9) .block {\n  background-color: #ffffff;\n}\n\n.unchanged {\n  color: rebeccapurple;\n}\n\n:not(#\\9) .foo,\n:not(#\\9) .bar {\n  display: inline-block;\n  width: 50%;\n}\n```\n\n### What it does?\n\nIt's just prepend a descendant selector piece: `:not(#\\9)` (affects really nothing) repeated the specified `options.repeat` number of times.\n\n---\n\n## Why?\n\nLet's imagine the situation:\n\n```html\n<div class=\"external-lib-class my-custom-class\"></div>\n```\n\n```css\n/* external lib with no write access */\n.external-lib-class { overflow: hidden; }\n```\n\n```css\n/* our custom styles */\n.my-custom-class { overflow: visible; }\n```\n\nIf external lib stylesheet comes first, the block will have `overflow: visible`. \\\nBut if our custom styles come first, block will have `overflow: hidden;` applied (what's wrong with our intention).\n\nSome environments don't provide a way to control the order in which stylesheets are included. Plugin solves it.\n\n---\n\nIt seems not a big deal to increase specificity manually like `html .my-custom-class`,\nbut it becomes more complicated if you a trying to keep styles structure max flat as possible\n(for example using [BEM methodology](https://en.bem.info/methodology/)) and/or using SCSS:\n\n```html\n<div class=\"block\">\n  <div class=\"block__element another-element\"></div>\n</div>\n```\n\n```scss\n// another-element.scss\n.another-element { color: #ffffff; }\n\n// block.scss\n.block {\n  $b: &;\n\n  &__element {\n    color: red;\n\n    #{$b}--active & { color: blue; }\n  }\n}\n```\n\nThis is a very contrived example, but it shows the point. \\\nThere needs to be a reliable way to make sure that the styles of an element take precedence over the styles of the block itself\nregardless of the order in which the style files are included.\n\n* **But...Can't we use `& &__element`?** \\\n  No, because nested parent selector will resolve to `.block--active .block .block__element` this way. \\\n  This scenario is solved by adding a modifier to the element itself instead of accessing through the parent block,\n  but this is not always can be controlled (for example, in the case of using external libraries)\n* **Maybe `html .block`?** \\\n  It actually works the same as previous example.\n\nWith plugin:\n\n```scss\n// block.scss\n.block {\n  $b: &;\n\n  &__element { /* specificity */\n    color: red;\n\n    #{$b}--active & { /* specificity */\n      color: blue;\n    }\n  }\n}\n```\n\nThe problem is gone. \\\nYes, DX in case of using SCSS not so pleasant due [SASS limitations](#sass-limitations),\nbut all way better than other attempts to provide reliable mechanics.\n\n## SASS limitations\n\n### TL;DR\n\n* It works only with `loud comments` because silent comments are stripped during `SCSS` -> `CSS` transformation.\n* Decorator should be placed **inside** of rule, not on top. If there nested rules, decorator should be defined on each rule needed to process. \\\n  Good news is inner media queries can be applied automatically.\n\n### Explanations\n\nThe main thing is, **PostCSS works with CSS**. \\\nIt means `SCSS` -> `CSS` transformation happens **before** plugin runs, and here we are very much tied to how SASS compiler works. \\\nIt doesn't bind comments to rules, so after transformation there is no way to know what the original comment referred to:\n\n```scss\n.block {\n  /* @specificity */\n  &__element {}\n  /* @specificity */\n  &__another-one {}\n}\n\n// It compiles into...\n\n.block {\n  /* @specificity */\n  /* @specificity */\n}\n.block__element {}\n.block__another-one {}\n```\n\n**Thats why we need to put decorator inside the rule** - just to know what it belongs to:\n\n```scss\n.block {\n  &__element { /* @specificity */\n    // ...\n  }\n\n  &__another-one { /* @specificity */\n    // ...\n  }\n}\n```\n\nNested media queries applied automatically:\n\n```scss\n.block {\n  &__element { /* @specificity */\n    // ...\n    @media (max-width: 768px) {\n      // ...\n    }\n  }\n}\n\n// Resolves to...\n\n:not(#\\9) .block__element {}\n\n@media (max-width: 768px) {\n  :not(#\\9) .block__element {}\n}\n```\n\n---\n\nUsing SASS, I believe you are mostly use the silent comments (`// comment`). \\\nBad news here they are never emitted to compiled CSS, so there is no way to make it work. Only loud comments (`/* */`)\n\n## Plugin options\n\n* **``keyword``** \\\n  The keyword in comment that triggers plugin to process the rule. \\\n  The comment should start with that keyword to run. \\\n  Default: `'@specificity'`\n\n* **``sourceType``** \\\n  Set it to `scss` if you are write your styles in SCSS. \\\n  Make sure you are read about [SASS limitations](#sass-limitations). \\\n  Default: `'css'`\n\n## Inline plugin options\n\nBy default, plugin increases specificity with only one `:not(#\\9)` prefix. \\\nIf you need to increase specificity more, you must specify it explicitly by using inline `repeat` option represented by integer number:\n\n```scss\n/* @specificity 3 */\n.block {}\n\n// After transformation it becomes...\n:not(#\\9):not(#\\9):not(#\\9) .block {}\n```\n",
	"readmeFilename": "README.md",
	"_downloads": 38
}