{
	"_id": "postcss-nested-once",
	"_rev": "1-0f60425def233901d45545ce9105f01a",
	"name": "postcss-nested-once",
	"dist-tags": {
		"latest": "1.0.0"
	},
	"versions": {
		"1.0.0": {
			"name": "postcss-nested-once",
			"version": "1.0.0",
			"description": "Postcss plugin to unwrap nested rules (like how Sass does it), compatible with rollup-plugin-styles",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"postcss-nested",
				"sass",
				"nested"
			],
			"main": "index.js",
			"typings": "index.d.ts",
			"type": "commonjs",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/k-g-a/postcss-nested-once.git"
			},
			"author": {
				"name": "Gleb Kochergin",
				"email": "k-g-a@users.noreply.github.com"
			},
			"license": "MIT",
			"private": false,
			"engines": {
				"node": ">=10.0"
			},
			"dependencies": {
				"postcss-nested": "^5.0.5"
			},
			"peerDependencies": {
				"postcss": "^8.3.5"
			},
			"devDependencies": {
				"@types/jest": "^26.0.23",
				"jest": "^27.0.6",
				"postcss": "^8.3.5",
				"postcss-modules-local-by-default": "^4.0.0",
				"postcss-modules-scope": "^3.0.0",
				"prettier": "^2.3.2"
			},
			"gitHead": "be9f622cfe228a8f7e774b4cea4297f34e954834",
			"bugs": {
				"url": "https://github.com/k-g-a/postcss-nested-once/issues"
			},
			"homepage": "https://github.com/k-g-a/postcss-nested-once#readme",
			"_id": "postcss-nested-once@1.0.0",
			"_nodeVersion": "14.16.0",
			"_npmVersion": "6.14.11",
			"dist": {
				"integrity": "sha512-2pge3Kij+Z0TbAeXTDsncXNPKhfWOX+Ureq9+0aMK1rytSbVaosOydeWZ5Fq98p10lLDUhvx7a/PZWEf2snhmQ==",
				"shasum": "1709c87d76e15063f7ff253274fe5e96a615e6d9",
				"tarball": "https://registry.npmjs.org/postcss-nested-once/-/postcss-nested-once-1.0.0.tgz",
				"fileCount": 5,
				"unpackedSize": 9636,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg3b93CRA9TVsSAnZWagAAIFEP/2XWj4wTyGcW0Mc2XiS3\npf+smn0xvH8pjhcllypN9yK50TMClH3lmyRtv0hYmrGkIAOmKesc1+ZDldq1\nvCfyhIB2QoGEkoYhnFOXUWRU31bqKX57dxHzkSc31oBSNZ1w1QDtNVnXbo2a\nIGHujZncFCuemzLupzI3mLpdZ+UymqJp/5egan1BhGP+COMmSySw4Y/0RJhq\nxhgbOdr9SESGtprSgBrdTSfqqgSuz4HHomrJgWSNa0BNORZoXmprDBtCT5vZ\n/Z72Fd+4eRv47sHtgrV6k1/mLD79Eoj8SUEvg4rf+KL8AicBC0QzXVzA7nM3\nhtkwyX7tF/8HBP3Zljib5W/fbfjLXpX/PS2Cfg/6Wbw35YHoUanOFzSrj/Ee\n4SLYJXNg6MYjOF/9ACDyahFAwhr/9y9llFcm+s7VZTLWW226aiMULnRY4e47\nWJzbkljIsJzvQs7BHrRPtbeCiD3c+YazIuZE0jclqgGB0i4PkyZh66ETXWpo\nK2CPeG3LyxQQSEEFkmDsmyAxOs0jWWDBl6N/do18I698hWeBFwHLt/8Cgbwv\ndOa4TGWJc3Mauy4CgHc2dBpXHpVnaNkc+WUCdBH1CaFPq+yT1e992QAwGYOZ\nWHscEIh5MgRf29YRXUE8uHENtgeY2lyI9pvHJmBRg0k3Nva0lsmSAT4snjgb\n44wx\r\n=a7uY\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEYCIQCkSaqK/GOb9jmL7zxCpz+35hurI6qrUCAJ2mNCfDIBBgIhAKYl4pEO6ANvyOMnI6YplULeNw0krIMTdcDKT53OOU4x"
					}
				]
			},
			"_npmUser": {
				"name": "k-g-a",
				"email": "kga.npm@gmail.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "k-g-a",
					"email": "kga.npm@gmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-nested-once_1.0.0_1625145207490_0.8998599033792367"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2021-07-01T13:13:27.438Z",
		"1.0.0": "2021-07-01T13:13:27.627Z",
		"modified": "2022-05-13T06:30:19.963Z"
	},
	"maintainers": [
		{
			"name": "k-g-a",
			"email": "kga.npm@gmail.com"
		}
	],
	"description": "Postcss plugin to unwrap nested rules (like how Sass does it), compatible with rollup-plugin-styles",
	"homepage": "https://github.com/k-g-a/postcss-nested-once#readme",
	"keywords": [
		"postcss",
		"css",
		"postcss-plugin",
		"postcss-nested",
		"sass",
		"nested"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/k-g-a/postcss-nested-once.git"
	},
	"author": {
		"name": "Gleb Kochergin",
		"email": "k-g-a@users.noreply.github.com"
	},
	"bugs": {
		"url": "https://github.com/k-g-a/postcss-nested-once/issues"
	},
	"license": "MIT",
	"readme": "# PostCSS Nested for rollup-plugin-styles\n\n### Summary\n\nThis plugin allows using Sass-like nested rules in combination with [css-modules](https://github.com/css-modules/css-modules) by [rollup-plugin-styles](https://github.com/Anidetrix/rollup-plugin-styles).\n\nSpecifically, it solves the problem of the ampersand-combined selectors, i.e.:\n\n```postcss\n// styles.css\n.list {\n  color: red;\n\n  &_item {\n    color: green;\n  }\n}\n```\n\nResults in:\n\n```javascript\n// some-module.js\nimport styles from \"./styles.css\";\n\n// with any setup:\nconsole.log(styles.list); // => \"styles_list__HASH\"\n\n// with postcss-nested plugin:\nconsole.log(styles.list_item); // => undefined ,\n\n// with postcss-nested-once plugin:\nconsole.log(styles.list_item); // => \"styles_list_item__HASH\"\n```\n\n### Usage\n\nInstall:\n\n```shell\nyarn add postcss-nested-once -D\n```\n\nIt's intended to replace [postcss-nested](https://github.com/postcss/postcss-nested) for the following [rollup](https://github.com/rollup/rollup) configuration:\n\n```javascript\n// rollup.config.js\n\n// ...\nconst stylesRollupPlugin = require(\"rollup-plugin-styles\");\nconst postcssNestedOncePlugin = require(\"postcss-nested-once\");\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    stylesRollupPlugin({\n      // ...\n      mode: \"inject\",\n      modules: true,\n      plugins: [\n        // ...\n        postcssNestedOnce(),\n      ],\n    }),\n  ],\n};\n```\n\nAssuming the following source:\n\n```postcss\n// styles.css\n.parent {\n  color: red;\n\n  & .child {\n    color: green;\n  }\n}\n\n.list {\n  color: red;\n\n  &_item {\n    color: green;\n  }\n}\n```\n\nThis will produce:\n\n```javascript\n// styles.js\n// ...\nvar css =\n  \".styles_parent__HASH {\" +\n  \"  color: red\" +\n  \"}\" +\n  \"\" +\n  \"  .styles_parent__HASH .styles_child__HASH {\" +\n  \"    color: green;\" +\n  \"  }\" +\n  \"\" +\n  \".styles_list__HASH {\" +\n  \"  color: red\" +\n  \"}\" +\n  \"\" +\n  \".styles_list_item__HASH {\" +\n  \"    color: green;\" +\n  \"  }\" +\n  \"\";\nvar modules = {\n  parent: \"styles_parent__HASH\",\n  child: \"styles_child__HASH\",\n  list: \"styles_list__HASH\",\n  list_item: \"styles_list_item__HASH\",\n};\ninjectCss[\"default\"](css, {});\n\nexports.css = css;\nexports.default = modules;\n```\n\nWhich in turn allows to use all the four classes in js:\n\n```javascript\n// some-module.js\nimport styles from \"./styles.css\";\n\nconsole.log(styles.parent); // => \"styles_parent__HASH\"\nconsole.log(styles.child); // => \"styles_child__HASH\"\nconsole.log(styles.list); // => \"styles_list__HASH\"\nconsole.log(styles.list_item); // => \"styles_list_item__HASH\"\n```\n\n### Problem Details\n\nThe [rollup-plugin-styles](https://github.com/Anidetrix/rollup-plugin-styles) provides an ability to use css modules by simply specifying `modules: true | ModulesOptions` during configuration.\n\nUnder the hood it does not rely on the [postcss-modules](https://github.com/madyankin/postcss-modules) package directly, but introduces its own plugins pipeline instead:\n\n```\n// built-in plugins\nstyles-import - internal plugin, uses 'Once' hook, used only if the 'import' option is enabled;\nstyles-url - internal plugin, uses 'Once' hook, used only if the 'url' option is enabled;\n\n// bunch of plugins from options.plugins\npostcss-nested - could be listed here, if specified\nplugin-from-options #1\nplugin-from-options #2\n...\n\n// bunch of plugins from postcss.config.js\npostcss-nested - or here, if specified\nplugin-from-postcss-config #1\nplugin-from-postcss-config #2\n...\n\n// css-modules-related plugins\npostcss-modules-values - dependency plugin, uses 'Once' hook\npostcss-modules-local-by-default - dependency plugin, uses 'Once' hook\npostcss-modules-extract-imports - dependency plugin, uses 'Once' hook\npostcss-modules-scope - dependency plugin, uses 'Once' hook\nstyles-icss - internal plugin involved in resulting exports generation, uses 'OnceExit' hook\n```\n\nBy that far it seems like everything should work as expected due to proper plugin's order.\n\nSo to make the next guess it's good to know the responsibility of every plugin. To cut the long story short:\n\n- `postcss-modules-values` extracts `@value XX` and `@value YY from` into corresponding internal `:import {}` / `:export {}` selectors and gives local names;\n- `postcss-modules-local-by-default` wraps every suitable css selector in internal `:local` directive;\n- `postcss-modules-extract-imports` is responsible for the `compose` feature;\n- `postcss-modules-scope` among other actions generates `:export {}` directives for every `:local` selector;\n- `styles-icss` fills special object from the contents of every `:export {}` directive.\n\nThe object formed by `styles-icss` is used further down the pipeline to write exports from the generated `styles.js` file (which are consumed by `import styles from './styles.css''`).\n\nAs a result, for the above input we'll get the following output:\n\n```javascript\n// styles.js (generated)\nvar css =\n  \".styles_parent__HASH {\" +\n  \"  color: red\" +\n  \"}\" +\n  \"\" +\n  \"  .styles_parent__HASH .styles_child__HASH {\" +\n  \"    color: green;\" +\n  \"  }\" +\n  \"\" +\n  \".styles_list__HASH {\" +\n  \"  color: red\" +\n  \"}\" +\n  \"\" +\n  \".styles_list__HASH_item {\" +\n  \"    color: green;\" +\n  \"  }\" +\n  \"\";\nvar modules = {\n  parent: \"styles_parent__HASH\",\n  child: \"styles_child__HASH\",\n  list: \"styles_list__HASH\",\n};\ninjectCss[\"default\"](css, {});\n\nexports.css = css;\nexports.default = modules;\n```\n\nSo we have an actual rule `.styles_list__HASH_item` (which will be injected during the import), but do not have the corresponding export (making `styles.list_item === undefined` at runtime).\n\nThe key hint is that `_item` suffix is added after the `__HASH` part, which means that `postcss-nested` transformation runs after the `postcss-modules-scope` transformation. This happens because `postcss-nested` plugin uses `Rule` hook while other ones (mostly) use `Once` + `walk()` combination which comes first.\n\nSo the most simple solution is to move `postcss-nested`'s logic to the same `Once` hook, which resulted in `postcss-nested-once` plugin.\n\n### Implementation\n\nFor the sake of simple maintenance this plugin lists `postcss-nested` as dependency and reuses it by calling `root.walkRules((rule) => { postcssNestedInstance.Rule(rule, postcssAPI); });` in `Once` hook.\n\nIt accepts (and passes down) the same options as `postcss-nested`.\n\nType definitions are copy-pasted from the original plugin.\n",
	"readmeFilename": "README.md",
	"_downloads": 2091
}