{
	"_id": "postcss-pt2rem",
	"_rev": "2-6242249ca01b78d5c5b7120873ab173a",
	"name": "postcss-pt2rem",
	"dist-tags": {
		"latest": "5.1.2"
	},
	"versions": {
		"5.1.1": {
			"name": "postcss-pt2rem",
			"description": "A CSS post-processor that converts pt(not real pt) to rem. the source form postcss-pxtorem",
			"version": "5.1.1",
			"author": {
				"name": "cuth"
			},
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "git+ssh://git@github.com/liujigang/postcss-pxtorem.git"
			},
			"bugs": {
				"url": "https://github.com/liujigang/postcss-pxtorem/issues"
			},
			"main": "index.js",
			"scripts": {
				"lint": "eslint .",
				"test": "jasmine-node spec"
			},
			"husky": {
				"hooks": {
					"pre-commit": "lint-staged"
				}
			},
			"lint-staged": {
				"*.js": [
					"eslint --fix",
					"prettier --write"
				]
			},
			"devDependencies": {
				"eslint": "^6.8.0",
				"husky": "^4.2.3",
				"jasmine-node": "^3.0.0",
				"lint-staged": "^10.0.8",
				"prettier": "^1.19.1"
			},
			"keywords": [
				"css",
				"rem",
				"pixel",
				"pt",
				"postcss",
				"postcss-plugin"
			],
			"dependencies": {
				"postcss": "^7.0.32"
			},
			"gitHead": "310fd234d3b3edf2e9fc9057029584ca9650cc3e",
			"homepage": "https://github.com/liujigang/postcss-pxtorem#readme",
			"_id": "postcss-pt2rem@5.1.1",
			"_nodeVersion": "12.18.0",
			"_npmVersion": "6.14.7",
			"dist": {
				"integrity": "sha512-bd0qlElkwZWoyqdT7oIaXa7uliWSdm60mKwE5j6L1lAGqKpAAhOW+MjJT2fUN7rmmCaBm9vWcrDFMgKkk0vuEQ==",
				"shasum": "c5add65f0ad201b89b4eacd6a33e766798ed5acf",
				"tarball": "https://registry.npmjs.org/postcss-pt2rem/-/postcss-pt2rem-5.1.1.tgz",
				"fileCount": 12,
				"unpackedSize": 29846,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfLPjRCRA9TVsSAnZWagAAzrgP/jM7q5yZAisguf1WE77O\ngpBq6bpYaKlpZTGbP82jSnERGNNyZQMr7HYK4bwaiISocH+kDL++Klm7cnwH\ngAx8mdvhDPTQSzdhu7PiEVlf42XDnV1cASAnNE+pOKoakTaLWbm/eTZMQ4gw\nZf2cOUQbu0wSy3qzR58KRSzMX/lNFWxEK+ulnHUrKg1wvJugVlXH2OLnqsZE\neAskgIzD0BYXPuqz3MQHCd4S9jrnsaTD+jHAW4GJ5OZo/aYmiTdd+qI1k1G/\n8ZIZ16HzHr0Jd22T9zPiBQNSV5Au4K5IuJAed+dhoBq1k8tSCg3XLqLiwIGb\nxMdyPxoyP7tbWfGKu/769dDNsmzA6REw22WSS2SPaR1GZNvrtX7GoMluB6ri\ntj4+mNxJTn7ytgyut0BMQMuEqz3VQegzkBn1qs46l8sB3J2hEP8TTa1ud650\nSAYOYN2AsJ23MOTaltuF3MnjSRykRwWdGXNw04TM9FgdZDDfpZrrJuRotGLz\nlE/BYh5nUZ3JrisGxJBGD8hT75anVAZkvIf9CVi2qlZSEuWTgJ6+nORjcqbh\n1RVaaCA2ALKJtzyQVl36Qx5q48+YAX5FSrF7pUISquCvOiOn88Y9NoSDu1lV\nOUGi1ZEUxYKJPO813qc4pNDmj0RAgQ3vPNQneLmyOCUN29wCcq0Pp0dG4/Xm\nNr2i\r\n=kWxs\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIHAx2oOlWlms7679KCBfgkKdV4oE5W8ZIgRMihX+XGPhAiEAneTxbDyRRz1q49joSqyOuHbCa5wzXIAPpPoFg6OHzC8="
					}
				]
			},
			"maintainers": [
				{
					"name": "liujigang",
					"email": "liujigangvip@gmail.com"
				}
			],
			"_npmUser": {
				"name": "liujigang",
				"email": "liujigangvip@gmail.com"
			},
			"directories": {},
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-pt2rem_5.1.1_1596782800454_0.12705442969088954"
			},
			"_hasShrinkwrap": false
		},
		"5.1.2": {
			"name": "postcss-pt2rem",
			"description": "A CSS post-processor that converts pt(not real pt) to rem. the source form postcss-pxtorem",
			"version": "5.1.2",
			"author": {
				"name": "cuth"
			},
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "git+ssh://git@github.com/liujigang/postcss-pxtorem.git"
			},
			"bugs": {
				"url": "https://github.com/liujigang/postcss-pxtorem/issues"
			},
			"main": "index.js",
			"scripts": {
				"lint": "eslint .",
				"test": "jasmine-node spec"
			},
			"husky": {
				"hooks": {
					"pre-commit": "lint-staged"
				}
			},
			"lint-staged": {
				"*.js": [
					"eslint --fix",
					"prettier --write"
				]
			},
			"devDependencies": {
				"eslint": "^6.8.0",
				"husky": "^4.2.3",
				"jasmine-node": "^3.0.0",
				"lint-staged": "^10.0.8",
				"prettier": "^1.19.1"
			},
			"keywords": [
				"css",
				"rem",
				"pixel",
				"pt",
				"postcss",
				"postcss-plugin"
			],
			"dependencies": {
				"postcss": "^7.0.32"
			},
			"gitHead": "3f6d7c53bb74551c49cdbc40132cfb982029c39f",
			"homepage": "https://github.com/liujigang/postcss-pxtorem#readme",
			"_id": "postcss-pt2rem@5.1.2",
			"_nodeVersion": "12.18.0",
			"_npmVersion": "6.14.7",
			"dist": {
				"integrity": "sha512-QPQFDodD744rhzlAd7e1IimSvVun105XGQh90Zn+MttAoSQBAZ6V1lvob0Oi+ofs8MpVIEguhUuFaRdBkPp/Sw==",
				"shasum": "8f1308aa3995fbc522fbe77baa9fb1858fcf9de7",
				"tarball": "https://registry.npmjs.org/postcss-pt2rem/-/postcss-pt2rem-5.1.2.tgz",
				"fileCount": 12,
				"unpackedSize": 29845,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfLPuHCRA9TVsSAnZWagAAUb4P/0bTRv7AhXkXrnU0JJTd\nAS684g6V7g9BEqDLeRuUrA3aax63UVZk0XIGKh9YwYVzUM3IrN5XwHM3pmsG\n1ZFvGaRD4bqvSOKussqGAuman7Qx74BSaQUfi9s7jz9ju6/WiZtHmE19tpr+\nMTDJ/D0Mf3tUXlMOiBoSusS+yol7bAxDdmBARFJ2V7X9+lnzJQYllZRj/igZ\n3ydNoDrCGat7abZ+JDFfnDfHm3IP4Pr6UGUsgDwiS/Trp73cIn/KMGT9PRT/\nKBi97RMXlslxHmGnzhZw/5tiNiO9hKsrXP1LW9ZWoAV6+qaQhW+aAd0aczkv\nd59e6w1HOHsZpLTvZe4A45aQ28TcAwdcYIN7lSq58+MGbFolITosfTpNp0yM\n0IcnQkx0wh+5iDaGgLJnttvO5WWV7Bjz4+yQu3QY1F3+T/uRIn9ycwvxQb32\n6KHnZpqWH2MAb3ZfPDYBTHOr9ewocatCAI4cIBp0h9fIPdRwRpYg3dzm77et\nI3MIFyZSEEi6bOvm/bOLjrZPIVXdKy8r0RqgEfaw1bLR4xCYQWrF0gQi9ArU\nXqMA5CKXqt/4MD1kZbUp+a6evqA1+MuQMP6fZrvjrOcOE57tdxGNvW0swKKA\nDFOV5V06ok1nZW3TqLJLs+xIxV28bFPBsKr0OMPahmKccCQ3lVSOc4FTBM71\nJS1s\r\n=6M4M\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEYCIQCwoz2TS9j8aJT/uGIF6lm25qr5Mcl67q/EQwSm5DoPdQIhAM+4C7GMnyoSlCA+nTEieTuYNCvVgVphYb67tg5QFWbU"
					}
				]
			},
			"maintainers": [
				{
					"name": "liujigang",
					"email": "liujigangvip@gmail.com"
				}
			],
			"_npmUser": {
				"name": "liujigang",
				"email": "liujigangvip@gmail.com"
			},
			"directories": {},
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-pt2rem_5.1.2_1596783494709_0.1732270895952832"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2020-08-07T06:46:40.454Z",
		"5.1.1": "2020-08-07T06:46:40.804Z",
		"modified": "2022-05-13T06:36:24.234Z",
		"5.1.2": "2020-08-07T06:58:14.834Z"
	},
	"maintainers": [
		{
			"name": "liujigang",
			"email": "liujigangvip@gmail.com"
		}
	],
	"description": "A CSS post-processor that converts pt(not real pt) to rem. the source form postcss-pxtorem",
	"homepage": "https://github.com/liujigang/postcss-pxtorem#readme",
	"keywords": [
		"css",
		"rem",
		"pixel",
		"pt",
		"postcss",
		"postcss-plugin"
	],
	"repository": {
		"type": "git",
		"url": "git+ssh://git@github.com/liujigang/postcss-pxtorem.git"
	},
	"author": {
		"name": "cuth"
	},
	"bugs": {
		"url": "https://github.com/liujigang/postcss-pxtorem/issues"
	},
	"license": "MIT",
	"readme": "# postcss-pttorem\n\nA plugin for [PostCSS](https://github.com/ai/postcss) that generates rem units from pt（ pixel units , pt = px just alias. because px in other used and pt rarely used ）.\n\nThe code fork for [postcss-pxtorem](https://github.com/cuth/postcss-pxtorem)，just modify little.\n\n## Install\n\n```shell\n$ npm install postcss-pttorem --save-dev\n```\n\n## Usage\n\nPixels are the easiest unit to use (*opinion*). The only issue with them is that they don't let browsers change the default font size of 16. This script converts every px value to a rem from the properties you choose to allow the browser to set the font size.\n\n\n### Input/Output\n\n*With the default settings, only font related properties are targeted.*\n\n```css\n// input\nh1 {\n    margin: 0 0 20px;\n    font-size: 32pt;\n    padding-top: 32Pt;\n    line-height: 1.2;\n    letter-spacing: 1pt;\n}\n\n// output\nh1 {\n    margin: 0 0 20px;\n    font-size: 2rem;\n    padding-top: 2rem;\n    line-height: 1.2;\n    letter-spacing: 0.0625rem;\n}\n```\n\n### Example\n\n```js\nvar fs = require('fs');\nvar postcss = require('postcss');\nvar pttorem = require('postcss-pttorem');\nvar css = fs.readFileSync('main.css', 'utf8');\nvar options = {\n    replace: false\n};\nvar processedCss = postcss(pttorem(options)).process(css).css;\n\nfs.writeFile('main-rem.css', processedCss, function (err) {\n  if (err) {\n    throw err;\n  }\n  console.log('Rem file written.');\n});\n```\n\n### options\n\nType: `Object | Null`  \nDefault:\n```js\n{\n    rootValue: 16,\n    unitPrecision: 8,\n    propList: ['font', 'font-size', 'line-height', 'letter-spacing'],\n    selectorBlackList: [],\n    replace: true,\n    mediaQuery: false,\n    minPixelValue: 0,\n    exclude: /node_modules/i\n}\n```\n\n- `rootValue` (Number | Function) Represents the root element font size or returns the root element font size based on the [`input`](https://api.postcss.org/Input.html) parameter\n- `unitPrecision` (Number) The decimal numbers to allow the REM units to grow to.\n- `propList` (Array) The properties that can change from pt to rem.\n    - Values need to be exact matches.\n    - Use wildcard `*` to enable all properties. Example: `['*']`\n    - Use `*` at the start or end of a word. (`['*position*']` will match `background-position-y`)\n    - Use `!` to not match a property. Example: `['*', '!letter-spacing']`\n    - Combine the \"not\" prefix with the other prefixes. Example: `['*', '!font*']` \n- `selectorBlackList` (Array) The selectors to ignore and leave as pt.\n    - If value is string, it checks to see if selector contains the string.\n        - `['body']` will match `.body-class`\n    - If value is regexp, it checks to see if the selector matches the regexp.\n        - `[/^body$/]` will match `body` but not `.body`\n- `replace` (Boolean) Replaces rules containing rems instead of adding fallbacks.\n- `mediaQuery` (Boolean) Allow pt to be converted in media queries.\n- `minPixelValue` (Number) Set the minimum pixel value to replace.\n- `exclude` (String, Regexp, Function) The file path to ignore and leave as pt.\n    - If value is string, it checks to see if file path contains the string.\n        - `'exclude'` will match `\\project\\postcss-pxtorem\\exclude\\path`\n    - If value is regexp, it checks to see if file path matches the regexp.\n        - `/exclude/i` will match `\\project\\postcss-pxtorem\\exclude\\path`\n    - If value is function, you can use exclude function to return a true and the file will be ignored.\n        - the callback will pass the file path as  a parameter, it should returns a Boolean result.\n        - `function (file) { return file.indexOf('exclude') !== -1; }`\n\n### Use with gulp-postcss and autoprefixer\n\n```js\nvar gulp = require('gulp');\nvar postcss = require('gulp-postcss');\nvar autoprefixer = require('autoprefixer');\nvar pttorem = require('postcss-pttorem');\n\ngulp.task('css', function () {\n\n    var processors = [\n        autoprefixer({\n            browsers: 'last 1 version'\n        }),\n        pttorem({\n            replace: false\n        })\n    ];\n\n    return gulp.src(['build/css/**/*.css'])\n        .pipe(postcss(processors))\n        .pipe(gulp.dest('build/css'));\n});\n```\n\n### A message about ignoring properties\nCurrently, the easiest way to have a single property ignored is to use a capital in the pixel unit declaration.\n\n```css\n// `pt` is converted to `rem`\n.convert {\n    font-size: 16pt; // converted to 1rem\n}\n```\n",
	"readmeFilename": "README.md",
	"_downloads": 11
}