{
	"_id": "postcss-var-replace",
	"name": "postcss-var-replace",
	"dist-tags": {
		"latest": "1.0.0"
	},
	"versions": {
		"1.0.0": {
			"name": "postcss-var-replace",
			"version": "1.0.0",
			"description": "PostCSS plugin to replace CSS variables with their static values",
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/shellscape/postcss-var-replace.git"
			},
			"author": {
				"name": "Andrew Powell",
				"email": "andrew@shellscape.org"
			},
			"main": "dist/index.js",
			"module": "dist/index.mjs",
			"exports": {
				".": {
					"import": {
						"types": "./dist/index.d.mts",
						"default": "./dist/index.mjs"
					},
					"require": {
						"types": "./dist/index.d.ts",
						"default": "./dist/index.js"
					}
				},
				"./package.json": "./package.json"
			},
			"engines": {
				"node": ">=18.0.0"
			},
			"keywords": [
				"css",
				"plugin",
				"postcss",
				"postcss-plugin",
				"replace",
				"var",
				"variables"
			],
			"peerDependencies": {
				"postcss": "^8.4.31"
			},
			"dependencies": {
				"balanced-match": "^2.0.0",
				"escape-string-regexp": "^4.0.0"
			},
			"devDependencies": {
				"@types/balanced-match": "^3.0.2",
				"ava": "^5.3.1",
				"bluebird": "^3.5.0",
				"chai": "^4.1.1",
				"chai-as-promised": "^7.1.1",
				"cssnano": "^4.0.0",
				"eslint-config-shellscape": "^6.0.1",
				"husky": "^8.0.3",
				"lint-staged": "^15.1.0",
				"mocha": "^5.2.0",
				"postcss": "^8.4.31",
				"postcss-discard-comments": "^4.0.0",
				"postcss-normalize-whitespace": "^4.0.0",
				"tsup": "^8.0.1",
				"typescript": "^5.3.2"
			},
			"types": "dist/index.d.mts",
			"funding": {
				"type": "github",
				"url": "https://github.com/sponsors/shellscape"
			},
			"lint-staged": {
				"*.{ts,js}": [
					"eslint --fix --cache"
				],
				"**/(package|tsconfig(.*)?).json": [
					"prettier --write"
				],
				"(pnpm-workspace|.github/**/*).{yml,yaml}": [
					"prettier --write"
				],
				"*package.json": [
					"prettier --write --plugin=prettier-plugin-package"
				],
				"((.github/**/*)|(README|CHANGELOG)|(**/(README|CHANGELOG))).md": [
					"prettier --write"
				]
			},
			"scripts": {
				"build": "tsup --config tsup.config.ts",
				"lint": "eslint .",
				"lint:fix": "eslint . --fix",
				"pretest": "pnpm build",
				"test": "mocha"
			},
			"bugs": {
				"url": "https://github.com/shellscape/postcss-var-replace/issues"
			},
			"homepage": "https://github.com/shellscape/postcss-var-replace#readme",
			"_id": "postcss-var-replace@1.0.0",
			"_integrity": "sha512-Aw8t/L0wmuJMNUbYHl7AfJmQ7pUgLrS0zXz+AR+380QxJ85HA8Gxkg3+HvkWK0RoRKpoErpVhakd0k/aHOlNzw==",
			"_resolved": "/private/var/folders/07/ywbfgwc57_z4yx4m8vzhr8580000gp/T/60cc809db51bfdd87bfcbfdaa13b6d5d/postcss-var-replace-1.0.0.tgz",
			"_from": "file:postcss-var-replace-1.0.0.tgz",
			"_nodeVersion": "18.16.1",
			"_npmVersion": "9.5.1",
			"dist": {
				"integrity": "sha512-Aw8t/L0wmuJMNUbYHl7AfJmQ7pUgLrS0zXz+AR+380QxJ85HA8Gxkg3+HvkWK0RoRKpoErpVhakd0k/aHOlNzw==",
				"shasum": "6e88af756a0efe2e4cc88bf2d9cba1edef7cccb3",
				"tarball": "https://registry.npmjs.org/postcss-var-replace/-/postcss-var-replace-1.0.0.tgz",
				"fileCount": 9,
				"unpackedSize": 178496,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIHF10DmEbOgB7v2n18Yt/60Wd9pC/GpXC/dGlyW/d28rAiEA9Z0KA1wtLAQIivnWcFg96yUFe7vpXioMSF0FfHVhZ58="
					}
				]
			},
			"_npmUser": {
				"name": "shellscape",
				"email": "andrew@shellscape.org"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "shellscape",
					"email": "andrew@shellscape.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-var-replace_1.0.0_1701290077237_0.5895080980822573"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2023-11-29T20:34:37.236Z",
		"1.0.0": "2023-11-29T20:34:37.454Z",
		"modified": "2023-11-29T20:34:37.698Z"
	},
	"maintainers": [
		{
			"name": "shellscape",
			"email": "andrew@shellscape.org"
		}
	],
	"description": "PostCSS plugin to replace CSS variables with their static values",
	"homepage": "https://github.com/shellscape/postcss-var-replace#readme",
	"keywords": [
		"css",
		"plugin",
		"postcss",
		"postcss-plugin",
		"replace",
		"var",
		"variables"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/shellscape/postcss-var-replace.git"
	},
	"author": {
		"name": "Andrew Powell",
		"email": "andrew@shellscape.org"
	},
	"bugs": {
		"url": "https://github.com/shellscape/postcss-var-replace/issues"
	},
	"license": "MIT",
	"readme": "[npm]: https://img.shields.io/npm/v/postcss-var-replace\n[npm-url]: https://www.npmjs.com/package/postcss-var-replace\n\n[![npm][npm]][npm-url]\n[![Join our Discord](https://img.shields.io/badge/join_our-Discord-5a64ea)](https://discord.gg/FywZN57mTg)\n[![libera manifesto](https://img.shields.io/badge/libera-manifesto-lightgrey.svg)](https://liberamanifesto.com)\n\n# postcss-var-replace\n\n[PostCSS](https://github.com/postcss/postcss) plugin to replace [CSS variables`](http://dev.w3.org/csswg/css-variables/) with their static values.\n\nThis plugin provides a future-proof way of using _most_ of CSS variables features, including selector cascading (with some caveats).\n\n## Requirements\n\nThis package requires an [LTS](https://github.com/nodejs/Release) Node version (v18.0.0+)\n\n## Install\n\n```console\nnpm add postcss-var-replace\n```\n\n# Usage\n\n[_For more general PostCSS usage, look here._](https://github.com/postcss/postcss#usage)\n\n```js\nimport postcss from 'postcss';\nimport { postcssVarReplace } from 'postcss-var-replace';\n\nconst input = `\n:root {\n\t--font-name: 'my-font-family-name';\n}\n\n@font-face {\n\tfont-family: var(--font-name);\n\tsrc: url('myfont.woff2') format('woff2');\n}`;\n\nconst { css } = postcss([postcssVarReplace()]).process(input);\n\nconsole.log(css);\n```\n\n## Options\n\n### `preserve`\n\nType: `boolean`<br>\nDefault: `false`\n\nAllows you to preserve custom properties & var() usage in output.\n\nPossible values:\n\n- `false`: Removes `--var` declarations and replaces `var()` with their resolved/computed values.\n- `true`: Keeps `var()` declarations in the output and has the computed value as a fallback declaration. Also keeps computed `--var` declarations.\n- `'computed'`: Keeps computed `--var` declarations in the output. Handy to make them available to your JavaScript.\n- `(declaration) => boolean|'computed'` : function/callback to programmatically return whether preserve the respective declaration\n\n### `preserveAtRulesOrder`\n\nType: `boolean`<br>\nDefault: `false`\n\nKeeps your at-rules like media queries in the order to defined them.\n\nIdeally, this would be defaulted to `true` and it will be in the next major version. All of the tests expecations need to be updated and probably just drop support for `preserveAtRulesOrder: false`\n\n### `preserveInjectedVariables`\n\nType: `boolean`<br>\nDefault: `true`\n\nWhether to preserve the custom property declarations inserted via the `variables` option from final output.\n\nA typical use case is [CSS Modules](https://github.com/css-modules/css-modules), where you would want to avoid\nrepeating custom property definitions in every module passed through this plugin. Setting this option to `false`\nprevents JS-injected variables from appearing in output CSS.\n\n```js\nimport postcss from 'postcss';\nimport { postcssVarReplace } from 'postcss-var-replace';\n\npostcss([\n  postcssVarReplace({\n    variables: {\n      '--some-var': '100px',\n      '--other-var': {\n        value: '#00ff00'\n      },\n      '--important-var': {\n        value: '#ff0000',\n        isImportant: true\n      }\n    }\n  })\n]).process(css, opts);\n```\n\n### `variables`\n\nType: `object`<br>\nDefault: `{}`\n\nDefine an object map of variables in JavaScript that will be declared at the `:root` scope.\n\nCan be a simple key-value pair or an object with a `value` property and an optional `isImportant` bool property.\n\nThe object keys are automatically prefixed with `--` (according to CSS custom property syntax) if you do not provide it.\n\n## Contributing, Working With This Repo\n\nWe ðŸ’› contributions! After all, this is a community-driven project. We have no corporate sponsorship or backing. The maintainers and users keep this project going!\n\nPlease check out our [Contribution Guide](./CONTRIBUTING.md).\n\n## Attribution\n\nThis is a modern fork of https://github.com/MadLittleMods/postcss-css-variables\n\n## License\n\n[MIT License](./LICENSE.md)\n",
	"readmeFilename": "README.md",
	"_downloads": 52126
}