{
	"_id": "postcss-atom-star",
	"_rev": "1-d1489383659ed2f42d27d9d334122b0f",
	"name": "postcss-atom-star",
	"dist-tags": {
		"latest": "0.1.0"
	},
	"versions": {
		"0.1.0": {
			"name": "postcss-atom-star",
			"version": "0.1.0",
			"description": "A utility-first CSS framework",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"atom-star"
			],
			"main": "lib/index.js",
			"scripts": {
				"build": "babel src --out-dir lib --copy-files",
				"test": "jest && eslint ."
			},
			"author": {
				"name": "Shiwuxing Hang",
				"email": "hswxing@hotmail.com"
			},
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/Charles-Hang/postcss-atom-star.git"
			},
			"dependencies": {
				"detective": "^5.2.0",
				"lodash": "^4.17.15",
				"postcss": "^7.0.18",
				"postcss-functions": "^3.0.0",
				"postcss-js": "^2.0.3",
				"postcss-nested": "^4.2.1",
				"postcss-selector-parser": "^6.0.2",
				"resolve": "^1.20.0"
			},
			"devDependencies": {
				"@babel/cli": "^7.0.0",
				"@babel/core": "^7.0.0",
				"@babel/node": "^7.0.0",
				"@babel/preset-env": "^7.0.0",
				"@logux/eslint-config": "^33.0.0",
				"eslint": "^6.8.0",
				"eslint-config-airbnb-base": "^14.1.0",
				"eslint-config-postcss": "^3.0.7",
				"eslint-config-standard": "^14.1.0",
				"eslint-plugin-es5": "^1.4.1",
				"eslint-plugin-import": "^2.20.2",
				"eslint-plugin-jest": "^22.19.0",
				"eslint-plugin-node": "^10.0.0",
				"eslint-plugin-prefer-let": "^1.0.1",
				"eslint-plugin-promise": "^4.2.1",
				"eslint-plugin-security": "^1.4.0",
				"eslint-plugin-standard": "^4.0.1",
				"eslint-plugin-unicorn": "^12.1.0",
				"jest": "^24.9.0",
				"prettier": "^2.2.1"
			},
			"babel": {
				"presets": [
					[
						"@babel/preset-env",
						{
							"targets": {
								"node": "8.9.0"
							}
						}
					]
				]
			},
			"eslintConfig": {
				"extends": "eslint-config-postcss"
			},
			"engines": {
				"node": ">=8.9.0"
			},
			"jest": {
				"setupFilesAfterEnv": [
					"<rootDir>/jest/customMatchers.js"
				],
				"testPathIgnorePatterns": [
					"<rootDir>/__tests__/utils/"
				]
			},
			"gitHead": "24b9c2a5e4cc447725615a8d62c40a90a8faf09e",
			"bugs": {
				"url": "https://github.com/Charles-Hang/postcss-atom-star/issues"
			},
			"homepage": "https://github.com/Charles-Hang/postcss-atom-star#readme",
			"_id": "postcss-atom-star@0.1.0",
			"_nodeVersion": "12.21.0",
			"_npmVersion": "6.14.11",
			"dist": {
				"integrity": "sha512-P45E0MQWZLqa//G9Ltkov0Ms+Xj64HGtyAmwfgAcAAo4pUCkWNqNNsivQUasQdTznW3Ac8U74pk/J0Rw8F2/OQ==",
				"shasum": "abe696996b1ee8207804d7d54e63dfd3e9f13043",
				"tarball": "https://registry.npmjs.org/postcss-atom-star/-/postcss-atom-star-0.1.0.tgz",
				"fileCount": 49,
				"unpackedSize": 67740,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgVMwLCRA9TVsSAnZWagAAw8IP/Rm/Vj/OT+OtKqUf4OGO\noxi0rsGVS4S8YZxYGUzhGbvwzcgVhI+HIki6DtJgT9vucGlIsqvSDdH3U0y8\nBW0bQ1UeqkbHNfVV4sNG9ZH0DdWQvctluOpFush0p2/3WktPfqrnSA4xGm/M\neFZyjki8aE9z6ijU1jtJT3UTAtRrQE6/i+6eFxs/5owuu0mbAzS4xkmrhuyT\nfXQaemTWp3ZMQM4wZWxeiB1fFCmatyzhe6cuz/4Ujp9rr9Kw/OqeiDGJQfM8\nqK126iQY2BEQIRPwAJMGo2aJEbRir3w4mwMAcQzhuo3C9ALNb/HrRTgsv1pk\n5BRSOqORuD372GlEmPaINkNo1pwrTCUkY9dXcceuviMarpahES0wN5I4Mibo\nJEdBaM/eW/0CyRsXyozuFldxNW23tT43SpsdggL2iV83IkwW/eFrsQTs32gX\nIU1Vs1e3NNwrYFIZaLqbCIAy0tUA1L9KMZXWTQGhKzzj4MXih6nde5ocRfW9\n0e6QVG5c0FTpGcAHpBobvynj524HlrX1ZrmMwj4wpdpDWRYFCHJRfFYdIkdo\nQA7vgwKckM6wxMbbkOV0Ba+Nbj/qWJweg+yxgfhEGolxf8rJodGko5IoJ877\np9+EJuXo59qhhGrafsKiDHcYAy0RGJ1jIhsvN5LQ13zJSlsKijP0NnD8e0Ha\n4+6G\r\n=oDL8\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEYCIQCpbfb4O3JawYsJEA9WIcKtBjIVlQyNv4ONc11j/w7G9AIhAIdwy4zFlg5AtX72E4G64d2vwAnpo7GEZTiUm5LOMtzm"
					}
				]
			},
			"_npmUser": {
				"name": "hswxing",
				"email": "hswxing@hotmail.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "hswxing",
					"email": "hswxing@hotmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-atom-star_0.1.0_1616169994529_0.8912623064353737"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2021-03-19T16:06:34.528Z",
		"0.1.0": "2021-03-19T16:06:34.702Z",
		"modified": "2022-05-13T06:03:56.060Z"
	},
	"maintainers": [
		{
			"name": "hswxing",
			"email": "hswxing@hotmail.com"
		}
	],
	"description": "A utility-first CSS framework",
	"homepage": "https://github.com/Charles-Hang/postcss-atom-star#readme",
	"keywords": [
		"postcss",
		"css",
		"postcss-plugin",
		"atom-star"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/Charles-Hang/postcss-atom-star.git"
	},
	"author": {
		"name": "Shiwuxing Hang",
		"email": "hswxing@hotmail.com"
	},
	"bugs": {
		"url": "https://github.com/Charles-Hang/postcss-atom-star/issues"
	},
	"license": "MIT",
	"readme": "# PostCSS Atom Star\n\n一个 postcss 插件，获得原子化的 css 开发体验，能极大缩减最终 css 文件的大小。借鉴于[tailwindcss]\n\n[tailwindcss]: https://tailwindcss.com/\n\n<!-- TOC -->\n\n- [PostCSS Atom Star](#postcss-atom-star)\n    - [安装](#安装)\n    - [vscode 补全提示插件](#vscode-补全提示插件)\n    - [文档](#文档)\n        - [基本使用](#基本使用)\n            - [工具类](#工具类)\n            - [@apply](#apply)\n            - [theme()](#theme)\n            - [@screen](#screen)\n        - [配置](#配置)\n            - [screens](#screens)\n            - [theme](#theme)\n            - [style](#style)\n            - [plugins](#plugins)\n                - [自定义工具类](#自定义工具类)\n\n<!-- /TOC -->\n\n## 安装\n\n```\nnpm i -D postcss-atom-star\n```\n\n依赖于[postcss]，将本插件加入 postcss 插件列表即可\n\n```diff\n// example postcss.config.js\nmodule.exports = {\n    plugins: [\n+       require('postcss-atom-star'),\n        require('autoprefixer')\n    ]\n}\n```\n\n[postcss]: https://github.com/postcss/postcss#usage\n\n## vscode 补全提示插件\n\nvscode 下提供了补全提示插件[atom star auto complete]\n\n[atom star auto complete]: https://marketplace.visualstudio.com/items?itemName=hswxing.atom-star-auto-complete\n\n## 文档\n\n### 基本使用\n\n#### 工具类\n\n本 postcss 插件的核心功能便是通过配置文件，按原子化的思想生成工具类以供开发使用，例如\n\n```jsx\n{\n    /* react组件中 */\n}\n<div className=\"p-24 rounded\">\n    <h3 className=\"font-16 text-black\">title</h3>\n    <p className=\"text-gray\">this is a message.</p>\n</div>;\n```\n\n其中，p-24 -> padding: 24px， rounded -> border-radius: 4px，font-16 -> font-size: 16px，text-black -> text-color: #333，text-gray -> text-color: #888e98，开发时顺着思路将这些基础的工具类写出即可，可通过配置文件修改及添加新的工具类，配置相关的说明后面会具体再说\n\n开启这一功能需要在你的样式文件中写入`@atomstarcss utilities;`，便会在这个位置插入你所需的工具类：\n\n```css\n/* 你的样式文件 */\n/* 生成的工具类会插入到这个位置 */\n@atomstarcss utilities;\n```\n\n#### @apply\n\n也可在你的样式文件中使用工具类：\n\n```css\n.btn {\n    @apply font-bold py-8 px-16 rounded;\n    /* custom css */\n}\n.btn-blue {\n    @apply bg-blue text-white;\n    /* custom css */\n}\n\n/* 或者 */\n.btn {\n    @apply font-bold;\n    @apply py-8;\n    @apply px-16;\n    @apply rounded;\n    /* custom css */\n}\n.btn-blue {\n    @apply bg-blue;\n    @apply text-white;\n    /* custom css */\n}\n```\n\n不支持!important 的功能\n\n#### theme()\n\n当@apply 不能满足开发需求时，可以使用 theme()方法调用配置文件中 theme 里配置的变量：\n\n```css\n.btn {\n    background: theme(\"colors.gray.light\");\n}\n```\n\n#### @screen\n\n提供了一种便捷的响应式媒体查询使用方式：\n\n```css\n@screen md {\n    .btn {\n        @apply font-bold py-8 px-16 rounded;\n        /* custom css */\n    }\n    /* custom css */\n}\n\n/* 相当于 */\n\n@media (min-width: 640px) {\n    .btn {\n        @apply font-bold py-8 px-16 rounded;\n        /* custom css */\n    }\n    /* custom css */\n}\n```\n\nmd 为配置文件中 screens 中的项，(min-width: 640px)为 md 的配置，配置相关的说明后面会具体再说\n\n### 配置\n\n默认情况下，会在你的项目根目录寻找名为 atomstarcss.config.js 的配置文件，也可以自定义配置文件路径\n\n```js\n// postcss.config.js\nmodule.exports = {\n    plugins: [require(\"postcss-atom-star\")(\"./atomstarcss-config.js\")],\n};\n```\n\n```js\n// 举例，你的配置文件\nmodule.exports = {\n    screens: {\n        sm: \"640px\",\n        md: \"768px\",\n        lg: \"1024px\",\n        xl: \"1280px\",\n    },\n    theme: {\n        extend: {\n            colors: {\n                font: {\n                    cyan: \"#9cdbff\",\n                },\n            },\n        },\n    },\n    style: {\n        display: {\n            hidden: \"none\",\n            block: \"block\",\n            \"inline-block\": \"inline-block\",\n            inline: \"inline\",\n            flex: \"flex\",\n            \"inline-flex\": \"inline-flex\",\n        },\n        zIndex: (theme) => theme(\"size.zIndex\"),\n    },\n    plugins: [],\n};\n```\n\n#### screens\n\nscreens 配置的属性名就是@screen 便捷媒体查询的参数。属性值则有以下几种配法：\n\n```js\n// atomstarcss.config.js\nmodule.exports = {\n    screens: {\n        sm: \"640px\",\n        // => @media (min-width: 640px) { ... }\n\n        md: { min: \"768px\", max: \"1023px\" },\n        // => @media (min-width: 768px) and (max-width: 1023px) { ... }\n\n        lg: { max: \"1024px\" },\n        // => @media (max-width: 1024px) { ... }\n\n        xl: [{ min: \"1200px\", max: \"1400px\" }, { min: \"1500px\" }],\n        // => @media (min-width: 1200px) and (max-width: 1400px), (min-width: 1500px) { ... }\n\n        portrait: { raw: \"(orientation: portrait)\" },\n        // => @media (orientation: portrait) { ... }\n    },\n};\n```\n\n#### theme\n\ntheme 是要用到的定制主题，theme 的属性的定义会直接覆盖默认配置，如果只是想拓展而不是覆盖则使用 extend 来配置即可，如上面的例子。theme 可随意配置，\btheme 配置的属性既可以是对象也可以是方法，这个方法可以获取自身的配置，如下：\n\n```js\ntheme: {\n    colors: {\n        gray: {\n            default: '#9da6c3',\n            light: '#c4cadb',\n        }\n    },\n    fontColors: theme => ({\n        gray: theme('colors.gray.default')\n    }),\n    backgroundColors: theme => ({\n        gray: theme('colors.gray.light')\n    })\n}\n```\n\n默认配置为：\n\n```js\ntheme: {\n    colors: {\n        font: {\n            // 主题色\n            blue: '#4c84ff',\n            // 对应设计规范主文字色值\n            black: '#324580',\n            // 对应设计规范二级文字色值\n            gray: '#9da6c3',\n            // 对应设计规范三级文字色值\n            'gray-light': '#c4cadb',\n            green: '#41d9a6',\n            red: '#ff8080',\n            purple: '#9e63f0',\n            yellow: '#ffba1a',\n            white: '#fff',\n        },\n        background: {\n            transparent: 'transparent',\n            // 对应设计规范背景色值\n            'gray-light': '#f8fafc',\n            gray: '#f3f6fb',\n            blue: '#e9f0ff',\n            green: '#e8faf4',\n            red: '#ffefef',\n            purple: '#f4f0fd',\n            yellow: '#fff6e4',\n            white: '#fff',\n        },\n        border: {\n            gray: '#f5f7f9',\n            blue: '#4c84ff',\n            red: '#ff8080',\n        },\n    },\n    spacing: {\n        marginPadding: {\n            0: '0',\n            4: '4px',\n            6: '6px',\n            8: '8px',\n            10: '10px',\n            12: '12px',\n            16: '16px',\n            20: '20px',\n            24: '24px',\n            40: '40px',\n        },\n        content: {\n            auto: 'auto',\n            full: '100%',\n            14: '14px',\n            18: '18px',\n            20: '20px',\n            24: '24px',\n            32: '32px',\n            64: '64px',\n        },\n    },\n    size: {\n        font: {\n            12: '12px',\n            13: '13px',\n            14: '14px',\n            16: '16px',\n            18: '18px',\n            20: '20px',\n            24: '24px',\n        },\n        leading: {\n            normal: '1.5',\n            24: '24px',\n            32: '32px',\n            64: '64px',\n        },\n        zIndex: {\n            0: '0',\n            1: '1',\n            2: '2',\n            100: '100',\n            200: '200',\n            500: '500',\n            1000: '1000',\n        },\n    },\n},\n```\n\n#### style\n\nstyle 是生成工具类的具体定义，style 对象里的键名不可更改，只可配置属性值。style 里的属性值既可以是对象也可以是个方法，方法的参数就是用于获取 theme 配置的方法，如上面的例子。工具类的生成上按一定的规则，key 拼在类名中，key 为`default`时表示不拼接，若就想拼 default 则使用`-default`代替，value 拼在属性中，下面是默认的配置说明\n\n```js\n// 默认的style配置\nstyle: {\n    // .${key} { display: ${value}}\n    display: {\n        hidden: 'none',\n        block: 'block',\n        'inline-block': 'inline-block',\n        inline: 'inline',\n        flex: 'flex',\n        'inline-flex': 'inline-flex',\n    },\n    // .overflow-${key} { overflow: ${value}}\n    // .overflow-x-${key} { overflow-x: ${value}}\n    // .overflow-y-${key} { overflow-y: ${value}}\n    overflow: {\n        auto: 'auto',\n        hidden: 'hidden',\n        visible: 'visible',\n        scroll: 'scroll',\n    },\n    // .${key} { position: ${value}}\n    position: {\n        static: 'static',\n        relative: 'relative',\n        absolute: 'absolute',\n        fixed: 'fixed',\n    },\n    /**\n     * .top-${key} { top: ${value}}\n     * .right-${key} { right: ${value}}\n     * .bottom-${key} { bottom: ${value}}\n     * .left-${key} { left: ${value}}\n     */\n    positionSpacing: {\n        0: '0',\n    },\n    // .${key} { visibility: ${value}}\n    visibility: {\n        visible: 'visible',\n        invisible: 'hidden',\n    },\n    // .z-${key} { z-index: ${value}}\n    zIndex: (theme) => theme('size.zIndex'),\n    // .flex-${key} { flex: ${value}}\n    flex: {\n        1: '1 1 0%',\n        auto: '1 1 auto',\n        initial: '0 1 auto',\n        none: 'none',\n    },\n    // .flex-${key} { flex-direction: ${value}}\n    flexDirection: {\n        row: 'row',\n        'row-reverse': 'row-reverse',\n        col: 'column',\n        'col-reverse': 'column-reverse',\n    },\n    // .flex-${key} { flex-wrap: ${value}}\n    flexWrap: {\n        wrap: 'wrap',\n        'wrap-reverse': 'wrap-reverse',\n        'no-wrap': 'nowrap',\n    },\n    // .flex-shrink-${key} { flex-shrink: ${value}}\n    flexShrink: {\n        0: '0',\n        default: '1',\n    },\n    // .flex-grow-${key} { flex-grow: ${value}}\n    flexGrow: {\n        0: '0',\n        default: '1',\n    },\n    // .items-${key} { align-items: ${value}}\n    alignItems: {\n        start: 'flex-start',\n        end: 'flex-end',\n        center: 'center',\n        baseline: 'baseline',\n        stretch: 'stretch',\n    },\n    // .content-${key} { align-content: ${value}}\n    alignContent: {\n        start: 'flex-start',\n        end: 'flex-end',\n        center: 'center',\n        between: 'space-between',\n        around: 'space-around',\n    },\n    // .justify-${key} { justify-content: ${value}}\n    justifyContent: {\n        start: 'flex-start',\n        end: 'flex-end',\n        center: 'center',\n        between: 'space-between',\n        around: 'space-around',\n    },\n    // .self-${key} { align-self: ${value}}\n    alignSelf: {\n        auto: 'auto',\n        start: 'flex-start',\n        end: 'flex-end',\n        center: 'center',\n        stretch: 'stretch',\n        baseline: 'baseline',\n    },\n    // .order-${key} { order: ${value}}\n    order: {\n        first: '-9999',\n        last: '9999',\n    },\n    /**\n     * .m-${key} { margin: ${value}}\n     * .mx-${key} { margin-left: ${value}; margin-right: ${value}}\n     * .my-${key} { margin-top: ${value}; margin-bottom: ${value}}\n     * .mt-${key} { margin-top: ${value}}\n     * .mr-${key} { margin-right: ${value}}\n     * .mb-${key} { margin-bottom: ${value}}\n     * .ml-${key} { margin-left: ${value}}\n     */\n    margin: (theme) => ({\n        auto: 'auto',\n        ...theme('spacing.marginPadding'),\n    }),\n    /**\n     * .p-${key} { padding: ${value}}\n     * .px-${key} { padding-left: ${value}; padding-right: ${value}}\n     * .py-${key} { padding-top: ${value}; padding-bottom: ${value}}\n     * .pt-${key} { padding-top: ${value}}\n     * .pr-${key} { padding-right: ${value}}\n     * .pb-${key} { padding-bottom: ${value}}\n     * .pl-${key} { padding-left: ${value}}\n     */\n    padding: (theme) => theme('spacing.marginPadding'),\n    // .w-${key} { width: ${value}}\n    width: (theme) => theme('spacing.content'),\n    // .h-${key} { height: ${value}}\n    height: (theme) => theme('spacing.content'),\n    // .min-w-${key} { min-width: ${value}}\n    minWidth: {\n        0: '0',\n        full: '100%',\n    },\n    // .min-h-${key} { min-height: ${value}}\n    minHeight: {\n        0: '0',\n        full: '100%',\n    },\n    // .max-w-${key} { max-width: ${value}}\n    maxWidth: {\n        0: '0',\n        full: '100%',\n    },\n    // .max-h-${key} { max-height: ${value}}\n    maxHeight: {\n        0: '0',\n        full: '100%',\n    },\n    // .font-${key} { font-size: ${value}}\n    fontSize: (theme) => theme('size.font'),\n    // .font-${key} { font-weight: ${value}}\n    fontWeight: {\n        normal: '400',\n        bold: '600',\n    },\n    // .leading-${key} { line-height: ${value}}\n    lineHeight: (theme) => theme('size.leading'),\n    // .text-${key} { text-align: ${value}}\n    textAlign: {\n        left: 'left',\n        center: 'center',\n        right: 'right',\n        baseline: 'baseline',\n    },\n    // .align-${key} { vertical-align: ${value}}\n    verticalAlign: {\n        top: 'top',\n        middle: 'middle',\n        bottom: 'bottom',\n    },\n    // .whitespace-${key} { white-space: ${value}}\n    whitespace: {\n        normal: 'normal',\n        'no-wrap': 'nowrap',\n        pre: 'pre',\n        'pre-line': 'pre-line',\n        'pre-wrap': 'pre-wrap',\n    },\n    // .${key} { overflow-wrap: ${value}}\n    overflowWrap: {\n        'break-words': 'break-word',\n    },\n    // .${key} { word-break: ${value}}\n    wordBreak: {\n        'break-all': 'break-all',\n    },\n    // .text-${key} { color: ${value}}\n    color: (theme) => theme('colors.font'),\n    // .bg-${key} { background-attachment: ${value}}\n    backgroundAttachment: {\n        fixed: 'fixed',\n        scroll: 'scroll',\n    },\n    // .bg-${key} { background-position: ${value}}\n    backgroundPosition: {\n        left: 'left',\n        center: 'center',\n        right: 'right',\n        top: 'top',\n        bottom: 'bottom',\n    },\n    // .bg-${key} { background-repeat: ${value}}\n    backgroundRepeat: {\n        'no-repeat': 'no-repeat',\n    },\n    // .bg-${key} { background-size: ${value}}\n    backgroundSize: {\n        auto: 'auto',\n        cover: 'cover',\n        contain: 'contain',\n        full: '100% 100%',\n        'full-auto': '100%',\n    },\n    // .bg-${key} { background-color: ${value}}\n    backgroundColor: (theme) => theme('colors.background'),\n    /**\n     * .border-${key} { border-width: ${value}}\n     * .border-t-${key} { border-top-width: ${value}}\n     * .border-r-${key} { border-right-width: ${value}}\n     * .border-b-${key} { border-bottom-width: ${value}}\n     * .border-l-${key} { border-left-width: ${value}}\n     */\n    borderWidth: {\n        default: '1px',\n        0: '0',\n    },\n    // .border-${key} { border-color: ${value}}\n    borderColor: (theme) => theme('colors.border'),\n    // .border-${key} { border-style: ${value}}\n    borderStyle: {\n        solid: 'solid',\n        dashed: 'dashed',\n        dotted: 'dotted',\n    },\n    // .rounded-${key} { border-radius: ${value}}\n    borderRadius: {\n        default: '4px',\n        none: '0',\n        full: '9999px',\n    },\n    // .cursor-${key} { cursor: ${value}}\n    cursor: {\n        auto: 'auto',\n        default: 'default',\n        pointer: 'pointer',\n        move: 'move',\n        'not-allow': 'not-allowed',\n    },\n    // .outline-${key} { outline: ${value}}\n    outline: {\n        none: '0',\n    },\n    // .resize-${key} { resize: ${value}}\n    resize: {\n        default: 'both',\n        none: 'none',\n    },\n}\n```\n\n除了上面的类还有一个:\n\n```css\n.truncate {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n```\n\n#### plugins\n\nplugins 是用于自定义工具类的插件，默认为空数组\n\n```js\n// atomstarcss.config.js\nmodule.exports = {\n    plugins: [\n        function ({ addUtilities, escape, config, style }) {\n            // 自定义插件内容\n        },\n    ],\n};\n```\n\n`addUtilities()`用于添加自定义工具类\n\n`escape()`用于转义要在类名中使用的字符串\n\n`config()`用于获取配置文件的信息如 config('theme.colors')\n\n`style()`用于获取配置文件里 style 的信息如 style('display')\n\n##### 自定义工具类\n\n```js\n// atomstarcss.config.js\nmodule.exports = {\n    plugins: [\n        function ({ addUtilities }) {\n            const newUtilities = {\n                \".rotate-0\": {\n                    transform: \"rotate(0deg)\",\n                },\n                \".rotate-90\": {\n                    transform: \"rotate(90deg)\",\n                },\n                \".rotate-180\": {\n                    transform: \"rotate(180deg)\",\n                },\n                \".rotate-270\": {\n                    transform: \"rotate(270deg)\",\n                },\n            };\n\n            addUtilities(newUtilities);\n        },\n    ],\n};\n```\n\naddUtilities 参数是你自定义的工具类的样式对象，遵循 CSS-in-JS 的语法，也支持类似 Sass 的嵌套用法。也可以是样式对象的数组\n",
	"readmeFilename": "README.md",
	"_downloads": 3
}