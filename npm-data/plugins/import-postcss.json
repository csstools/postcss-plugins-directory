{
	"_id": "import-postcss",
	"_rev": "3-71f6b482f0cd72d77dd72ec3049cb25b",
	"name": "import-postcss",
	"description": "PostCSS plugin to import CSS files at whatever place you'd like to",
	"dist-tags": {
		"latest": "8.0.2"
	},
	"versions": {
		"8.0.2": {
			"name": "import-postcss",
			"version": "8.0.2",
			"description": "PostCSS plugin to import CSS files at whatever place you'd like to",
			"keywords": [
				"css",
				"postcss",
				"postcss-plugin",
				"import",
				"node modules",
				"npm"
			],
			"author": {
				"name": "Maxime Thirouin"
			},
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "https://github.com/iamale/import-postcss.git"
			},
			"files": [
				"index.js",
				"lib"
			],
			"dependencies": {
				"object-assign": "^4.0.1",
				"postcss": "^5.0.14",
				"postcss-value-parser": "^3.2.3",
				"read-cache": "^1.0.0",
				"resolve": "^1.1.7"
			},
			"devDependencies": {
				"ava": "^0.11.0",
				"eslint": "^1.10.3",
				"eslint-config-i-am-meticulous": "^2.0.0",
				"npmpub": "^3.0.1",
				"postcss-scss": "^0.1.3"
			},
			"scripts": {
				"lint": "eslint --fix .",
				"pretest": "npm run lint",
				"test": "ava",
				"release": "npmpub"
			},
			"eslintConfig": {
				"extends": "eslint-config-i-am-meticulous/es5"
			},
			"gitHead": "d3969a79070815dea754e9fac3364963cab51119",
			"bugs": {
				"url": "https://github.com/iamale/import-postcss/issues"
			},
			"homepage": "https://github.com/iamale/import-postcss",
			"_id": "import-postcss@8.0.2",
			"_shasum": "8b69904ac7616fc18d44370adb54e47f119ee199",
			"_from": ".",
			"_npmVersion": "2.3.0",
			"_nodeVersion": "1.0.4",
			"_npmUser": {
				"name": "iamale",
				"email": "ale@songbee.net"
			},
			"maintainers": [
				{
					"name": "iamale",
					"email": "ale@songbee.net"
				}
			],
			"dist": {
				"shasum": "8b69904ac7616fc18d44370adb54e47f119ee199",
				"tarball": "https://registry.npmjs.org/import-postcss/-/import-postcss-8.0.2.tgz",
				"integrity": "sha512-Q/iF0bxP2xIBdVfkBeNQkXsMWoiI5sdrLRoXBqh9sEW9XrxSTU+l9eu2MjnCXB/Wxu0qpWDYGIEwO4FxuqBTzw==",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIQDpjitN7ruKbQx1XO19aQB3D4DcXUP0KSpGhUUKTvVnXAIgPXPY6OLWhZDCWZlz3MaR7XahYwxn2jrglarbxClgzcs="
					}
				]
			},
			"_npmOperationalInternal": {
				"host": "packages-5-east.internal.npmjs.com",
				"tmp": "tmp/import-postcss-8.0.2.tgz_1456521089056_0.32106792251579463"
			}
		}
	},
	"readme": "# import-postcss\n\n[![Unix Build status](https://img.shields.io/travis/postcss/postcss-import/master.svg?branch=master&label=unix%20build)](https://travis-ci.org/postcss/postcss-import)\n[![Windows Build status](https://img.shields.io/appveyor/ci/MoOx/postcss-import/master.svg?label=window%20build)](https://ci.appveyor.com/project/MoOx/postcss-import/branch/master)\n[![Version](https://img.shields.io/npm/v/postcss-import.svg)](https://github.com/postcss/postcss-import/blob/master/CHANGELOG.md)\n\n> [PostCSS](https://github.com/postcss/postcss) plugin to transform `@import`\nrules by inlining content.\n\nThis plugin can consume local files, node modules or web_modules.\nTo resolve path of an `@import` rule, it can look into root directory\n(by default `process.cwd()`), `web_modules`, `node_modules`\nor local modules.\n_When importing a module, it will looks for `index.css` or file referenced in\n`package.json` in the `style` or `main` fields._\nYou can also provide manually multiples paths where to look at.\n\nThis is a fork of [postcss-import][], which is awesome, but [deliberately doesn't support imports in the middle of file][issue-176].\n\n[postcss-import]: https://github.com/postcss/postcss-import\n[issue-176]: https://github.com/postcss/postcss-import/issues/176\n\n**Notes:**\n\n- **This plugin should probably be used as the first plugin of your list.\nThis way, other plugins will work on the AST as if there were only a single file\nto process, and will probably work as you can expect**.\n- This plugin works great with\n[postcss-url](https://github.com/postcss/postcss-url) plugin,\nwhich will allow you to adjust assets `url()` (or even inline them) after\ninlining imported files.\n- In order to optimize output, **this plugin will only import a file once** on\na given scope (root, media query...).\nTests are made from the path & the content of imported files (using a hash\ntable).\nIf this behavior is not what you want, look at `skipDuplicates` option\n\n## Installation\n\n```console\n$ npm install import-postcss\n```\n\n## Usage\n\nIf your stylesheets are not in the same place where you run postcss\n(`process.cwd()`), you will need to use `from` option to make relative imports\nwork from input dirname.\n\n```js\n// dependencies\nvar fs = require(\"fs\")\nvar postcss = require(\"postcss\")\nvar atImport = require(\"import-postcss\")\n\n// css to be processed\nvar css = fs.readFileSync(\"css/input.css\", \"utf8\")\n\n// process css\npostcss()\n  .use(atImport())\n  .process(css, {\n    // `from` option is required so relative import can work from input dirname\n    from: \"css/input.css\"\n  })\n  .then(function (result) {\n    var output = result.css\n\n    console.log(output)\n  })\n```\n\nUsing this `input.css`:\n\n```css\n/* can consume `node_modules`, `web_modules` or local modules */\n@import \"cssrecipes-defaults\"; /* == @import \"./node_modules/cssrecipes-defaults/index.css\"; */\n@import \"normalize.css\"; /* == @import \"./node_modules/normalize.css/normalize.css\"; */\n\n@import \"css/foo.css\"; /* relative to stylesheets/ according to `from` option above */\n\n@import \"css/bar.css\" (min-width: 25em);\n\nbody {\n  background: black;\n}\n```\n\nwill give you:\n\n```css\n/* ... content of ./node_modules/cssrecipes-defaults/index.css */\n/* ... content of ./node_modules/normalize.css/normalize.css */\n\n/* ... content of foo.css */\n\n@media (min-width: 25em) {\n/* ... content of bar.css */\n}\n\nbody {\n  background: black;\n}\n```\n\nCheckout [tests](test) for more examples.\n\n### Options\n\n#### `root`\n\nType: `String`  \nDefault: `process.cwd()` or _dirname of\n[the postcss `from`](https://github.com/postcss/postcss#node-source)_\n\nDefine the root where to resolve path (eg: place where `node_modules` are).\nShould not be used that much.  \n_Note: nested `@import` will additionally benefit of the relative dirname of\nimported files._\n\n#### `path`\n\nType: `String|Array`  \nDefault: `[]`\n\nA string or an array of paths in where to look for files.\n\n#### `transform`\n\nType: `Function`  \nDefault: `null`\n\nA function to transform the content of imported files. Take one argument (file\n  content) and should return the modified content or a resolved promise with it.\n`undefined` result will be skipped.\n\n```js\ntransform: function(css) {\n  return postcss([somePlugin]).process(css).then(function(result) {\n    return result.css;\n  });\n}\n```\n\n#### `plugins`\n\nType: `Array`  \nDefault: `undefined`\n\nAn array of plugins to be applied on each imported files.\n\n#### `onImport`\n\nType: `Function`  \nDefault: `null`\n\nFunction called after the import process. Take one argument (array of imported\nfiles).\n\n#### `resolve`\n\nType: `Function`  \nDefault: `null`\n\nYou can overwrite the default path resolving way by setting this option.\nThis function gets `(id, basedir, importOptions)` arguments and returns full\npath, array of paths or promise resolving paths.\nYou can use [resolve](https://github.com/substack/node-resolve) for that.\n\n#### `load`\n\nType: `Function`  \nDefault: null\n\nYou can overwrite the default loading way by setting this option.\nThis function gets `(filename, importOptions)` arguments and returns content or\npromised content.\n\n#### `skipDuplicates`\n\nType: `Boolean`  \nDefault: `true`\n\nBy default, similar files (based on the same content) are being skipped.\nIt's to optimize output and skip similar files like `normalize.css` for example.\nIf this behavior is not what you want, just set this option to `false` to\ndisable it.\n\n#### `addDependencyTo`\n\nType: `Object`  \nDefault: null\n\nAn object with `addDependency()` method, taking file path as an argument.\nCalled whenever a file is imported.\nYou can use it for hot-reloading in webpack `postcss-loader` like this:\n\n```js\npostcss: function(webpack) {\n  return [\n    require('import-postcss')({\n      addDependencyTo: webpack\n      /* Is equivalent to\n      onImport: function (files) {\n        files.forEach(this.addDependency)\n      }.bind(webpack)\n      */\n    })\n  ]\n}\n```\n\n#### Example with some options\n\n```js\nvar postcss = require(\"postcss\")\nvar atImport = require(\"import-postcss\")\n\npostcss()\n  .use(atImport({\n    path: [\"src/css\"]\n    transform: require(\"css-whitespace\")\n  }))\n  .process(cssString)\n  .then(function (result) {\n    var css = result.css\n  })\n```\n\n---\n\n## CONTRIBUTING\n\n* ⇄ Pull requests and ★ Stars are always welcome.\n* For bugs and feature requests, please create an issue.\n* Pull requests must be accompanied by passing automated tests (`$ npm test`).\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
	"maintainers": [
		{
			"name": "iamale",
			"email": "ale@songbee.net"
		}
	],
	"time": {
		"modified": "2022-06-19T00:54:12.814Z",
		"created": "2016-02-26T21:11:31.605Z",
		"8.0.2": "2016-02-26T21:11:31.605Z"
	},
	"homepage": "https://github.com/iamale/import-postcss",
	"keywords": [
		"css",
		"postcss",
		"postcss-plugin",
		"import",
		"node modules",
		"npm"
	],
	"repository": {
		"type": "git",
		"url": "https://github.com/iamale/import-postcss.git"
	},
	"author": {
		"name": "Maxime Thirouin"
	},
	"bugs": {
		"url": "https://github.com/iamale/import-postcss/issues"
	},
	"license": "MIT",
	"readmeFilename": "README.md",
	"_downloads": 294
}