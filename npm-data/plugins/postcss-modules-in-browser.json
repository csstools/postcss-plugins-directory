{
	"_id": "postcss-modules-in-browser",
	"_rev": "2-fa4924836d2d8c96d936f57857cf4111",
	"name": "postcss-modules-in-browser",
	"dist-tags": {
		"latest": "4.0.0"
	},
	"versions": {
		"0.0.1": {
			"name": "postcss-modules-in-browser",
			"version": "0.0.1",
			"description": "An in-browser PostCSS plugin to use CSS Modules everywhere",
			"main": "build/index.js",
			"keywords": [
				"postcss",
				"postcss-browser",
				"css",
				"postcss-plugin",
				"postcss-plugin-in-browser",
				"modules",
				"css modules",
				"components"
			],
			"author": {
				"name": "Jackson Cao",
				"email": "caoyongqiang00@gmail.com"
			},
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/css-modules/postcss-modules.git"
			},
			"dependencies": {
				"generic-names": "^2.0.1",
				"icss-replace-symbols": "^1.1.0",
				"lodash.camelcase": "^4.3.0",
				"postcss": "^7.0.32",
				"postcss-modules-extract-imports": "^2.0.0",
				"postcss-modules-local-by-default": "^3.0.2",
				"postcss-modules-scope": "^2.2.0",
				"postcss-modules-values": "^3.0.0",
				"string-hash": "^1.1.1"
			},
			"devDependencies": {
				"autoprefixer": "^9.6.1",
				"babel-cli": "^6.26.0",
				"babel-core": "^6.26.3",
				"babel-eslint": "^10.1.0",
				"babel-preset-env": "^1.7.0",
				"eslint": "^7.3.1",
				"eslint-plugin-import": "^2.21.2",
				"eslint-plugin-jest": "^23.17.0",
				"husky": "^4.2.5",
				"jest": "^26.0.1",
				"lint-staged": "^10.2.11",
				"prettier": "^2.0.5"
			},
			"scripts": {
				"pretest": "$(npm bin)/eslint src test",
				"test": "$(npm bin)/jest",
				"transpile": "$(npm bin)/babel src -d build",
				"prepublish": "npm run transpile",
				"postpublish": "rm -rf build && git push --follow-tags",
				"precommit": "lint-staged"
			},
			"lint-staged": {
				"*.{json,md}": [
					"prettier --write",
					"git add"
				],
				"*.js": [
					"prettier --write",
					"eslint --fix",
					"git add"
				]
			},
			"require": "babel-core/register",
			"gitHead": "db0d49750e110a27a2789db6c19afeb7c1f909a7",
			"bugs": {
				"url": "https://github.com/css-modules/postcss-modules/issues"
			},
			"homepage": "https://github.com/css-modules/postcss-modules#readme",
			"_id": "postcss-modules-in-browser@0.0.1",
			"_nodeVersion": "12.18.3",
			"_npmVersion": "6.14.6",
			"dist": {
				"integrity": "sha512-UfP7TwEnnmNwTFLBmDZqfEybsMw8k6ssvew+aQ7GoG4IvdvwlvssmdQkMpAaJld6+XySWE3T0NzMlet/xRO/oQ==",
				"shasum": "3ad3936c22876ba665e7724653a2db49bed8cb7b",
				"tarball": "https://registry.npmjs.org/postcss-modules-in-browser/-/postcss-modules-in-browser-0.0.1.tgz",
				"fileCount": 12,
				"unpackedSize": 28558,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfItEQCRA9TVsSAnZWagAAWQkP/0EiM0xFeWBF3h4slXJA\nrCPLhv5pbKhmnNc0avbLASojrYMEdAExzkO/Iqb7lua4CPl/RzHKiv2TYJpq\nfV4/cO7TAEI+lnKeKBqc/5ar/ivn79QEQiOKQXNhBxkZDwyYh5wT3NJr9kwj\ny0y+x4VT5KYUSNsMEK4/UoG2oZhn+9fLDqzK4xM8uasIYW2vYLNtsjyGd/sM\nJ+Rr5v7wvt2SqgFkvHG+neALnNi/oZLqkAbK+gfGnR5mWjpICVsO/iyIEfDr\ni2XBdwwzKlVGvpqY2adcgOgc0mOc22HPbVOOONmJt+zxJ202M/zDzceonI08\nJk+V3HBjsmL2dNSzOHZ7ej5eA1ArmWV8Gu+DhgHjnzVG2Vg3KjWGHLRGKhvu\nWVDzJrvKvW338bZ2xwVXj0rL1mEmHWJfU1Uv2HRXFgXS+1Q7A3mCFKtpF2WI\n6q7iIhZWAAMfpTKPHVa2tZIFCLpSMBKlzxzB38rIImm8xs+jOWAqoE2/v2SS\nQBC6TsDjFRQTU6Chq9EAWk2TmzfuysxQH+cmb4hbDxlYKEVOKHMlmxyvj0ov\nifG2ZAwE7GjN1CY1Si7GdSWWvw1eEptwml4qP4fDecl2C8vcNVNKHEdRVL+G\nDE3tnJgxH5JqPh8Hpo+Nv6Izvqq6ajUFUWj7/vC7XDp1FHwZw7GUW6KZhX3E\n9Gl/\r\n=XyBG\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEQCICWbrbhh78Hl0yueB2cQTbCB69q8hFPhWca3v5s/BMMZAiAojnkrxq3MrrXRhZA7LmMb7VDHIqOQD5Hl5JmaDc1iZQ=="
					}
				]
			},
			"maintainers": [
				{
					"name": "jackson.cao",
					"email": "caoyongqiang00@gmail.com"
				}
			],
			"_npmUser": {
				"name": "jackson.cao",
				"email": "caoyongqiang00@gmail.com"
			},
			"directories": {},
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-modules-in-browser_0.0.1_1596117264255_0.5103218164127779"
			},
			"_hasShrinkwrap": false
		},
		"4.0.0": {
			"name": "postcss-modules-in-browser",
			"version": "4.0.0",
			"description": "An in-browser PostCSS plugin to use CSS Modules everywhere",
			"main": "build/index.js",
			"keywords": [
				"postcss",
				"postcss-browser",
				"css",
				"postcss-plugin",
				"postcss-plugin-in-browser",
				"modules",
				"css modules",
				"components"
			],
			"author": {
				"name": "Jackson Cao",
				"email": "caoyongqiang00@gmail.com"
			},
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/css-modules/postcss-modules.git"
			},
			"dependencies": {
				"generic-names": "^2.0.1",
				"icss-replace-symbols": "^1.1.0",
				"lodash.camelcase": "^4.3.0",
				"postcss": "^7.0.32",
				"postcss-modules-extract-imports": "^2.0.0",
				"postcss-modules-local-by-default": "^3.0.2",
				"postcss-modules-scope": "^2.2.0",
				"postcss-modules-values": "^3.0.0",
				"string-hash": "^1.1.1"
			},
			"devDependencies": {
				"autoprefixer": "^9.6.1",
				"babel-cli": "^6.26.0",
				"babel-core": "^6.26.3",
				"babel-eslint": "^10.1.0",
				"babel-preset-env": "^1.7.0",
				"eslint": "^7.3.1",
				"eslint-plugin-import": "^2.21.2",
				"eslint-plugin-jest": "^23.17.0",
				"husky": "^4.2.5",
				"jest": "^26.0.1",
				"lint-staged": "^10.2.11",
				"prettier": "^2.0.5"
			},
			"scripts": {
				"pretest": "$(npm bin)/eslint src test",
				"test": "$(npm bin)/jest",
				"transpile": "$(npm bin)/babel src -d build",
				"prepublish": "npm run transpile",
				"postpublish": "rm -rf build && git push --follow-tags",
				"precommit": "lint-staged"
			},
			"lint-staged": {
				"*.{json,md}": [
					"prettier --write",
					"git add"
				],
				"*.js": [
					"prettier --write",
					"eslint --fix",
					"git add"
				]
			},
			"require": "babel-core/register",
			"gitHead": "61d256894d808bb17537dcafa49ff41f17ca429e",
			"bugs": {
				"url": "https://github.com/css-modules/postcss-modules/issues"
			},
			"homepage": "https://github.com/css-modules/postcss-modules#readme",
			"_id": "postcss-modules-in-browser@4.0.0",
			"_nodeVersion": "12.18.3",
			"_npmVersion": "6.14.6",
			"dist": {
				"integrity": "sha512-rOvOJqXUtiychb4m5adSgr0ByfAQOFl07i588Je4Fp7SnGYvfzvuCDEzgXhrw45Dw+vEoCvpazpcn+w5sYDCgg==",
				"shasum": "617534309c52d3fa37df06cf06ea68461837f0e6",
				"tarball": "https://registry.npmjs.org/postcss-modules-in-browser/-/postcss-modules-in-browser-4.0.0.tgz",
				"fileCount": 11,
				"unpackedSize": 27902,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfItHICRA9TVsSAnZWagAAYtEP/A8Z8EH+3wb7S8MFUG7w\nJBLVqOsLo7D+mUFuJrPTbSMt//ysQIcIJS5qOT3i+CJzoQ0YZiWuha/vGEBm\nl1D2gS3/D5EOgbe21DA7L0d9tngC0YeDp2MhHrCB59pAxb5Gaw1n8CufUpQg\n7yAqzxiXL7JBZ1DdEC+XPgKQ1RNwWUhax1WqkIL9EAyiOFSflRGpBPAGf4Jn\n508IUYF4ewv9sbPU0cXvrU7wFKflttpbUwTuYrSS2vLUqAj9GW+aJnT01xWp\nzt+Hdm8MpeZ0LNHcmZe4AeJUF7Vuhct/SI2YjuvsMEGp48L2GkPjba8+wYrT\nN1ZzoIE4maAZ4OXEuBCtHokwdA7z8cvdF23/lKqM+FmSHENHwmFYDmdgQCW+\n4rC3eren/LCIVTLJ+S+yze3AYlCc4HphcGPWe2kimtFCshwbIXwCBpasc/LH\nJw3NBZY1W9ib3ioxw1NadtYtAG784oVzCs+KGJHCSDqAO1iaea+EC4NhCDl2\nHRU9zlesqHYInbdaoPp47uJi8X1cGafplSw8vv5TJ9clXqKgcJ00bmablSrp\nEh/ZUE2yHO1qzhUzIrmnOL1F+kts1Qvsoxu0HE3boXdxWoR2XQHSjSmXq+6l\nZ+hk4xgde4FVI+Oq7hKYpD8KUsX8ZWPEwp3Pkj+EqyAE0ybh+hlJqo8E51iV\n4qGD\r\n=ly0q\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIQCscAmKT3Eq4opmugZayEYEnQROo99adb1GijNZ21DPpQIgZnOPkNUYCqipz0ggqEn9vB7apzwLdReNJqZlCJKkq7k="
					}
				]
			},
			"maintainers": [
				{
					"name": "jackson.cao",
					"email": "caoyongqiang00@gmail.com"
				}
			],
			"_npmUser": {
				"name": "jackson.cao",
				"email": "caoyongqiang00@gmail.com"
			},
			"directories": {},
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-modules-in-browser_4.0.0_1596117447784_0.595274841500667"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2020-07-30T13:54:24.221Z",
		"0.0.1": "2020-07-30T13:54:24.438Z",
		"modified": "2022-05-13T06:28:52.080Z",
		"4.0.0": "2020-07-30T13:57:27.869Z"
	},
	"maintainers": [
		{
			"name": "jackson.cao",
			"email": "caoyongqiang00@gmail.com"
		}
	],
	"description": "An in-browser PostCSS plugin to use CSS Modules everywhere",
	"homepage": "https://github.com/css-modules/postcss-modules#readme",
	"keywords": [
		"postcss",
		"postcss-browser",
		"css",
		"postcss-plugin",
		"postcss-plugin-in-browser",
		"modules",
		"css modules",
		"components"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/css-modules/postcss-modules.git"
	},
	"author": {
		"name": "Jackson Cao",
		"email": "caoyongqiang00@gmail.com"
	},
	"bugs": {
		"url": "https://github.com/css-modules/postcss-modules/issues"
	},
	"license": "MIT",
	"readme": "# postcss-modules [![Build Status][ci-img]][ci]\n\nA [PostCSS] plugin to use [CSS Modules] everywhere. Not only at the client side.\n\n[postcss]: https://github.com/postcss/postcss\n[ci-img]: https://travis-ci.org/css-modules/postcss-modules.svg\n[ci]: https://travis-ci.org/css-modules/postcss-modules\n[css modules]: https://github.com/css-modules/css-modules\n\n<a href=\"https://evilmartians.com/?utm_source=postcss-modules\">\n<img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\" alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\nWhat is this? For example, you have the following CSS:\n\n```css\n/* styles.css */\n:global .page {\n  padding: 20px;\n}\n\n.title {\n  composes: title from \"./mixins.css\";\n  color: green;\n}\n\n.article {\n  font-size: 16px;\n}\n\n/* mixins.css */\n.title {\n  color: black;\n  font-size: 40px;\n}\n\n.title:hover {\n  color: red;\n}\n```\n\nAfter the transformation it will become like this:\n\n```css\n._title_116zl_1 {\n  color: black;\n  font-size: 40px;\n}\n\n._title_116zl_1:hover {\n  color: red;\n}\n\n.page {\n  padding: 20px;\n}\n\n._title_xkpkl_5 {\n  color: green;\n}\n\n._article_xkpkl_10 {\n  font-size: 16px;\n}\n```\n\nAnd the plugin will give you a JSON object for transformed classes:\n\n```json\n{\n  \"title\": \"_title_xkpkl_5 _title_116zl_1\",\n  \"article\": \"_article_xkpkl_10\"\n}\n```\n\n## Usage\n\n### Saving exported classes\n\nBy default, a JSON file with exported classes will be placed next to corresponding CSS.\nBut you have a freedom to make everything you want with exported classes, just\nuse the `getJSON` callback. For example, save data about classes into a corresponding JSON file:\n\n```js\npostcss([\n  require(\"postcss-modules\")({\n    getJSON: function (cssFileName, json, outputFileName) {\n      var path = require(\"path\");\n      var cssName = path.basename(cssFileName, \".css\");\n      var jsonFileName = path.resolve(\"./build/\" + cssName + \".json\");\n      fs.writeFileSync(jsonFileName, JSON.stringify(json));\n    },\n  }),\n]);\n```\n\n`getJSON` may also return a `Promise`.\n\n### Generating scoped names\n\nBy default, the plugin assumes that all the classes are local. You can change\nthis behaviour using the `scopeBehaviour` option:\n\n```js\npostcss([\n  require(\"postcss-modules\")({\n    scopeBehaviour: \"global\", // can be 'global' or 'local',\n  }),\n]);\n```\n\nTo define paths for global modules, use the `globalModulePaths` option.\nIt is an array with regular expressions defining the paths:\n\n```js\npostcss([\n  require('postcss-modules')({\n    globalModulePaths: [/path\\/to\\/legacy-styles/, /another\\/paths/],\n  });\n]);\n```\n\nTo generate custom classes, use the `generateScopedName` callback:\n\n```js\npostcss([\n  require(\"postcss-modules\")({\n    generateScopedName: function (name, filename, css) {\n      var path = require(\"path\");\n      var i = css.indexOf(\".\" + name);\n      var line = css.substr(0, i).split(/[\\r\\n]/).length;\n      var file = path.basename(filename, \".css\");\n\n      return \"_\" + file + \"_\" + line + \"_\" + name;\n    },\n  }),\n]);\n```\n\nOr just pass an interpolated string to the `generateScopedName` option\n(More details [here](https://github.com/webpack/loader-utils#interpolatename)):\n\n```js\npostcss([\n  require(\"postcss-modules\")({\n    generateScopedName: \"[name]__[local]___[hash:base64:5]\",\n  }),\n]);\n```\n\nIt's possible to add custom hash to generate more unique classes using the `hashPrefix` option (like in [css-loader](https://webpack.js.org/loaders/css-loader/#hashprefix)):\n\n```js\npostcss([\n  require(\"postcss-modules\")({\n    generateScopedName: \"[name]__[local]___[hash:base64:5]\",\n    hashPrefix: \"prefix\",\n  }),\n]);\n```\n\n### Exporting globals\n\nIf you need to export global names via the JSON object along with the local ones, add the `exportGlobals` option:\n\n```js\npostcss([\n  require(\"postcss-modules\")({\n    exportGlobals: true,\n  }),\n]);\n```\n\n### Loading source files\n\nIf you need, you can pass a custom loader (see [FileSystemLoader] for example):\n\n```js\npostcss([\n  require(\"postcss-modules\")({\n    Loader: CustomLoader,\n  }),\n]);\n```\n\nYou can also pass any needed root path:\n\n```js\npostcss([\n  require('postcss-modules')({\n    root: 'C:\\\\',\n  });\n]);\n```\n\n### localsConvention\n\nType: `String | (originalClassName: string, generatedClassName: string, inputFile: string) => className: string`\nDefault: `null`\n\nStyle of exported classnames, the keys in your json.\n\n|         Name          |    Type    | Description                                                                                      |\n| :-------------------: | :--------: | :----------------------------------------------------------------------------------------------- |\n|   **`'camelCase'`**   | `{String}` | Class names will be camelized, the original class name will not to be removed from the locals    |\n| **`'camelCaseOnly'`** | `{String}` | Class names will be camelized, the original class name will be removed from the locals           |\n|    **`'dashes'`**     | `{String}` | Only dashes in class names will be camelized                                                     |\n|  **`'dashesOnly'`**   | `{String}` | Dashes in class names will be camelized, the original class name will be removed from the locals |\n\nIn lieu of a string, a custom function can generate the exported class names.\n\n## Integration with templates\n\nThe plugin only transforms CSS classes to CSS modules.\nBut you probably want to integrate these CSS modules with your templates.\nHere are some examples.\n\nAssume you've saved project's CSS modules in `cssModules.json`:\n\n```json\n{\n  \"title\": \"_title_xkpkl_5 _title_116zl_1\",\n  \"article\": \"_article_xkpkl_10\"\n}\n```\n\n### Pug (ex-Jade)\n\nLet's say you have a Pug template `about.jade`:\n\n```jade\nh1(class=css.title) postcss-modules\narticle(class=css.article) A PostCSS plugin to use CSS Modules everywhere\n```\n\nRender it:\n\n```js\nvar jade = require(\"jade\");\nvar cssModules = require(\"./cssModules.json\");\nvar html = jade.compileFile(\"about.jade\")({ css: cssModules });\nconsole.log(html);\n```\n\nAnd you'll get the following HTML:\n\n```html\n<h1 class=\"_title_xkpkl_5 _title_116zl_1\">postcss-modules</h1>\n<article class=\"_article_xkpkl_10\">\n  A PostCSS plugin to use CSS Modules everywhere\n</article>\n```\n\n### HTML\n\nFor HTML transformation we'll use [PostHTML](https://github.com/posthtml/posthtml) and [PostHTML CSS Modules](https://github.com/maltsev/posthtml-css-modules):\n\n```bash\nnpm install --save posthtml posthtml-css-modules\n```\n\nHere is our template `about.html`:\n\n```html\n<h1 css-module=\"title\">postcss-modules</h1>\n<article css-module=\"article\">\n  A PostCSS plugin to use CSS Modules everywhere\n</article>\n```\n\nTransform it:\n\n```js\nvar fs = require(\"fs\");\nvar posthtml = require(\"posthtml\");\nvar posthtmlCssModules = require(\"posthtml-css-modules\");\nvar template = fs.readFileSync(\"./about.html\", \"utf8\");\n\nposthtml([posthtmlCssModules(\"./cssModules.json\")])\n  .process(template)\n  .then(function (result) {\n    console.log(result.html);\n  });\n```\n\n(for using other build systems please check [the documentation of PostHTML](https://github.com/posthtml/posthtml/blob/master/README.md))\n\nAnd you'll get the following HTML:\n\n```html\n<h1 class=\"_title_xkpkl_5 _title_116zl_1\">postcss-modules</h1>\n<article class=\"_article_xkpkl_10\">\n  A PostCSS plugin to use CSS Modules everywhere\n</article>\n```\n\n## May I see the plugin in action?\n\nSure! Take a look at the [example](https://github.com/outpunk/postcss-modules-example).\n\nSee [PostCSS] docs for examples for your environment and don't forget to run\n\n```\nnpm install --save-dev postcss-modules\n```\n\n[filesystemloader]: https://github.com/css-modules/css-modules-loader-core/blob/master/src/file-system-loader.js\n",
	"readmeFilename": "README.md",
	"_downloads": 9
}