{
	"_id": "@iiison/postcss-advanced-variables",
	"_rev": "1-37b475309a8646404050df41f3f5b5db",
	"name": "@iiison/postcss-advanced-variables",
	"dist-tags": {
		"latest": "4.0.0"
	},
	"versions": {
		"4.0.0": {
			"name": "@iiison/postcss-advanced-variables",
			"version": "4.0.0",
			"description": "Use Sass-like variables, conditionals, and iterators in CSS",
			"author": {
				"name": "Bharat Soni",
				"email": "i.bharat.soni@gmail.com"
			},
			"license": "CC0-1.0",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/iiison/postcss-advanced-variables.git"
			},
			"homepage": "https://github.com/iiison/postcss-advanced-variables",
			"bugs": {
				"url": "https://github.com/iiison/postcss-advanced-variables/issues"
			},
			"main": "index.js",
			"module": "index.mjs",
			"scripts": {
				"prepublishOnly": "npm test",
				"pretest": "rollup -c .rollup.js --silent",
				"test": "npm run test:js && npm run test:tape",
				"test:js": "eslint src/*.js src/lib/*.js --cache --ignore-path .gitignore --quiet",
				"test:tape": "postcss-tape"
			},
			"engines": {
				"node": "^10 || ^12 || >=14"
			},
			"dependencies": {
				"@csstools/sass-import-resolve": "^1.0.0"
			},
			"peerDependencies": {
				"postcss": "^8.2.4"
			},
			"devDependencies": {
				"@babel/core": "^7.1.6",
				"@babel/plugin-external-helpers": "^7.0.0",
				"@babel/preset-env": "^7.1.6",
				"babel-eslint": "^10",
				"babel-plugin-array-includes": "^2.0.3",
				"eslint": "^5.9.0",
				"eslint-config-dev": "^2.0.0",
				"postcss": "^8.2.4",
				"postcss-scss": "^3.0.5",
				"postcss-tape": "^6.0.1",
				"pre-commit": "^1.2.2",
				"rollup": "^0.67.3",
				"rollup-plugin-babel": "^4.0.3"
			},
			"eslintConfig": {
				"extends": "dev",
				"parser": "babel-eslint",
				"rules": {
					"consistent-return": [
						0
					],
					"max-params": [
						1,
						5
					]
				}
			},
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"sass",
				"scss",
				"variables",
				"conditionals",
				"iterators",
				"fors",
				"eaches",
				"medias",
				"defaults"
			],
			"gitHead": "0327387c79c764a3b9091de5a23ed9391d0be0d4",
			"_id": "@iiison/postcss-advanced-variables@4.0.0",
			"_nodeVersion": "15.5.0",
			"_npmVersion": "7.3.0",
			"dist": {
				"integrity": "sha512-IA9G3fKlgq2e1SWsZCX1dB3OOnXU/8zk7CMf6Z7FE577RQn02Y+Np9cmOQFhNNli0tqMd6ZSVqhK9MGVC1/41g==",
				"shasum": "84631f165f8eaf322276a020a49f91c62b6f0364",
				"tarball": "https://registry.npmjs.org/@iiison/postcss-advanced-variables/-/postcss-advanced-variables-4.0.0.tgz",
				"fileCount": 6,
				"unpackedSize": 70791,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh14djCRA9TVsSAnZWagAAa3EP/jCprRX8713uv+jPtIUY\nDRpLE8rj3FrdBBi1Ffp18NqteWXCkEkoN7N1mge92bGcBmS55HUwBpvAt2jx\nWZyo8XEEPOHwZ12uvwzUXyossML71PRVoBDXopzsxMpSZMVhcZAMw/VbW9vd\nbsY/Sh/qeJur4OLrcJFqpHsw6Wc0I1Z5y+q8yFSQqqTCqO4zia3aR28Jr7xC\nb5fLV2oxn+ka7WAQk+lB/IbklyHXbiIFbB/x03yqD/4PWp/4GISUrXARH0GN\nGse1sunoHCvIlwI4VAR+Ry9NSrbdV7MAdjXvBDs8JJ7zVHUs5nTu/Yk0rO6v\n4HWvwyfjCpCuqRrSzBdZMi4uwg3YVtMH3Dh7GowbwJkIOFGG8Yu/nsoTVbng\nCJk0K6A6A9MafhagqFIcDFneOTqluyJrjpybH5+xEHh1Ux31ffXehmyVWZhW\ntncBMcapO8ccaXwPbMK61Msv6P7ZcoyA8fhicnkALnEQCJIrHNSDLHEiEB4H\nKwD6Gj6t7aGE+cBgDrdZUrR02e05vJLaxhHo8d4V8zzrYSNGVUeSgaspEEYt\nwcQkWyZsXweeMfUfujcRVVvfATvLqpXrnQdhqB9r8S5v3T5MwF8GWqcIEm5r\n0IesiA8bqqFAscduOxE3iauvmiwgXRuEB+q/98Allg5wjxUYGR0jk3fQW2uv\n//Ru\r\n=+gRv\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEQCICoCIsb8aiQhLAFBdFfP/YAgC87YpCDVWJUkpUUPeyd2AiAYGEYxC8NLhIMwelUfC73Rhza8lt6pYg1C/rfBE2gAHg=="
					}
				]
			},
			"_npmUser": {
				"name": "iiison",
				"email": "i.bharat.soni@gmail.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "iiison",
					"email": "i.bharat.soni@gmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-advanced-variables_4.0.0_1641514850922_0.32145360623021"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2022-01-07T00:20:50.859Z",
		"4.0.0": "2022-01-07T00:20:51.098Z",
		"modified": "2022-04-05T19:42:21.509Z"
	},
	"maintainers": [
		{
			"name": "iiison",
			"email": "i.bharat.soni@gmail.com"
		}
	],
	"description": "Use Sass-like variables, conditionals, and iterators in CSS",
	"homepage": "https://github.com/iiison/postcss-advanced-variables",
	"keywords": [
		"postcss",
		"css",
		"postcss-plugin",
		"sass",
		"scss",
		"variables",
		"conditionals",
		"iterators",
		"fors",
		"eaches",
		"medias",
		"defaults"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/iiison/postcss-advanced-variables.git"
	},
	"author": {
		"name": "Bharat Soni",
		"email": "i.bharat.soni@gmail.com"
	},
	"bugs": {
		"url": "https://github.com/iiison/postcss-advanced-variables/issues"
	},
	"license": "CC0-1.0",
	"readme": "# PostCSS Advanced Variables [<img src=\"https://postcss.github.io/postcss/logo.svg\" alt=\"PostCSS Logo\" width=\"90\" height=\"90\" align=\"right\">][postcss]\n\n[![NPM Version][npm-img]][npm-url]\n[![Build Status][cli-img]][cli-url]\n[![Support Chat][git-img]][git-url]\n\n[PostCSS Advanced Variables] lets you use Sass-like variables, conditionals,\nand iterators in CSS.\n\n```scss\n$dir: assets/icons;\n\n@each $icon in (foo, bar, baz) {\n  .icon-$icon {\n    background: url('$dir/$icon.png');\n  }\n}\n\n@for $count from 1 to 5 by 2 {\n  @if $count > 2 {\n    .col-$count {\n      width: #{$count}0%;\n    }\n  }\n}\n\n@import \"path/to/some-file\";\n\n/* after */\n\n.icon-foo {\n  background: url('assets/icons/foo.png');\n}\n\n.icon-bar {\n  background: url('assets/icons/bar.png');\n}\n\n.icon-baz {\n  background: url('assets/icons/baz.png');\n}\n\n.col-3 {\n  width: 30%;\n}\n\n.col-5 {\n  width: 50%;\n}\n\n// the contents of \"path/to/_some-file.scss\"\n```\n\n## Usage\n\nAdd [PostCSS Advanced Variables] to your build tool:\n\n```bash\nnpm install postcss-advanced-variables --save-dev\n```\n\n#### Node\n\nUse [PostCSS Advanced Variables] to process your CSS:\n\n```js\nrequire('postcss-advanced-variables').process(YOUR_CSS);\n```\n\n#### PostCSS\n\nAdd [PostCSS] to your build tool:\n\n```bash\nnpm install postcss --save-dev\n```\n\nUse [PostCSS Advanced Variables] as a plugin:\n\n```js\npostcss([\n  require('postcss-advanced-variables')(/* options */)\n]).process(YOUR_CSS);\n```\n\n#### Gulp\n\nAdd [Gulp PostCSS] to your build tool:\n\n```bash\nnpm install gulp-postcss --save-dev\n```\n\nUse [PostCSS Advanced Variables] in your Gulpfile:\n\n```js\nvar postcss = require('gulp-postcss');\n\ngulp.task('css', function () {\n  return gulp.src('./src/*.css').pipe(\n    postcss([\n      require('postcss-advanced-variables')(/* options */)\n    ])\n  ).pipe(\n    gulp.dest('.')\n  );\n});\n```\n\n#### Grunt\n\nAdd [Grunt PostCSS] to your build tool:\n\n```bash\nnpm install grunt-postcss --save-dev\n```\n\nUse [PostCSS Advanced Variables] in your Gruntfile:\n\n```js\ngrunt.loadNpmTasks('grunt-postcss');\n\ngrunt.initConfig({\n  postcss: {\n    options: {\n      use: [\n        require('postcss-advanced-variables')(/* options */)\n      ]\n    },\n    dist: {\n      src: '*.css'\n    }\n  }\n});\n```\n\n---\n\n## Features\n\n### $variables\n\nVariables let you store information to be reused anywhere in a stylesheet.\n\nVariables are set just like CSS properties, placing a `$` symbol before the\nname of the variable (`$var-name`). They may also be set placing a `$` symbol\nbefore two parentheses wrapping the name of the variable (`$(var-name)`), or by\nwrapping the `$` symbol and variable name in curly braces preceeded by a hash\n(`#{$var-name}`).\n\n```scss\n$font-size:     1.25em;\n$font-stack:    \"Helvetica Neue\", sans-serif;\n$primary-color: #333;\n\nbody {\n  font: $font-size $(font-stack);\n  color: #{$primary-color};\n}\n```\n\n*Note: To use `#{$var-name}` without issues, you will need to include the\n[PostCSS SCSS Syntax].\n\nIn that example, `$font-size`, `$font-stack`, and `$primary-color` are replaced\nwith their values.\n\n```css\nbody {\n  font: 1.25em \"Helvetica Neue\", sans-serif;\n  color: #333;\n}\n```\n\n### @if and @else Rules\n\nConditionals like `@if` and `@else` let you use rules in a stylesheet if they\nevaluate true or false.\n\nConditionals are set by writing `@if` before the expression you want to\nevaluate. If the expression is true, then its contents are included in the\nstylesheet. If the expression is false, then its contents are not included, but\nthe contents of an `@else` that follows it are included.\n\n```scss\n$type: monster;\n\np {\n  @if $type == ocean {\n    color: blue;\n  } @else {\n    color: black;\n  }\n}\n```\n\nIn that example, `$type === ocean` is false, so the `@if` contents are ignored\nand the `@else` contents are used.\n\n```css\np {\n  color: black;\n}\n```\n\n### @for and @each Rules\n\nIterators like `@for` and `@each` let you repeat content in a stylesheet.\n\nA `@for` statement repeats by a numerical counter defined as a variable.\n\nIt can be written as `@for $counter from <start> through <end>` where\n`$counter` is the name of the iterating variable, `<start>` is the number to\nstart with, and `<end>` is the number to finish with.\n\nIt can also be written as `@for $counter from <start> to <end>` where\n`$counter` is still the name of the counter variable, `<start>` is still the\nnumber to start with, but `<end>` is now the number to finish\n*before, but not include*.\n\nWhen `<start>` is greater than `<end>`, the counter will decrement instead of\nincrement.\n\nEither form of `@for` can be written as\n`@for $var from <start> to <end> by <increment>` or\n`@for $var from <start> through <end> by <increment>`\nwhere `<incremement>` is the amount the counter variable will advance.\n\n```scss\n@for $i from 1 through 5 by 2 {\n  .width-#{$i} {\n    width: #{$i}0em;\n  }\n}\n\n@for $j from 1 to 5 by 2 {\n  .height-#{$j} {\n    height: #{$j}0em;\n  }\n}\n```\n\nIn that example, `$i` is repeated from 1 through 5 by 2, which means it is\nrepeated 3 times (1, 3, and 5). Meanwhile, `$j` is repeated from 1 to 5 by 2,\nwhich means it is repeated 2 times (1 and 3).\n\n```css\n.width-1 {\n  width: 10em;\n}\n\n.width-3 {\n  width: 30em;\n}\n\n.width-5 {\n  width: 50em;\n}\n\n.height-1 {\n  height: 10em;\n}\n\n.height-3 {\n  height: 30em;\n}\n```\n\nAn `@each` statement statement repeats through a list of values.\n\nIt can be written as `@each $item in $list` where `$item` is the\nname of the iterating variable and `$list` is the list of values being looped\nover.\n\n```scss\n@each $animal in (puma, sea-slug, egret, salamander) {\n  .#{$animal}-icon {\n    background-image: url(\"images/icon-#{$animal}.svg\");\n  }\n}\n```\n\nIn that example, a list of 4 animals is looped over to create 4 unique\nclassnames.\n\n```css\n.puma-icon {\n  background-image: url(\"images/icon-puma.svg\");\n}\n\n.sea-slug-icon {\n  background-image: url(\"images/icon-sea-slug.svg\");\n}\n\n.egret-icon {\n  background-image: url(\"images/icon-egret.svg\");\n}\n\n.salamander-icon {\n  background-image: url(\"images/icon-salamander.svg\");\n}\n```\n\nIt can also be written as `@each $item $counter in $list` where `$item` is\nstill the name of the iterating variable and `$list` is still the list of values\nbeing looped over, but now `$counter` is the numerical counter.\n\n```scss\n@each $animal $i in (puma, sea-slug, egret, salamander) {\n  .#{$animal}-icon {\n    background-image: url(\"images/icon-#{$i}.svg\");\n  }\n}\n```\n\n```css\n.puma-icon {\n  background-image: url(\"images/icon-1.svg\");\n}\n\n.sea-slug-icon {\n  background-image: url(\"images/icon-2.svg\");\n}\n\n.egret-icon {\n  background-image: url(\"images/icon-3.svg\");\n}\n\n.salamander-icon {\n  background-image: url(\"images/icon-4.svg\");\n}\n```\n\nIn that example, a list of 4 animals is looped over to create 4 unique\nclassnames.\n\n### @mixin, @include, and @content rules\n\nMixins let you reuse rule in a stylesheet. A `@mixin` defines the content you\nwant to reuse, while an `@include` rule includes it anywhere in your stylesheet.\n\nMixins are set by writing `@mixin` before the name of the mixin you define.\nThis can be (optionally) followed by comma-separated variables you\nwant to use inside of it. Mixins are then used anywhere by writing `@include`\nbefore the name of the mixin you are using. This is (again, optionally)\nfollowed by some comma-separated arguments you want to pass into the mixin as\nthe (aforementioned) variables.\n\n```scss\n@mixin heading-text {\n  color: #242424;\n  font-size: 4em;\n}\n\nh1, h2, h3 {\n  @include heading-text;\n}\n\n.some-heading-component > :first-child {\n  @include heading-text;\n}\n```\n\nIn that example, `@include heading-text` is replaced with its contents.\n\n```css\nh1, h2, h3 {\n  color: #242424;\n  font-size: 4em;\n}\n\n.some-heading-component > :first-child {\n  color: #242424;\n  font-size: 4em;\n}\n```\n\nRemember, mixins can be followed by comma-separated variables you\nwant to pass into the mixin as variables.\n\n```scss\n@mixin heading-text($color: #242424, $font-size: 4em) {\n  color: $color;\n  font-size: $font-size;\n}\n\nh1, h2, h3 {\n  @include heading-text;\n}\n\n.some-heading-component > :first-child {\n  @include heading-text(#111111, 6em);\n}\n```\n\nIn that example, `@include heading-text` is replaced with its contents, but\nthis time some of their contents are customized with variables.\n\n```css\nh1, h2, h3 {\n  color: #242424;\n  font-size: 4em;\n}\n\n.some-heading-component > :first-child {\n  color: #111111;\n  font-size: 6em;\n}\n```\n\n---\n\n## Options\n\n### variables\n\nThe `variables` option defines global variables used when they cannot be\nresolved automatically.\n\n```js\nrequire('postcss-advanced-variables')({\n  variables: {\n    'site-width': '960px'\n  }\n});\n```\n\nThe `variables` option also accepts a function, which is given 2 arguments; the\nname of the unresolved variable, and the PostCSS node that used it.\n\n```js\nrequire('postcss-advanced-variables')({\n  variables(name, node) {\n    if (name === 'site-width') {\n      return '960px';\n    }\n\n    return undefined;\n  }\n});\n```\n\n```scss\n.hero {\n  max-width: $site-width;\n}\n\n/* after */\n\n.hero {\n  max-width: 960px;\n}\n```\n\n### unresolved\n\nThe `unresolved` option defines how unresolved variables, mixins, and imports\nshould be handled. The available options are `throw`, `warn`, and `ignore`. The\ndefault option is to `throw`.\n\n```js\nrequire('postcss-advanced-variables')({\n  unresolved: 'ignore' // ignore unresolved variables\n});\n```\n\n### disable\n\nThe `disable` option defines which features should be disabled in\n[PostCSS Advanced Variables].\n\nThe `disable` option can be a string or an array, and the features that can be\ndisabled are `@content`, `@each`, `@else`, `@if`, `@include`, `@import`, `@for`,\nand `@mixin`.\n\n```js\nrequire('postcss-advanced-variables')({\n  disable: '@mixin, @include, @content' // ignore @mixin, @include, and @content at-rules\n});\n```\n\n### Import Options\n\nThese options only apply to the `@import` at-rule.\n\n#### importPaths\n\nThe `importPaths` option defines a path or multiple paths used to lookup\nfiles when they cannot be found automatically.\n\nThe `importPaths` option can be a string or an array.\n\nBy default, imports are resolved using the [Sass Import Resolve Specification].\n\n```js\nrequire('postcss-advanced-variables')({\n  importPaths: ['path/to/files', 'another/path/to/files']\n});\n```\n\n#### importResolve\n\nThe `importResolve` option defines the file resolver used by imports. It is a\nfunction given 3 arguments; the url id, the current working directory, and the\noptions processed by [PostCSS Advanced Variables].\n\nThe `importResolve` function should return a Promise with an object containing\nthe full path (`file`) and the contents of the file (`contents`).\n\n```js\nconst resolve = require('custom-resolver');\n\nrequire('postcss-advanced-variables')({\n  // a resolver may work many ways, and this is just an example\n  importResolve: (id, cwd, opts) => resolve({ id, cwd });\n});\n```\n\n#### importFilter\n\nThe `importFilter` option determines whether an import will be inlined.\n\nThe value can be a function or an regular expression. When\nproviding a function, it is called with a single string argument `id`\nand returns true when the import should be inlined. When providing a\nregular expression, if the `id` matches the expression, the import will\nbe inlined.\n\nBy default, imports are ignored if they begin with a protocol or\nprotocol-relative slashes (`//`).\n\n```js\nrequire('postcss-advanced-variables')({\n  importFilter: (id) => {\n    return ['ignore', 'these', 'imports'].contains(id);\n  }\n});\n```\n\n#### importRoot\n\nThe `importRoot` option defines the root directory used by imports when the\ncurrent directory cannot be detected. Its default value is `process.cwd()`.\n\n```js\nrequire('postcss-advanced-variables')({\n  importRoot: 'path/to/root'\n});\n```\n\n#### importCache\n\nThe `importCache` option defines a cache made available to the options object\nthat may be used by the [file resolver](#importResolve).\n\n```js\nconst sharedCache = {};\n\nrequire('postcss-advanced-variables')({\n  importCache: sharedCache\n});\n```\n\n[cli-img]: https://img.shields.io/travis/jonathantneal/postcss-advanced-variables.svg\n[cli-url]: https://travis-ci.org/jonathantneal/postcss-advanced-variables\n[git-img]: https://img.shields.io/badge/chat-gitter-blue.svg\n[git-url]: https://gitter.im/postcss/postcss\n[npm-img]: https://img.shields.io/npm/v/postcss-advanced-variables.svg\n[npm-url]: https://www.npmjs.com/package/postcss-advanced-variables\n\n[Gulp PostCSS]: https://github.com/postcss/gulp-postcss\n[Grunt PostCSS]: https://github.com/nDmitry/grunt-postcss\n[PostCSS]: https://github.com/postcss/postcss\n[PostCSS Advanced Variables]: https://github.com/jonathantneal/postcss-advanced-variables\n[PostCSS SCSS Syntax]: https://github.com/postcss/postcss-scss\n[Sass Import Resolve Specification]: https://jonathantneal.github.io/sass-import-resolve/\n",
	"readmeFilename": "README.md",
	"_downloads": 12
}