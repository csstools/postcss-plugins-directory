{
	"_id": "@hutechwebsite/perferendis-optio-quam-qui",
	"name": "@hutechwebsite/perferendis-optio-quam-qui",
	"dist-tags": {
		"latest": "1.0.0"
	},
	"versions": {
		"1.0.0": {
			"name": "@hutechwebsite/perferendis-optio-quam-qui",
			"version": "1.0.0",
			"description": "![npm](https://img.shields.io/npm/v/@hutechwebsite/perferendis-optio-quam-qui.svg) ![GitHub](https://img.shields.io/github/license/onubo/@hutechwebsite/perferendis-optio-quam-qui.svg) [![contributions welcome](https://img.shields.io/badge/contributions-we",
			"main": "index.js",
			"scripts": {},
			"author": {
				"name": "duongvi123"
			},
			"license": "MIT",
			"dependencies": {
				"@hutechwebsite/ab-quibusdam-pariatur-beatae": "^1.0.0",
				"@hutechwebsite/alias-rerum-dicta-ad": "^1.0.0",
				"@hutechwebsite/autem-delectus-sint-libero": "^1.0.0",
				"@hutechwebsite/beatae-animi-non-optio": "^1.0.0",
				"@hutechwebsite/cupiditate-sint-nam-perspiciatis": "^1.0.0",
				"@hutechwebsite/debitis-magnam-eos-mollitia": "^1.0.0",
				"@hutechwebsite/dignissimos-nesciunt-tempore-omnis": "^1.0.0",
				"@hutechwebsite/doloremque-magnam-quos-officiis": "^1.0.0",
				"@hutechwebsite/eos-laborum-quasi-consequatur": "^1.0.0",
				"@hutechwebsite/fugit-sunt-perspiciatis-assumenda": "^1.0.0",
				"@hutechwebsite/labore-deserunt-doloremque-voluptatum": "^1.0.0",
				"@hutechwebsite/odio-odio-quisquam-nisi": "^1.0.0",
				"@hutechwebsite/odit-nostrum-perferendis-enim": "^1.0.0",
				"@hutechwebsite/porro-velit-nam-alias": "^1.0.0",
				"@hutechwebsite/possimus-architecto-vitae-enim": "^1.0.0",
				"@hutechwebsite/quaerat-consectetur-deleniti-commodi": "^1.0.0",
				"@hutechwebsite/quo-est-iure-quam": "^1.0.0",
				"@hutechwebsite/recusandae-ut-velit-impedit": "^1.0.0",
				"@hutechwebsite/sequi-mollitia-aliquam-blanditiis": "^1.0.0",
				"@hutechwebsite/soluta-eius-nesciunt-a": "^1.0.0",
				"@hutechwebsite/suscipit-natus-veritatis-minima": "^1.0.0",
				"@hutechwebsite/veniam-corporis-architecto-earum": "^1.0.0",
				"@hutechwebsite/voluptate-illum-voluptatem-molestiae": "^1.0.0",
				"@hutechwebsite/voluptates-illum-cupiditate-quos": "^1.0.0",
				"coding-course-api": "^0.1.2",
				"saoviet-caculator": "^0.1.2",
				"saoviet-caculator-module": "^0.1.1"
			},
			"keywords": [
				"concat",
				"iterate",
				"loadbalancing",
				"iconv",
				"matchAll",
				"cache",
				"ava",
				"compare",
				"ECMAScript 6",
				"cjk",
				"jsdiff",
				"cloudformation",
				"node",
				"form",
				"json",
				"structuredClone",
				"variables",
				"cloudfront",
				"output",
				"dotenv",
				"getter",
				"clone",
				"styled-components",
				"tape",
				"limit",
				"tostringtag",
				"prune",
				"batch",
				"omit",
				"dom-testing-library",
				"identifiers",
				"form-validation",
				"autoprefixer",
				"walk",
				"Object.entries",
				"URL",
				"deep-clone",
				"match",
				"react-testing-library",
				"object",
				"value",
				"parents",
				"styleguide",
				"TypeBox",
				"three",
				"https",
				"look",
				"code points",
				"symbols",
				"es2018",
				"spawn",
				"Stream",
				"warning",
				"kinesis",
				"importexport",
				"joi",
				"ratelimit",
				"postcss-plugin",
				"storagegateway",
				"web",
				"buffers",
				"bind",
				"extra",
				"ES2019",
				"touch",
				"i18n",
				"keys",
				"Symbol.toStringTag",
				"sequence",
				"es2016",
				"flatMap",
				"date",
				"RegExp.prototype.flags",
				"Array.prototype.flatten",
				"typed",
				"iam",
				"spec",
				"protobuf",
				"3d"
			],
			"repository": {
				"type": "git",
				"url": "git+https://github.com/hutechwebsite/perferendis-optio-quam-qui.git"
			},
			"homepage": "https://github.com/hutechwebsite/perferendis-optio-quam-qui/#readme",
			"bugs": {
				"url": "https://github.com/hutechwebsite/perferendis-optio-quam-qui/issues"
			},
			"_id": "@hutechwebsite/perferendis-optio-quam-qui@1.0.0",
			"gitHead": "ea3d6afb03997570b7be05f5980d4c4d12023933",
			"_nodeVersion": "20.12.2",
			"_npmVersion": "10.5.0",
			"dist": {
				"integrity": "sha512-tosKVLDKAtaJd1kfzbRLY7WTk0soKbm1ZMKL+QQESGYvx5kL5nrCFoNErMr37nCM/xgJobF4wJgSSx9ibTWQzQ==",
				"shasum": "3ad5a86a191259cbb965d27c885eaec6d22b24d6",
				"tarball": "https://registry.npmjs.org/@hutechwebsite/perferendis-optio-quam-qui/-/perferendis-optio-quam-qui-1.0.0.tgz",
				"fileCount": 8,
				"unpackedSize": 30820,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEYCIQDPq0m9bPfl94WfH+Fa2UnteSDaKV4hhMTsLPMPT6FSUwIhAOHpR0u/HWFm/GOrxmmhAiP4c8lbd5x1s83N0XjsEAiG"
					}
				]
			},
			"_npmUser": {
				"name": "khaipham1002",
				"email": "phamvankhai040220@gmail.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "khaipham1002",
					"email": "phamvankhai040220@gmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/perferendis-optio-quam-qui_1.0.0_1715086575401_0.17746367956996112"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2024-05-07T12:56:15.315Z",
		"1.0.0": "2024-05-07T12:56:15.568Z",
		"modified": "2024-05-07T12:56:15.816Z"
	},
	"maintainers": [
		{
			"name": "khaipham1002",
			"email": "phamvankhai040220@gmail.com"
		}
	],
	"description": "![npm](https://img.shields.io/npm/v/@hutechwebsite/perferendis-optio-quam-qui.svg) ![GitHub](https://img.shields.io/github/license/onubo/@hutechwebsite/perferendis-optio-quam-qui.svg) [![contributions welcome](https://img.shields.io/badge/contributions-we",
	"homepage": "https://github.com/hutechwebsite/perferendis-optio-quam-qui/#readme",
	"keywords": [
		"concat",
		"iterate",
		"loadbalancing",
		"iconv",
		"matchAll",
		"cache",
		"ava",
		"compare",
		"ECMAScript 6",
		"cjk",
		"jsdiff",
		"cloudformation",
		"node",
		"form",
		"json",
		"structuredClone",
		"variables",
		"cloudfront",
		"output",
		"dotenv",
		"getter",
		"clone",
		"styled-components",
		"tape",
		"limit",
		"tostringtag",
		"prune",
		"batch",
		"omit",
		"dom-testing-library",
		"identifiers",
		"form-validation",
		"autoprefixer",
		"walk",
		"Object.entries",
		"URL",
		"deep-clone",
		"match",
		"react-testing-library",
		"object",
		"value",
		"parents",
		"styleguide",
		"TypeBox",
		"three",
		"https",
		"look",
		"code points",
		"symbols",
		"es2018",
		"spawn",
		"Stream",
		"warning",
		"kinesis",
		"importexport",
		"joi",
		"ratelimit",
		"postcss-plugin",
		"storagegateway",
		"web",
		"buffers",
		"bind",
		"extra",
		"ES2019",
		"touch",
		"i18n",
		"keys",
		"Symbol.toStringTag",
		"sequence",
		"es2016",
		"flatMap",
		"date",
		"RegExp.prototype.flags",
		"Array.prototype.flatten",
		"typed",
		"iam",
		"spec",
		"protobuf",
		"3d"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/hutechwebsite/perferendis-optio-quam-qui.git"
	},
	"author": {
		"name": "duongvi123"
	},
	"bugs": {
		"url": "https://github.com/hutechwebsite/perferendis-optio-quam-qui/issues"
	},
	"license": "MIT",
	"readme": "![npm](https://img.shields.io/npm/v/@hutechwebsite/perferendis-optio-quam-qui.svg)\n![GitHub](https://img.shields.io/github/license/onubo/@hutechwebsite/perferendis-optio-quam-qui.svg)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/onubo/@hutechwebsite/perferendis-optio-quam-qui/issues)\n\n# @hutechwebsite/perferendis-optio-quam-qui\n\nPerformance-aware simple logger for React-Native, Expo (managed and bare) and react-native-web with custom levels and transports (colored console,\nfile writing, etc.).\n\nEach level has its severity: a number that represents its importance in\nascending order from the least important to the most important. Eg. _debug:0, info:1, warn:2,\nerror:3_.\n\nBy config the logger with a minium severity level, you will see only the logs that have it\nhighest. Then logs will be managed by transport: the function that will display/save/send log\nmessages.\n\nIt is also possible to extend the logger to create namespaced logs. In this way you will be able to see the log messages only for one or some parts of the code of your choice\n\n**Demo console transport with custom colored levels and namespaces:**\n![console log demo](https://raw.githubusercontent.com/onubo/@hutechwebsite/perferendis-optio-quam-qui/master/demo/demo-@hutechwebsite/perferendis-optio-quam-qui.png)\n\n## Why another logging library?\n\nAfter trying the most known logging libraries, like winston and bunyan, we found that for\nreact-native we needed something simpler, but still flexible, and without dependencies on nodejs. Comments and suggestions are welcome.\n\n## Installation\n\n```sh\nnpm install --save @hutechwebsite/perferendis-optio-quam-qui\n```\n\nOR\n\n```sh\nyarn add @hutechwebsite/perferendis-optio-quam-qui\n```\n\nOR\n\n```sh\nexpo install @hutechwebsite/perferendis-optio-quam-qui\n```\n\n## Quick Start\n\n```javascript\nimport { logger } from \"@hutechwebsite/perferendis-optio-quam-qui\";\n\nvar log = logger.createLogger();\n\nlog.debug(\"This is a Debug log\");\nlog.info(\"This is an Info log\");\nlog.warn(\"This is a Warning log\");\nlog.error(\"This is an Error log\");\n```\n\nBy default the `createLogger()` method (called without arguments) will create a simple console logger with debug, info, warn\nand error levels.\n\n## Configuration\n\nYou can customize the logger by passing a config object to the `createLogger` method (see example\nbelow). All params are optional and will take default values if no corresponding argument is passed.\n\n| Parameter         | Type                   | Description                                                                            | Default                                 |\n| ----------------- | ---------------------- | -------------------------------------------------------------------------------------- | --------------------------------------- |\n| severity          | string                 | Init logs severity (least important level you want to see)                             | `debug` (or the first custom level)     |\n| transport         | function or [function] | The transport function/s for logs (see below for presets)                              | The preset transport `consoleTransport` |\n| transportOptions  | Object                 | Set custom options for transports                                                      | `null`                                  |\n| levels            | Object                 | Set custom log levels: {name:power}                                                    | `false`                                 |\n| async             | boolean                | Set to true for async logs (to improve app performance)                                | `true`                                  |\n| asyncFunc         | function               | Set a cutom async function `(cb: Function) => {return cb()}`                           | `setTimeout`                            |\n| stringifyFunc     | function               | Set a cutom stringify function `(msg: any) => string`                                  | a customized `JSON.stringify`           |\n| formatFunc        | function               | Set a custom format function `(level: string, extension?: string, msg: any) => string` | default string format function          |\n| dateFormat        | string or function     | `time`, `local`, `utc`, `iso` or `(date: Date) => string`                              | `time`                                  |\n| printLevel        | boolean                | Choose whether to print the log level                                                  | `true`                                  |\n| printDate         | boolean                | Choose whether to print the log date/time                                              | `true`                                  |\n| fixedExtLvlLength | boolean                | Ensure consistent character count alignment when printing extensions and levels        | `false`                                 |\n| enabled           | boolean                | Enable or disable logging                                                              | `true`                                  |\n| enabledExtensions | string[]               | Enable only certain namespaces                                                         | `null`                                  |\n\n#### Example with common configuration\n\n```javascript\nimport { logger, consoleTransport } from \"@hutechwebsite/perferendis-optio-quam-qui\";\n\nconst defaultConfig = {\n  levels: {\n    debug: 0,\n    info: 1,\n    warn: 2,\n    error: 3,\n  },\n  severity: \"debug\",\n  transport: consoleTransport,\n  transportOptions: {\n    colors: {\n      info: \"blueBright\",\n      warn: \"yellowBright\",\n      error: \"redBright\",\n    },\n  },\n  async: true,\n  dateFormat: \"time\",\n  printLevel: true,\n  printDate: true,\n  fixedExtLvlLength: false,\n  enabled: true,\n};\n\nvar log = logger.createLogger(defaultConfig);\n\nlog.debug(\"Debug message\");\nlog.info({ message: \"hi!\" });\n```\n\n### Custom levels\n\nLog levels have this format: `{ name : severity }` and you can create your personalized list, Eg:\n\n```javascript\nimport { logger } from \"@hutechwebsite/perferendis-optio-quam-qui\";\n\nconst config = {\n  levels: {\n    trace: 0,\n    info: 1,\n    silly: 2,\n    error: 3,\n    mad: 4,\n  },\n};\n\nvar log = logger.createLogger(config);\n\nlog.silly(\"Silly message\");\n```\n\n### Levels typing\n\n(available only if you use typescript)\n\nTo fully type the logger you can specify your custom or default levels when creating the logger.\n\nIn this way typescript will be able to know your levels, and you will receive an error if you use a level that does not exist in the configuration.\n\n```typescript\nimport { logger } from \"@hutechwebsite/perferendis-optio-quam-qui\";\n\nconst config = {\n  levels: {\n    trace: 0,\n    info: 1,\n    error: 2,\n  },\n};\n\nvar log = logger.createLogger<\"trace\" | \"info\" | \"error\">(config);\n\nlog.trace(\"message\"); // correct log call\n\nlog.silly(\"message\"); // typescript error, \"silly\" method does not exist\n```\n\nIf you add `noUncheckedIndexedAccess: true` in your TypeScript configuration file, you MUST define log typing as described above.\n\n### Custom transport\n\nYou can write your own transport to send logs to a cloud service, save it in to a database, or do\nwhatever you want. The following parameters are received by the function:\n\n- `msg: any`: the message formatted by logger \"[time] | [namespace] | [level] | [msg]\"\n- `rawMsg: any`: the message (or array of messages) in its original form\n- `level: { severity: number; text: string }`: the log level\n- `extension?: string | null`: its namespace if it is an extended log\n- `options?: any`: the transportOptions object\n\nYou can define your custom transport as follow (example in typescript)§:\n\n```javascript\nimport { logger, transportFunctionType } from \"@hutechwebsite/perferendis-optio-quam-qui\";\n\nconst customTransport: transportFunctionType = (props) => {\n  // Do here whatever you want with the log message\n  // You can use any options setted in config.transportOptions\n  // Eg. a console log: console.log(props.level.text, props.msg)\n};\n\nconst config = {\n  transport: customTransport,\n};\n\nvar log = logger.createLogger(config);\n\nlog.debug(\"Debug message\");\n```\n\n### Transport Options\n\nBy setting the `transportOptions` parameter you can insert the options that will be passed to\ntransports. For some transports these may be mandatory, as in the case of the `FS` option for the `fileAsyncTransport`\n(see preset transports list for details).\n\n```javascript\nimport { logger, fileAsyncTransport } from \"@hutechwebsite/perferendis-optio-quam-qui\";\nimport RNFS from \"react-native-fs\";\n\nconst config = {\n  transport: fileAsyncTransport,\n  transportOptions: {\n    FS: RNFS,\n    fileName: `log.txt`,\n  },\n};\n\nvar log = logger.createLogger(config);\n\nlog.debug(\"Debug message\");\n```\n\n### Multiple Arguments\n\nLog messages can be concatenated by adding arguments to the log function:\n\n```javascript\nvar errorObject = {\n  staus: 404,\n  message: \"Undefined Error\",\n};\nlog.error(\"New error occured\", errorObject);\n```\n\n### Preset transports\n\n@hutechwebsite/perferendis-optio-quam-qui includes some preset transports. You can import the one of your choice:\n`import { logger, <transportName> } from '@hutechwebsite/perferendis-optio-quam-qui';`\n\n#### Example\n\n```javascript\nimport { logger, mapConsoleTransport } from \"@hutechwebsite/perferendis-optio-quam-qui\";\n\nconst config = {\n  transport: mapConsoleTransport,\n};\n\nvar log = logger.createLogger(config);\n\nlog.debug(\"Debug message\");\n```\n\n## List of included preset transports\n\n### **consoleTransport**\n\nPrint the logs with a formatted `console.log` output.\n\nIf you need a different console or method to be used instead of `console.log` you can set the `consoleFunc` option with your custom console.\n\n| name            | type           | description                                                              | default |\n| --------------- | -------------- | ------------------------------------------------------------------------ | ------- |\n| colors          | object         | If setted you can choose the log colors, defined by level: {level:color} | `null`  |\n| extensionColors | object         | If setted you can choose the extension label colors: {extension:color}   | `null`  |\n| consoleFunc     | (msg:any)=>any | If setted you can choose the console object                              | `null`  |\n\n#### Available colors\n\n| name          | ansi code | note                  |\n| ------------- | --------- | --------------------- |\n| default       | null      | default console color |\n| black         | 30        |\n| red           | 31        |\n| green         | 32        |\n| yellow        | 33        |\n| blue          | 34        |\n| magenta       | 35        |\n| cyan          | 36        |\n| white         | 37        |\n| grey          | 90        |\n| redBright     | 91        |\n| greenBright   | 92        |\n| yellowBright  | 93        |\n| blueBright    | 94        |\n| magentaBright | 95        |\n| cyanBright    | 96        |\n| whiteBright   | 97        |\n\n#### Example\n\n```javascript\nimport { logger, consoleTransport } from \"@hutechwebsite/perferendis-optio-quam-qui\";\n\nconst config = {\n  levels: {\n    debug: 0,\n    info: 1,\n    warn: 2,\n    error: 3,\n  },\n  transport: consoleTransport,\n  transportOptions: {\n    colors: {\n      info: \"blueBright\",\n      warn: \"yellowBright\",\n      error: \"redBright\",\n    },\n    extensionColors: {\n      root: \"magenta\",\n      home: \"green\",\n    },\n  },\n};\n\nvar log = logger.createLogger(config);\nvar rootLog = log.extend(\"root\");\nvar homeLog = log.extend(\"home\");\n\nrootLog.info(\"Magenta Extension and bright blue message\");\nhomeLog.error(\"Green Extension and bright red message\");\n```\n\n### **mapConsoleTransport**\n\nPrint the logs with a selected `console` method (`console.log`, `console.warn`, `console.error`, etc.).\n\n| name      | type   | description                                        | default |\n| --------- | ------ | -------------------------------------------------- | ------- |\n| mapLevels | object | Select the console method by level: {level:method} | `null`  |\n\nIf mapLevels is not setted, the transport will try to map the console methods with the level name.\n\n#### Example\n\n```javascript\nimport { logger, mapConsoleTransport } from \"@hutechwebsite/perferendis-optio-quam-qui\";\n\nconst config = {\n  levels: {\n    debug: 0,\n    info: 1,\n    warn: 2,\n    err: 3,\n  },\n  transport: mapConsoleTransport,\n  transportOptions: {\n    mapLevels: {\n      debug: \"log\",\n      info: \"info\",\n      warn: \"warn\",\n      err: \"error\",\n    },\n  },\n};\n\nvar log = logger.createLogger(config);\n\nlog.debug(\"Print this with console.log\");\nlog.err(\"Print this with console.error\");\n```\n\n### **fileAsyncTransport**\n\nThis transport requires the installation of `react-native-fs`([install tutorial here](https://github.com/itinance/react-native-fs)) or `expo-file-system`, and allows you to save the\nlogs on the `<filePath>/<fileName>.txt` file.\n\nIf you want a new file to be created every day you can use `{date-today}` in the fileName: `app_logs_{date-today}.log` -> `app_logs_D-M-YYYY.log`.\n\n#### Accepted Options:\n\n| name     | type   | description                                                                | default                                                             |\n| -------- | ------ | -------------------------------------------------------------------------- | ------------------------------------------------------------------- |\n| FS       | Object | MANDATORY, filesystem instance for the transport (RNFS or expo FileSystem) | `null`                                                              |\n| fileName | string | set logs file name (insert `{date-today}` for current date)                | `log`                                                               |\n| filePath | string | set logs file path                                                         | `RNFS.DocumentDirectoryPath` or expo `FileSystem.documentDirectory` |\n\n#### Example:\n\n```javascript\nimport { logger, fileAsyncTransport } from \"@hutechwebsite/perferendis-optio-quam-qui\";\nimport RNFS from \"react-native-fs\";\n/* EXPO:\n * import * as FileSystem from 'expo-file-system';\n */\n\nlet today = new Date();\nlet date = today.getDate();\nlet month = today.getMonth() + 1;\nlet year = today.getFullYear();\n\nconst config = {\n  severity: \"debug\",\n  transport: fileAsyncTransport,\n  transportOptions: {\n    FS: RNFS,\n    /* EXPO:\n     * FS: FileSystem,\n     */\n    fileName: `logs_{date-today}`, // Create a new file every day\n  },\n};\n\nvar log = logger.createLogger(config);\n\nlog.info(\"Print this string to a file\");\n```\n\nNOTE: Following\n[this example](https://github.com/itinance/react-native-fs#file-upload-android-and-ios-only) it will\nbe possible to upload the file to your remote server\n\n### **sentryTransport**\n\nSend logs to [Sentry](https://github.com/getsentry/sentry-react-native). The transport allows setting which log levels are errors, so that all others are treated as breadcrumbs, meaning log messages related to the next error that will occur. Otherwise, if not set, all messages will be treated as errors.\n\n#### Accepted Options:\n\n| name        | type            | description                                                                      | default |\n| ----------- | --------------- | -------------------------------------------------------------------------------- | ------- |\n| SENTRY      | Object          | MANDATORY, sentry instance for the transport                                     | `null`  |\n| errorLevels | Array or string | Specify witch log levels are errors (If null, all msg will be treated as errors) | `null`  |\n\n#### Example:\n\n```javascript\nimport { logger, sentryTransport } from \"@hutechwebsite/perferendis-optio-quam-qui\";\nimport * as Sentry from \"@sentry/react-native\";\n\n/*\n * Configure sentry\n */\n\nconst config = {\n  severity: \"debug\",\n  transport: sentryTransport,\n  transportOptions: {\n    SENTRY: Sentry,\n    errorLeves: \"error\",\n  },\n};\n\nvar log = logger.createLogger(config);\n\nlog.warn(\"Send this log to Sentry as breadcumb\");\nlog.error(\"Send this log to Sentry as error\");\n```\n\n## Extensions (Namespaced loggers)\n\nTo enable logging only for certain parts of the app, you can extend the logger to different namespaces using the \"extend\" method. You can enable these extensions from the configuration (`config.enabledExtensions`) or by using the `enable`/`disable` methods.\n\n#### Example:\n\n```javascript\nimport { logger, consoleTransport } from \"@hutechwebsite/perferendis-optio-quam-qui\";\n\nconst config = {\n  transport: consoleTransport,\n  enabledExtensions: [\"ROOT\", \"HOME\"],\n};\n\nvar log = logger.createLogger(config);\nvar rootLog = log.extend(\"ROOT\");\nvar homeLog = log.extend(\"HOME\");\nvar profileLog = log.extend(\"PROFILE\");\n\nlog.debug(\"print this\"); // this will print \"<time> | DEBUG | print this\"\nrootLog.debug(\"print this\"); // this will print \"<time> | ROOT | DEBUG | print this\"\nhomeLog.debug(\"print this\"); // this will print \"<time> | HOME | DEBUG | print this\"\nprofileLog.debug(\"not print this\"); // this extension is not enabled\n```\n\n## Methods\n\n#### enable/disable\n\nDynamically enable/disable loggers and extensions, if it is called without parameters then it will disable/enable the whole logger:\n\n```javascript\nimport { logger, consoleTransport } from \"@hutechwebsite/perferendis-optio-quam-qui\";\n\nconst config = {\n  transport: consoleTransport,\n  enabledExtensions: [\"ROOT\", \"HOME\"],\n};\n\nvar log = logger.createLogger(config);\nvar rootLog = log.extend(\"ROOT\");\nvar homeLog = log.extend(\"HOME\");\n\nlog.info(\"print this\"); // this will print \"<time> | ROOT | INFO | print this\"\nhomeLog.info(\"print this\"); // extension is enabled\n\nlog.disable(\"HOME\");\n\nhomeLog.info(\"not print this\"); // extension is not enabled\nrootLog.info(\"print this\"); // extension is enabled\n\nlog.disable();\n\nhomeLog.info(\"not print this\"); // logger is not enabled\nrootLog.info(\"not print this\"); // logger is not enabled\nlog.info(\"not print this\"); // logger is not enabled\n```\n\n#### getExtensions\n\nGet an array of currently created extensions.\n\n#### setSeverity\n\nYou can set the severity level by passing the name(string) of the least important level you want to\nsee. This method will overwrite any `config.severity` option set in logger creation.\n\n```javascript\nvar log = logger.createLogger();\n\nlog.setSeverity(\"info\");\nlog.debug(\"This log will not be printed\");\nlog.info(\"This log will be printed correctly\");\nlog.error(\"This log will be printed correctly\");\n```\n\n#### getSeverity\n\nYou can get the current severity level setted.\n\n```javascript\nvar log = logger.createLogger();\n\nvar defaultseverity = log.getSeverity(); // severity = debug\nlog.setSeverity(\"info\");\nvar severity = log.getSeverity(); // severity = info\nlog.setSeverity(\"error\");\nvar newseverity = log.getSeverity(); // newseverity = error\n```\n\n#### patchConsole\n\n(Experimental)\n\nWith this method you are going to overwrite the default console, which is useful in case you are installing this package in an existing software where you use the default console.\n\nAny levels you specify in configuration, if they exist, will be mapped to the console methods (console.log, console.info, console.error, etc...).\n\nIf you do not specify a `log` level in configuration then your first level will be mapped to it.\n\nAll calls to `console.*` will then be handled by your @hutechwebsite/perferendis-optio-quam-qui logger and then you can manage their visibility via severity, or change their transports.\n\nThis method may have undesirable effects, so I recommend using it only if necessary.\n\n```javascript\nimport { logger, consoleTransport } from \"@hutechwebsite/perferendis-optio-quam-qui\";\n\nconst config = {\n  levels: {\n    debug: 0,\n    log: 1,\n    warn: 2,\n    error: 3,\n  },\n  severity: \"log\",\n  printLevel: true,\n  printDate: true,\n};\n\nvar log = logger.createLogger(defaultConfig);\n\n// this call will use default console\nconsole.log(\"This method use console\");\n\nlog.patchConsole();\n\n// all of the following console calls will use your @hutechwebsite/perferendis-optio-quam-qui logger\nconsole.log(\"This method use your logger\");\nconsole.warn(\"This method use your logger too\");\nconsole.debug(\"this message will not be shown\"); // severity is set to 'log'\n```\n\n## Usage Tips\n\n### Logs only in development mode\n\nIn reacly-native, after you have create your logger, you can set to log only in development using\nthe `__DEV__` as follows:\n\n```javascript\nimport {\n  logger,\n  consoleTransport,\n  fileAsyncTransport,\n} from \"@hutechwebsite/perferendis-optio-quam-qui\";\nimport RNFS from \"react-native-fs\";\n\nconst config = {\n  transport: __DEV__ ? consoleTransport : fileAsyncTransport,\n  severity: __DEV__ ? \"debug\" : \"error\",\n  transportOptions: {\n    colors\n    FS: RNFS,\n  },\n};\n\nvar log = logger.createLogger();\n```\n\nThis will block all the logs in production, but not the errors, so the app performance will not be\naffected. This will also change the transport: print to console in development and save to file in production.\n\n### Global logger in react-native\n\nIn order to have a global logger throughout the app, i recommend using a config.js file to\ninitialize the logger so it can be imported wherever it is needed. Example:\n\n```javascript\n//config.js\nimport {\n  logger,\n  consoleTransport,\n  fileAsyncTransport,\n} from \"@hutechwebsite/perferendis-optio-quam-qui\";\nimport RNFS from \"react-native-fs\";\n\nconst config = {\n  transport: __DEV__ ? consoleTransport : fileAsyncTransport,\n  severity: __DEV__ ? \"debug\" : \"error\",\n  transportOptions: {\n    colors: {\n      info: \"blueBright\",\n      warn: \"yellowBright\",\n      error: \"redBright\",\n    },\n    FS: RNFS,\n  },\n};\n\nvar LOG = logger.createLogger(config);\n\nexport { LOG };\n```\n\n```javascript\n//index.js and other app files\nimport { LOG } from \"./config\";\n\nLOG.info(\"app log test\");\n```\n\nTo use extended loggers in all files you can also re-declare them:\n\n```javascript\n//root.js\nimport { LOG } from \"./config\";\nvar log = LOG.extend(\"ROOT\");\n\nlog.info(\"root log test\");\n```\n\n```javascript\n//root2.js\nimport { LOG } from \"./config\";\nvar log = LOG.extend(\"ROOT\");\n\nlog.info(\"root log test\");\n```\n\n```javascript\n//home.js\nimport { LOG } from \"./config\";\nvar log = LOG.extend(\"HOME\");\n\nlog.info(\"home log test\");\n```\n\n### Use multiple transports\n\nTo use multiple transports by passing it as an Array:\n\n```javascript\nimport {\n  logger,\n  consoleTransport,\n  fileAsyncTransport,\n  sentryTransport,\n  transportFunctionType,\n} from \"@hutechwebsite/perferendis-optio-quam-qui\";\nimport RNFS from \"react-native-fs\";\nimport * as Sentry from \"@sentry/react-native\";\n\nvar customTransport: transportFunctionType = (props) => {\n  // Do here whatever you want with the log message\n  // Eg. a console log: console.log(props.level.text, props.msg)\n};\n\nconst log = logger.createLogger({\n  transport: [\n    consoleTransport,\n    fileAsyncTransport,\n    sentryTransport,\n    customTransport,\n  ],\n  transportOptions: {\n    FS: RNFS,\n    SENTRY: Sentry,\n    colors: {\n      info: \"blueBright\",\n      warn: \"yellowBright\",\n      error: \"redBright\",\n    },\n  },\n});\n```\n\n### Improve performance\n\nIn react-native you can improve performance by setting the `InteractionManager.runAfterInteractions` async function:\n\n```javascript\nimport { logger } from \"@hutechwebsite/perferendis-optio-quam-qui\";\n\nconst InteractionManager = require(\"react-native\").InteractionManager;\n\nconst log = logger.createLogger({\n  async: true,\n  asyncFunc: InteractionManager.runAfterInteractions,\n});\n```\n",
	"readmeFilename": "README.md",
	"_downloads": 49
}