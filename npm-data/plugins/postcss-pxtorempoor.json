{
	"_id": "postcss-pxtorempoor",
	"_rev": "2-837e936e2223de533b79c340498e8f92",
	"name": "postcss-pxtorempoor",
	"dist-tags": {
		"latest": "2.0.0"
	},
	"versions": {
		"1.0.0": {
			"name": "postcss-pxtorempoor",
			"version": "1.0.0",
			"description": "PostCSS plugin pxtorempoor",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"postcss-pxtorempoor"
			],
			"author": {
				"name": "DC_LangX",
				"email": "dc_langx@hotmail.com"
			},
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/DCLangX/postcss-pxtorempoor.git"
			},
			"engines": {
				"node": ">=12.0.0"
			},
			"peerDependencies": {
				"postcss": "^8.3.0"
			},
			"gitHead": "e6adc1fac8c800a79f6e8424e9225da8a5de3b3a",
			"bugs": {
				"url": "https://github.com/DCLangX/postcss-pxtorempoor/issues"
			},
			"homepage": "https://github.com/DCLangX/postcss-pxtorempoor#readme",
			"_id": "postcss-pxtorempoor@1.0.0",
			"_nodeVersion": "16.15.0",
			"_npmVersion": "8.5.5",
			"dist": {
				"integrity": "sha512-bA7P87gmXLUt50mFBg2+6GgQXt8EjFqwrMx1+xDQjBFnB/4cx3cUNfUiHfrcXJw9jyiTRm/vAe3JtRVqvThyrw==",
				"shasum": "347c5dff39be392845e733ad7b5c3f50c8162ad2",
				"tarball": "https://registry.npmjs.org/postcss-pxtorempoor/-/postcss-pxtorempoor-1.0.0.tgz",
				"fileCount": 11,
				"unpackedSize": 14640,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIQD28xQipUJ+bf8URe2wC61M0tGBvmdpr/aBIzlyutvupQIgSjt1hVfuv7mFus7yUNo4gl/3nL8eoQuWM+hqDPb4wfc="
					}
				],
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiilZcACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrddQ/+P4nKkVYtq48LMelAJQcFZ3PSH0KVkgfXm/2jog8lBdSZJOQq\r\nMB3yoKgLNIeCdt+0VuT2w6CHQ63v+satJ0VsCbeX1ifqUY36nAT8eajrTW2j\r\nVZLYrcrkOB2+4IvUgO3ST0+LD1H5y9GIisjgY0VRLLLRx69aJIXwHeOlfS+P\r\nGn3STUsPFnw7eMoEwXF7Vxl6iJZAxTk8XvBziEr2rRKTWBKAGrvFvjn0hrXr\r\ngLjZ3l1UtzubsnOSWS6OlhiYVPpRdPNek7UAT06W5RRK5X2YRokQztSV5IF+\r\noZ6H8XxCPyQJlRoA6Bq/doe9EuUZVDpdknMVevck/JBSH/TzxiKfUsCTaqJX\r\nhSE5XOdMmDwcFMG5gSiv2D6is5ehQUp0R3wD1OoeLzp2vvvoV1NNLvdzhK+W\r\nxDPwzOQVJxE8GQEDUnFiW0e7ZxNXPiG6O01MITYA514cyi8hqOTf4FmNVHLA\r\nONnunvgj7/i8qpfm/hU2lxxdd4YQ6KtyFtn3ynCJW7PUYGjRNzVxaGkhqGZ8\r\nbE7mQCeZfkx2HZO5Ifn8i8C5JYv/X5VxQ70nYjKZeEYV67z1wa24LLabiVZ3\r\nRjdsCxZK0E0PGH8FMh83cxmox3SMtemzOM/AsAjsSvEaTUzB64FUlvqLp2aq\r\ntsW5Az3LohiIhmSKQ+wsb+SjaSB2+hYh9C4=\r\n=NvCX\r\n-----END PGP SIGNATURE-----\r\n"
			},
			"_npmUser": {
				"name": "dclangx",
				"email": "dc_langx@hotmail.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "dclangx",
					"email": "dc_langx@hotmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-pxtorempoor_1.0.0_1653233244460_0.5579858724319187"
			},
			"_hasShrinkwrap": false
		},
		"1.0.1": {
			"name": "postcss-pxtorempoor",
			"version": "1.0.1",
			"description": "PostCSS plugin pxtorempoor",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"postcss-pxtorempoor"
			],
			"author": {
				"name": "DC_LangX",
				"email": "dc_langx@hotmail.com"
			},
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/DCLangX/postcss-pxtorempoor.git"
			},
			"engines": {
				"node": ">=12.0.0"
			},
			"peerDependencies": {
				"postcss": "^8.3.0"
			},
			"gitHead": "3bc0e7103ab1322cb73b033e0a489772b23de9b9",
			"bugs": {
				"url": "https://github.com/DCLangX/postcss-pxtorempoor/issues"
			},
			"homepage": "https://github.com/DCLangX/postcss-pxtorempoor#readme",
			"_id": "postcss-pxtorempoor@1.0.1",
			"_nodeVersion": "16.15.0",
			"_npmVersion": "8.5.5",
			"dist": {
				"integrity": "sha512-HP9h8B5gwcePQHhdDjlubO6usplLzjBdrxjFOf8oG+UVzoxJH8YKOGDxcvrmzWF0LY9ppVtJQuMupwR1wxmiPA==",
				"shasum": "54b8d6a39385cd31a404036f405d1892e1e0016a",
				"tarball": "https://registry.npmjs.org/postcss-pxtorempoor/-/postcss-pxtorempoor-1.0.1.tgz",
				"fileCount": 11,
				"unpackedSize": 14653,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIA84GV/HMkyxRMgo9Iwe8Nyf+BG6e3uy5LIjy32AZ2nsAiEA1lVvXMFtsDy+vfHTEeEEF3n06SgnxWvkC2sPEC+h1Dw="
					}
				],
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiilgQACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqSww//TBiybj+Nf0jjvrECf5bOxzTff1KB2ZxTUS57x/xtbOoZYW2A\r\ntaOuAXYbkHhS6bKBfmUPiRnNTNw7l8C00idY/ntVIYQSfggamHdhAI5EPNal\r\nZZxbrQvQxWP4Ck6w1YuFSxTKGs8aJQQZPDKvEU4VwHRGY0p/x/6FTwlW7MsG\r\nogeFZthtl33H1WMSrQpYwJDoJkuSBnheVAUKkaODpBK7g847J4ymkJBBvaDk\r\nMxj6OE5tPYza+OPgjfQ+2pt/PP04RaA6bBxc07Ea8wj8F985Gew0IbAJQmv6\r\nLMdSHgkSacxW42CyE7/8x6lS+krJbS3DpNMLQ54lN5kJ7wT7Qpc5kHg/i9Ew\r\ngKldT7eQQyzKUAgY1qmdEbY/S92sI7WqXy+AkqFGesPzlTjGVO6d8Kc8Lqhe\r\nbMFY0fSjVxn6WFaKxNa8P9cCo3U3L8LNXJTgWSic62hGuSk0dRTdJhf6XZ28\r\ndWI0AzyZZPDsiRENPhSCm8TPntzAQ1man6bEs2ZEhQWrH5Ii5RZSvpBFsTFL\r\nlCiiZvv1alm5RHrwNNN+cs6nz7wYgXGiJy+J9HCdpWFmNd2rl1YuqkFGQ2JW\r\ngO97bRl8zoTSWt4ugNe50VkVgQCOkKP2XBzLuEj/uasM2lr0X7jJx2FGyeYl\r\nCSXfnSJigy6+aazsmWLAoevMAeGd/I5JAS8=\r\n=EVDF\r\n-----END PGP SIGNATURE-----\r\n"
			},
			"_npmUser": {
				"name": "dclangx",
				"email": "dc_langx@hotmail.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "dclangx",
					"email": "dc_langx@hotmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-pxtorempoor_1.0.1_1653233680112_0.9165730338545124"
			},
			"_hasShrinkwrap": false
		},
		"2.0.0": {
			"name": "postcss-pxtorempoor",
			"type": "module",
			"version": "2.0.0",
			"description": "✨ A CSS post-processor that converts px to rem.",
			"author": {
				"name": "DC_LangX",
				"email": "https://github.com/DCLangX"
			},
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/DCLangX/postcss-pxtorempoor.git"
			},
			"keywords": [
				"px2rem",
				"pxtorem",
				"postcss",
				"css",
				"rem",
				"pixel",
				"px",
				"postcss-plugin",
				"postcss-pxtorem",
				"postcss-pxtorempoor"
			],
			"exports": {
				".": {
					"types": "./dist/index.d.ts",
					"require": "./dist/index.cjs",
					"import": "./dist/index.js"
				}
			},
			"main": "./dist/index.cjs",
			"module": "./dist/index.js",
			"types": "./dist/index.d.ts",
			"scripts": {
				"dev": "tsup --watch",
				"build": "tsup",
				"test": "vitest",
				"lint": "eslint .",
				"changelog": "conventional-changelog -p angular -i CHANGELOG.md -s -r 0",
				"up": "pnpm update --i --L",
				"bump": "bumpp package.json -c -p -t --all -x \"pnpm run changelog\""
			},
			"peerDependencies": {
				"postcss": ">=8.0.0"
			},
			"devDependencies": {
				"@minko-fe/eslint-config-ts": "^1.2.32",
				"@minko-fe/tsconfig": "^1.2.32",
				"@types/decode-uri-component": "^0.2.0",
				"bumpp": "^9.0.0",
				"conventional-changelog-cli": "^2.2.2",
				"decode-uri-component": "^0.4.1",
				"eslint": "^8.36.0",
				"postcss": "^8.4.21",
				"postcss-nested": "^6.0.1",
				"split-on-first": "^3.0.0",
				"tsup": "^6.7.0",
				"typescript": "^4.9.5",
				"vite": "^4.4.3",
				"vitest": "^0.29.7"
			},
			"gitHead": "48cf1a1dd7d572c03d34a2f02e5b971e7b088b8b",
			"bugs": {
				"url": "https://github.com/DCLangX/postcss-pxtorempoor/issues"
			},
			"homepage": "https://github.com/DCLangX/postcss-pxtorempoor#readme",
			"_id": "postcss-pxtorempoor@2.0.0",
			"_nodeVersion": "16.16.0",
			"_npmVersion": "8.11.0",
			"dist": {
				"integrity": "sha512-87JX8/sKnBH9+/7LlzhNsKDjobJMBHpMlpQO99tXDnnxTEGwVD8fCDNopi5jqX486Q/qnbBLj2dMcUk+/1M0+A==",
				"shasum": "ef1b9c17a9b4b9d819551603781385b04a0edf7e",
				"tarball": "https://registry.npmjs.org/postcss-pxtorempoor/-/postcss-pxtorempoor-2.0.0.tgz",
				"fileCount": 6,
				"unpackedSize": 55742,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEQCIEzDm3vFbwiylPy6OrDtDSQGFu2EOzdO4KfS9bhp8SuZAiBPOvVFupvwmN2jivtO6ZObsVzA1gifId094jyH+0oR6g=="
					}
				]
			},
			"_npmUser": {
				"name": "dclangx",
				"email": "dc_langx@hotmail.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "dclangx",
					"email": "dc_langx@hotmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-pxtorempoor_2.0.0_1689737453611_0.2003175096289851"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2022-05-22T15:27:24.460Z",
		"1.0.0": "2022-05-22T15:27:24.592Z",
		"modified": "2023-07-19T03:30:53.956Z",
		"1.0.1": "2022-05-22T15:34:40.252Z",
		"2.0.0": "2023-07-19T03:30:53.789Z"
	},
	"maintainers": [
		{
			"name": "dclangx",
			"email": "dc_langx@hotmail.com"
		}
	],
	"description": "✨ A CSS post-processor that converts px to rem.",
	"homepage": "https://github.com/DCLangX/postcss-pxtorempoor#readme",
	"keywords": [
		"px2rem",
		"pxtorem",
		"postcss",
		"css",
		"rem",
		"pixel",
		"px",
		"postcss-plugin",
		"postcss-pxtorem",
		"postcss-pxtorempoor"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/DCLangX/postcss-pxtorempoor.git"
	},
	"author": {
		"name": "DC_LangX",
		"email": "https://github.com/DCLangX"
	},
	"bugs": {
		"url": "https://github.com/DCLangX/postcss-pxtorempoor/issues"
	},
	"license": "MIT",
	"readme": "# postcss-pxtorem\r\n\r\n**English** | [中文](./README-zh.md)\r\n\r\nA plugin for [PostCSS](https://github.com/ai/postcss) that generates rem units from pixel units.\r\nThis project is based on [Hemengke1997/PostCSS- PXTOREM](https://github.com/hemengke1997/postcss-pxtorem). Thanks to Hemengke1997. The change i made is only to add the ConvertinMediaque parameter to avoid changing the unit in media query.\r\n\r\n## ✨ New Features\r\n\r\n- override any `postcss-pxtorem` options in css.\r\n- ignore next line in css.\r\n- **compatible with vite**.\r\n\r\n## 🔧 Install\r\n\r\n```bash\r\npnpm install postcss postcss-pxtorempoor -D\r\n```\r\n\r\n## ✍️ Usage\r\n\r\n> Pixels are the easiest unit to use (_opinion_). The only issue with them is that they don't let browsers change the default font size of 16. This script converts every px value to a rem from the properties you choose to allow the browser to set the font size.\r\n\r\n### postcss.config.js\r\n\r\n#### example\r\n\r\n```js\r\n// postcss.config.js\r\nimport pxtorom from 'postcss-pxtorempoor'\r\n\r\nexport default {\r\n  plugins: [\r\n    pxtorom({\r\n      rootValue: 16,\r\n      selectorBlackList: ['some-class'],\r\n      propList: ['*'],\r\n      atRules: ['media'],\r\n      // ...\r\n    }),\r\n  ],\r\n}\r\n```\r\n\r\n### options\r\n\r\n| Name                | Type                                                         | Default         | Description                                                  |\r\n| ------------------- | ------------------------------------------------------------ | --------------- | ------------------------------------------------------------ |\r\n| rootValue           | `number` \\| `((input: Input) => number)`                     | 16              | Represents the root element font size or returns the root element font size based on the [`input`](https://api.postcss.org/Input.html) parameter |\r\n| unitToConvert       | `string`                                                     | `px`            | unit to convert, by default, it is px                        |\r\n| unitPrecision       | `number`                                                     | 5               | The decimal numbers to allow the REM units to grow to.       |\r\n| propList            | `string[]`                                                   | `['*']`         | The properties that can change from px to rem. Refer to: [propList](#propList) |\r\n| selectorBlackList   | `(string \\| RegExp)[]`                                       | []              | The selectors to ignore and leave as px. Refer to: [selectorBlackList](#selectorBlackList) |\r\n| replace             | `boolean`                                                    | true            | Replaces rules containing rems instead of adding fallbacks.  |\r\n| atRules             | `boolean` \\| `string[]`                                      | false           | Allow px to be converted in at-rules. Refer to [At-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule) |\r\n| minPixelValue       | `number`                                                     | 0               | Set the minimum pixel value to replace.                      |\r\n| exclude             | `string` \\| `RegExp` \\| `((filePath: string) => boolean) \\| null` | /node_modules/i | The file path to ignore and leave as px. Refer to: [exclude](#exclude) |\r\n| include             | `string` \\| `RegExp` \\| `((filePath: string) => boolean)` \\| `null` | null            | The file path to convert px to rem, in contrast to `exclude`, have higher priority than `exclude`. Same rules as `exclude` |\r\n| disable             | `boolean`                                                    | false           | disable plugin                                               |\r\n| convertUnitOnEnd    | `ConvertUnit` \\| `ConvertUnit[]` \\| false \\| null            | null            | convert unit when plugin process end                         |\r\n| convertInMediaQuery | `boolean`                                                    | true            | convert unit in media queries                                |\r\n\r\n#### propList\r\n\r\n- Values need to be exact matches.\r\n- Use wildcard `*` to enable all properties. Example: `['*']`\r\n- Use `*` at the start or end of a word. (`['*position*']` will match `background-position-y`)\r\n- Use `!` to not match a property. Example: `['*', '!letter-spacing']`\r\n- Combine the \"not\" prefix with the other prefixes. Example: `['*', '!font*']`\r\n\r\n#### selectorBlackList\r\n\r\n- If value is string, it checks to see if selector contains the string.\r\n  - `['body']` will match `.body-class`\r\n- If value is regexp, it checks to see if the selector matches the regexp.\r\n  - `[/^body$/]` will match `body` but not `.body`\r\n\r\n#### exclude\r\n\r\n- If value is string, it checks to see if file path contains the string.\r\n  - `'exclude'` will match `\\project\\postcss-pxtorem\\exclude\\path`\r\n- If value is regexp, it checks to see if file path matches the regexp.\r\n  - `/exclude/i` will match `\\project\\postcss-pxtorem\\exclude\\path`\r\n- If value is function, you can use exclude function to return a true and the file will be ignored.\r\n  - the callback will pass the file path as a parameter, it should returns a Boolean result.\r\n  - `function (file) { return file.includes('exclude') }`\r\n\r\n## ✨ About new features\r\n\r\n### ⚙️ Dynamically set plugin options in css\r\n\r\n#### disable plugin\r\n\r\n```css\r\n/* pxtorem?disable=true */\r\n.rule {\r\n  font-size: 15px; // 15px\r\n}\r\n```\r\n\r\n#### set rootValue\r\n\r\n```css\r\n/* pxtorem?rootValue=32 */\r\n.rule {\r\n  font-size: 30px; // 0.9375rem\r\n}\r\n```\r\n\r\n🌰 The above is just a simple example, you can set any of the options supported by `postcss-pxtorem` in the css file\r\n\r\nYou may have seen that the css comment is very much like the browser url?😼.\r\nThat's right. For the specification, just refer to: [query-string](https://github.com/sindresorhus/query-string)\r\n\r\n#### example\r\n\r\n```css\r\n/* pxtorem?disable=false&rootValue=32&propList[]=*&replace=false&selectorBlackList[]=/some-class/i */\r\n```\r\n\r\n### disable the next line in css file\r\n\r\n```css\r\n.rule {\r\n  /* pxtorem-disable-next-line */\r\n  font-size: 15px; // 15px\r\n}\r\n```\r\n\r\nIf you write `15PX` (as long as it's not `px`), the plugin also ignores it, because `unitToConvert` defaults to `px`\r\nIf you want to use `PX` to ignore and want the final unit to be `px`, you can:\r\n\r\n```js\r\n// postcss.config.js\r\nimport pxtorem from 'postcss-pxtorempoor'\r\n\r\nexport default {\r\n  plugins: [\r\n    pxtorem({\r\n      convertUnitOnEnd: {\r\n        sourceUnit: /[p|P][x|X]$/,\r\n        targetUnit: 'px',\r\n      },\r\n    }),\r\n  ],\r\n}\r\n```\r\n\r\n## use with flexible js\r\n\r\n### example\r\n\r\n```ts\r\n;(function () {\r\n  if (typeof window === 'undefined') return\r\n\r\n  const maxWidth = 1024\r\n  const uiWidth = 375\r\n\r\n  function resize() {\r\n    let width = window.innerWidth\r\n\r\n    if (width > window.screen.width) {\r\n    } else {\r\n      if (width >= maxWidth) {\r\n        width = maxWidth\r\n      }\r\n      document.documentElement.style.fontSize = `${(width * 16) / uiWidth}px`\r\n    }\r\n  }\r\n\r\n  resize()\r\n\r\n  let timer: NodeJS.Timer\r\n  const interval = 1000\r\n\r\n  window.addEventListener('resize', () => {\r\n    clearTimeout(timer)\r\n    timer = setTimeout(resize, interval)\r\n  })\r\n  window.addEventListener('pageshow', (e) => {\r\n    if (e.persisted) {\r\n      clearTimeout(timer)\r\n      timer = setTimeout(resize, interval)\r\n      resize()\r\n    }\r\n  })\r\n})()\r\n```\r\n\r\n## ❤️ Thanks\r\n\r\n[hemengke1997/postcss-pxtorem](https://github.com/hemengke1997/postcss-pxtorem)\r\n\r\n[postcss-pxtorem](https://github.com/cuth/postcss-pxtorem)\r\n\r\n[@tcstory/postcss-px-to-viewport](https://github.com/tcstory/postcss-px-to-viewport)\r\n\r\n## 👀 Related\r\n\r\nA CSS post-processor that converts px to viewport: [postcss-pxtoviewport](https://github.com/hemengke1997/postcss-pxtoviewport)\r\n\r\n## 💕 Support\r\n\r\n**If this has helped you, please don't hesitate to give a STAR, thanks! 😎**\r\n",
	"readmeFilename": "README.md",
	"_downloads": 9
}