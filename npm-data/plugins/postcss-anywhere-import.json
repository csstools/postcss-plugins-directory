{
	"_id": "postcss-anywhere-import",
	"name": "postcss-anywhere-import",
	"dist-tags": {
		"latest": "0.1.0"
	},
	"versions": {
		"0.1.0": {
			"name": "postcss-anywhere-import",
			"version": "0.1.0",
			"description": "PostCSS plugin to import CSS files (anywhere from top to bottom of a CSS file)",
			"keywords": [
				"css",
				"postcss",
				"postcss-plugin",
				"import",
				"node modules",
				"npm"
			],
			"author": {
				"name": "Lucas Ferreira"
			},
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/lucasferreira/postcss-anywhere-import.git"
			},
			"engines": {
				"node": ">=14.0.0"
			},
			"dependencies": {
				"postcss-value-parser": "^4.0.0",
				"read-cache": "^1.0.0",
				"resolve": "^1.1.7"
			},
			"devDependencies": {
				"ava": "^5.0.0",
				"eslint": "^8.2.0",
				"eslint-config-problems": "^7.0.0",
				"eslint-plugin-prettier": "^4.0.0",
				"postcss": "^8.0.0",
				"postcss-scss": "^4.0.0",
				"prettier": "~2.8.0",
				"sugarss": "^4.0.0"
			},
			"peerDependencies": {
				"postcss": "^8.0.0"
			},
			"scripts": {
				"ci": "eslint . && ava",
				"lint": "eslint . --fix",
				"pretest": "npm run lint",
				"test": "ava --verbose"
			},
			"eslintConfig": {
				"extends": "eslint-config-problems",
				"env": {
					"node": true
				},
				"plugins": [
					"prettier"
				],
				"rules": {
					"prettier/prettier": [
						"error",
						{
							"semi": false,
							"arrowParens": "avoid"
						}
					]
				}
			},
			"gitHead": "4badbca8e803cd90cf57dc00c860fb811dd3c221",
			"bugs": {
				"url": "https://github.com/lucasferreira/postcss-anywhere-import/issues"
			},
			"homepage": "https://github.com/lucasferreira/postcss-anywhere-import#readme",
			"_id": "postcss-anywhere-import@0.1.0",
			"_nodeVersion": "16.19.0",
			"_npmVersion": "9.2.0",
			"dist": {
				"integrity": "sha512-Wta3LfS9x+Ekc8y/n4nrZD5o4TLuHvcSpUpCAcIHdoPJDLze1C/hr74QmT3k6BDHR6Kc0EYL7XGYYIgT3jqtkw==",
				"shasum": "d7c1864ac77edc1a58af37b86bb3e09de0e26a5f",
				"tarball": "https://registry.npmjs.org/postcss-anywhere-import/-/postcss-anywhere-import-0.1.0.tgz",
				"fileCount": 12,
				"unpackedSize": 31858,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIEOdf2Q/MpSnnOcUaSpqh1vH92w6KI2iBNduvY6xQ55YAiEA7/BuRbbGIT5lDLUiUJXrSN0y/1gAGL0zWdZMKy+Bh2A="
					}
				],
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkS+dZACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrhWQ/5Aapmu4jgJNKIz8QATje5DnqUeh4J4waERRi8YPqO1wbUJXps\r\n3Kj353X0VK04++XxqlqU7Ad3ZO3Pu1kbH9Dfz0+M/pJZiUcS3sR0KkBc3K/x\r\no+cjHmYjeOldgWgbdXten347tlT3pRkb2AELj5NFIYZof0NLhx2sssoYTMXb\r\ns0AQuiTif9kI/V4Mu7Ze+N5KI5URjgNOYmp4eUZPyqjVD4ULn/8s288IFtq0\r\nEga4bTVpz2N2G4eJ0ByxmYCOw4j1yvQuRTyIepmi5z10/zOY9pA7p2fhwLYU\r\n3N+FF9tgtA1CK/kmT2kRIUs/B6DAM4MsiLaSBjN+orINIlr+TRZWLlD2NNxb\r\n+mH91ORdIvCjmVfSo0Yd5a/if5oVLwua/nutV1EgUQreY1fGnI3AKovLm4L9\r\ndFRzsweJi5jBTorlaFd6bevVeodUMvQXpVQ7SVGoKlYJNn9ohonuTH1nyyF9\r\nsEnv1aBZunVYssr2qZ79c69QqV8FolPb5c2dKKulLueHK+x0OIHNJpomXBrb\r\na/CX0HXXBHvlumLm7XzIt4vmJawWWMZBcbwQtGEeQngYvFZN6KRAKvq0ZkD9\r\nU2DyJq5XnoKOhO1BBkhHOn90WdtTn+2Ot0GJDIFPrZs3fxQIgQImR+7t/oem\r\nMY31j39aYDm/gN7abbW+wBiPndsvFjbszQM=\r\n=r9Hk\r\n-----END PGP SIGNATURE-----\r\n"
			},
			"_npmUser": {
				"name": "lucasferreira",
				"email": "lucas@lucasferreira.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "lucasferreira",
					"email": "lucas@lucasferreira.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-anywhere-import_0.1.0_1682696024835_0.5441041482710858"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2023-04-28T15:33:44.833Z",
		"0.1.0": "2023-04-28T15:33:45.065Z",
		"modified": "2023-04-28T15:33:45.254Z"
	},
	"maintainers": [
		{
			"name": "lucasferreira",
			"email": "lucas@lucasferreira.com"
		}
	],
	"description": "PostCSS plugin to import CSS files (anywhere from top to bottom of a CSS file)",
	"homepage": "https://github.com/lucasferreira/postcss-anywhere-import#readme",
	"keywords": [
		"css",
		"postcss",
		"postcss-plugin",
		"import",
		"node modules",
		"npm"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/lucasferreira/postcss-anywhere-import.git"
	},
	"author": {
		"name": "Lucas Ferreira"
	},
	"bugs": {
		"url": "https://github.com/lucasferreira/postcss-anywhere-import/issues"
	},
	"license": "MIT",
	"readme": "# postcss-anywhere-import\n\n[![Version](https://img.shields.io/npm/v/postcss-anywhere-import)](https://github.com/lucasferreira/postcss-anywhere-import/blob/master/CHANGELOG.md)\n[![postcss compatibility](https://img.shields.io/npm/dependency-version/postcss-anywhere-import/peer/postcss)](https://postcss.org/)\n\n> [PostCSS](https://github.com/postcss/postcss) plugin to transform `@import` rules by inlining content.\n\nThis plugin can consume local files, node modules or web_modules.\nTo resolve path of an `@import` rule, it can look into root directory (by default `process.cwd()`), `web_modules`, `node_modules` or local modules.\n_When importing a module, it will look for `index.css` or file referenced in `package.json` in the `style` or `main` fields._\nYou can also provide manually multiples paths where to look at.\n\n**Notes:**\n\n- **This plugin should probably be used as the first plugin of your list.\nThis way, other plugins will work on the AST as if there were only a single file to process, and will probably work as you can expect**.\n- Running [postcss-url](https://github.com/postcss/postcss-url) after postcss-anywhere-import in your plugin chain will allow you to adjust assets `url()` (or even inline them) after inlining imported files.\n- In order to optimize output, **this plugin will only import a file once** on a given scope (root, media query...).\nTests are made from the path & the content of imported files (using a hash table).\nIf this behavior is not what you want, look at `skipDuplicates` option\n- If you are looking for **Glob Imports**, you can use [postcss-import-ext-glob](https://github.com/dimitrinicolas/postcss-import-ext-glob) to extend postcss-import.\n- If you want to import remote sources, you can use [postcss-import-url](https://github.com/unlight/postcss-import-url) with its `dataUrls` plugin option to extend postcss-import.\n- Imports which are not modified (by `options.filter` or because they are remote imports) are moved to the top of the output.\n- ~~**This plugin attempts to follow the CSS `@import` spec**; `@import` statements must precede all other statements (besides `@charset`).~~\n\n## Installation\n\n```console\n$ npm install -D postcss-anywhere-import\n```\n\n## Usage\n\nUnless your stylesheet is in the same place where you run postcss\n(`process.cwd()`), you will need to use `from` option to make relative imports\nwork.\n\n```js\n// dependencies\nconst fs = require(\"fs\")\nconst postcss = require(\"postcss\")\nconst atImport = require(\"postcss-anywhere-import\")\n\n// css to be processed\nconst css = fs.readFileSync(\"css/input.css\", \"utf8\")\n\n// process css\npostcss()\n  .use(atImport())\n  .process(css, {\n    // `from` option is needed here\n    from: \"css/input.css\"\n  })\n  .then((result) => {\n    const output = result.css\n\n    console.log(output)\n  })\n```\n\n`css/input.css`:\n\n```css\n/* remote urls are preserved */\n@import \"https://example.com/styles.css\";\n\n/* can consume `node_modules`, `web_modules` or local modules */\n@import \"cssrecipes-defaults\"; /* == @import \"../node_modules/cssrecipes-defaults/index.css\"; */\n@import \"normalize.css\"; /* == @import \"../node_modules/normalize.css/normalize.css\"; */\n\n@import \"foo.css\"; /* relative to css/ according to `from` option above */\n\nbody {\n  background: black;\n}\n\n/* all standard notations of the \"url\" value are supported */\n@import url(foo-1.css);\n@import url(\"foo-2.css\");\n\n@import \"bar.css\" (min-width: 25em);\n\n@import 'baz.css' layer(baz-layer);\n```\n\nwill give you:\n\n```css\n@import \"https://example.com/styles.css\";\n\n/* ... content of ../node_modules/cssrecipes-defaults/index.css */\n/* ... content of ../node_modules/normalize.css/normalize.css */\n\n/* ... content of css/foo.css */\n\nbody {\n  background: black;\n}\n\n/* ... content of css/foo-1.css */\n/* ... content of css/foo-2.css */\n\n@media (min-width: 25em) {\n/* ... content of css/bar.css */\n}\n\n@layer baz-layer {\n/* ... content of css/baz.css */\n}\n```\n\nCheckout the [tests](test) for more examples.\n\n### Options\n\n#### `anywhereImport`\n\nType: `Boolean`\nDefault: `true`\n\nAllow this PostCSS plugin to consider any `@import` mentions and using anywhere/anyplace\ninside your .css files. If you want to regret to default version of this plugin\nlike [postcss-import](https://github.com/postcss/postcss-import) turn this `anywhereImport`\noption to `false`.\n\n#### `filter`\n\nType: `Function`\nDefault: `() => true`\n\nOnly transform imports for which the test function returns `true`. Imports for\nwhich the test function returns `false` will be left as is. The function gets\nthe path to import as an argument and should return a boolean.\n\n#### `root`\n\nType: `String`\nDefault: `process.cwd()` or _dirname of\n[the postcss `from`](https://github.com/postcss/postcss#node-source)_\n\nDefine the root where to resolve path (eg: place where `node_modules` are).\nShould not be used that much.\n_Note: nested `@import` will additionally benefit of the relative dirname of\nimported files._\n\n#### `path`\n\nType: `String|Array`\nDefault: `[]`\n\nA string or an array of paths in where to look for files.\n\n#### `plugins`\n\nType: `Array`\nDefault: `undefined`\n\nAn array of plugins to be applied on each imported files.\n\n#### `resolve`\n\nType: `Function`\nDefault: `null`\n\nYou can provide a custom path resolver with this option. This function gets\n`(id, basedir, importOptions)` arguments and should return a path, an array of\npaths or a promise resolving to the path(s). If you do not return an absolute\npath, your path will be resolved to an absolute path using the default\nresolver.\nYou can use [resolve](https://github.com/substack/node-resolve) for this.\n\n#### `load`\n\nType: `Function`\nDefault: null\n\nYou can overwrite the default loading way by setting this option.\nThis function gets `(filename, importOptions)` arguments and returns content or\npromised content.\n\n#### `skipDuplicates`\n\nType: `Boolean`\nDefault: `true`\n\nBy default, similar files (based on the same content) are being skipped.\nIt's to optimize output and skip similar files like `normalize.css` for example.\nIf this behavior is not what you want, just set this option to `false` to\ndisable it.\n\n#### `addModulesDirectories`\n\nType: `Array`\nDefault: `[]`\n\nAn array of folder names to add to [Node's resolver](https://github.com/substack/node-resolve).\nValues will be appended to the default resolve directories:\n`[\"node_modules\", \"web_modules\"]`.\n\nThis option is only for adding additional directories to default resolver. If\nyou provide your own resolver via the `resolve` configuration option above, then\nthis value will be ignored.\n\n#### `nameLayer`\n\nType: `Function`\nDefault: `null`\n\nYou can provide a custom naming function for anonymous layers (`@import 'baz.css' layer;`).\nThis function gets `(index, rootFilename)` arguments and should return a unique string.\n\nThis option only influences imports without a layer name.\nWithout this option the plugin will warn on anonymous layers.\n\n#### Example with some options\n\n```js\nconst postcss = require(\"postcss\")\nconst atImport = require(\"postcss-anywhere-import\")\n\npostcss()\n  .use(atImport({\n    path: [\"src/css\"],\n  }))\n  .process(cssString)\n  .then((result) => {\n    const { css } = result\n  })\n```\n\n## `dependency` Message Support\n\n`postcss-anywhere-import` adds a message to `result.messages` for each `@import`. Messages are in the following format:\n\n```\n{\n  type: 'dependency',\n  file: absoluteFilePath,\n  parent: fileContainingTheImport\n}\n```\n\nThis is mainly for use by postcss runners that implement file watching.\n\n---\n\n## CONTRIBUTING\n\n* For bugs and feature requests, please create an issue.\n* Pull requests must be accompanied by passing automated tests (`$ npm test`).\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
	"readmeFilename": "README.md",
	"_downloads": 15
}