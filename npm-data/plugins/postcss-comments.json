{
	"_id": "postcss-comments",
	"name": "postcss-comments",
	"dist-tags": {
		"latest": "1.0.0"
	},
	"versions": {
		"1.0.0": {
			"name": "postcss-comments",
			"version": "1.0.0",
			"description": "Postcss plugin to prepend or append comments to CSS rules",
			"repository": {
				"type": "git",
				"url": "git+ssh://git@github.com/elchininet/postcss-comments.git"
			},
			"author": {
				"name": "ElChiniNet"
			},
			"license": "Apache-2.0",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"comments"
			],
			"main": "index.js",
			"module": "esm/index.js",
			"types": "index.d.ts",
			"exports": {
				".": {
					"require": {
						"types": "./index.d.ts",
						"default": "./index.js"
					},
					"import": {
						"types": "./esm/index.d.ts",
						"default": "./esm/index.js"
					}
				}
			},
			"scripts": {
				"test": "jest --clearCache && jest --verbose",
				"lint": "eslint src/**/*.ts",
				"clean": "./scripts/clean.sh",
				"copy": "./scripts/copy.sh",
				"modify-dts": "replace-in-file --configFile=config.replace.js",
				"build": "yarn clean && rollup --config rollup.config.js --bundleConfigAsCjs && yarn copy && yarn modify-dts",
				"prepare": "yarn build",
				"prepublishOnly": "npm run lint && npm run test",
				"version": "git add .",
				"postversion": "git push && git push --tags"
			},
			"devDependencies": {
				"@types/eslint": "^8.44.2",
				"@types/jest": "^29.5.3",
				"@types/node": "^20.5.0",
				"@typescript-eslint/eslint-plugin": "^6.4.0",
				"@typescript-eslint/parser": "^6.4.0",
				"eslint": "^8.47.0",
				"eslint-plugin-jest": "^27.2.3",
				"jest": "^29.6.2",
				"postcss": "^8.4.28",
				"replace-in-file": "^7.0.1",
				"rollup": "^3.28.0",
				"rollup-plugin-terser": "^7.0.2",
				"rollup-plugin-ts": "^3.4.4",
				"ts-jest": "^29.1.1",
				"typescript": "^5.1.6"
			},
			"peerDependencies": {
				"postcss": "^8.0.0"
			},
			"engines": {
				"node": ">=12.0.0"
			},
			"gitHead": "12fd07ca34bf69c36f2a892c2c4b739388fbcd4a",
			"bugs": {
				"url": "https://github.com/elchininet/postcss-comments/issues"
			},
			"homepage": "https://github.com/elchininet/postcss-comments#readme",
			"_id": "postcss-comments@1.0.0",
			"_nodeVersion": "16.20.2",
			"_npmVersion": "8.19.4",
			"dist": {
				"integrity": "sha512-sagLfj1hLLb9no6C0eE96o5crmMPTns95lmAFBExLekLhqNa/3g+ItF/r5hZ/H2/Q8zIw6N/5KcCbFWuMV6tSg==",
				"shasum": "cfc197bce85625b84e60db83db961b068707996a",
				"tarball": "https://registry.npmjs.org/postcss-comments/-/postcss-comments-1.0.0.tgz",
				"fileCount": 8,
				"unpackedSize": 21590,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEQCIE1PY64NpRXucFLXGrjKUaPYKWqsGeCA+FdWXP158UepAiAfNV0I+xm/K60DYlF2shsZ5z665EriMb0ogPAWh1A0SA=="
					}
				]
			},
			"_npmUser": {
				"name": "elchininet",
				"email": "elchininet@gmail.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "elchininet",
					"email": "elchininet@gmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-comments_1.0.0_1692313553310_0.5178068413559185"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2023-08-17T23:05:53.309Z",
		"1.0.0": "2023-08-17T23:05:53.544Z",
		"modified": "2023-08-17T23:05:53.847Z"
	},
	"maintainers": [
		{
			"name": "elchininet",
			"email": "elchininet@gmail.com"
		}
	],
	"description": "Postcss plugin to prepend or append comments to CSS rules",
	"homepage": "https://github.com/elchininet/postcss-comments#readme",
	"keywords": [
		"postcss",
		"css",
		"postcss-plugin",
		"comments"
	],
	"repository": {
		"type": "git",
		"url": "git+ssh://git@github.com/elchininet/postcss-comments.git"
	},
	"author": {
		"name": "ElChiniNet"
	},
	"bugs": {
		"url": "https://github.com/elchininet/postcss-comments/issues"
	},
	"license": "Apache-2.0",
	"readme": "# PostCSS Comments\n[PostCSS] plugin to prepend and append comments to CSS rules.\n\n[![Deployment Status](https://github.com/elchininet/postcss-comments/actions/workflows/deploy.yaml/badge.svg)](https://github.com/elchininet/postcss-comments/actions/workflows/deploy.yaml) &nbsp; [![Coverage Status](https://coveralls.io/repos/github/elchininet/postcss-comments/badge.svg?branch=master)](https://coveralls.io/github/elchininet/postcss-comments?branch=master) &nbsp; [![npm version](https://badge.fury.io/js/postcss-comments.svg)](https://badge.fury.io/js/postcss-comments)\n\nDescription\n---\n\nSome [PostCSS] plugins require to add comments to the CSS code to be able to perform their work (e.g. [RTLCSS] or [PostCSS RTLCSS]). But if the CSS code is coming from a third-party library or a CSS-in-JS framework it is impossible to modify the CSS source to add comments. In these cases, `postcss-comments` could be helpful to prepend or append comments to CSS rules selecting them using strings or regular expressions.\n\nInstall\n---\n\n#### npm\n\n```bash\nnpm install postcss-comments --save-dev\n```\n\n#### yarn\n\n```bash\nyarn add postcss-comments -D\n```\n\n#### Usage with commonJS\n\n```javascript\nconst postcss = require('postcss');\nconst postcssComments = require('postcss-comments');\n\nconst result = postcss([\n    postcssComments({\n        rulesMatchers: [\n            /* rulesMatchers */\n        ]\n    })\n]).process(cssInput);\n\nconst commentedCSS = result.css;\n```\n\n#### Usage with ES6 modules\n\n```javascript\nimport postcss from 'postcss';\nimport postcssComments from 'postcss-comments';\n\nconst result = postcss([\n    postcssComments({\n        rulesMatchers: [\n            /* rulesMatchers */\n        ]\n    })\n]).process(cssInput);\n\nconst commentedCSS = result.css;\n```\n\n#### Usage in Webpack with postcss-loader\n\n```javascript\nrules: [\n    {\n        test: /\\.css$/,\n        use: [\n            { loader: 'style-loader' },\n            { loader: 'css-loader' },\n            {\n                loader: 'postcss-loader',\n                options: {\n                    postcssOptions: {\n                        plugins: [\n                            postcssComments({\n                                rulesMatchers: [\n                                    /* rulesMatchers */\n                                ]\n                            })\n                        ]\n                    }\n                }\n            }\n        ]\n    }\n]\n```\n\nRules Matchers\n---\n\n`rulesMatchers` consist on an array of objects, each one describing one matcher.\n\n```javascript\n{\n    matcher: string | RegExp | (string | RegExp)[];\n    prepend?: string;\n    append?: string;\n}\n```\nExamples\n---\n\n#### Input\n\n```css\n.test1, .test2 {\n    color: #666;\n    padding-right: 20px;\n    width: 100%;\n}\n\n.link {\n    color: red;\n}\n\n.link:hover {\n    color: red;\n}\n\n.link:visited {\n    color: red;\n}\n\n.test-class {\n    text-align: left;\n    height: 100px;\n}\n```\n\n### Using string rule matchers\n\nString matchers will match a rule if the entire selector of the rule matches exactly with the string.\n\n```javascript\npostcssComments({\n    rulesMatchers: [\n       {\n            matcher: ['.link', '.test-class'],\n            prepend: 'Using an array of string matchers'\n       },\n       {\n            matcher: '.link:visited',\n            append: 'Using a unique string matcher'\n       }\n    ]\n})\n```\n\n#### Output\n\n```css\n.test1, .test2 {\n    color: #666;\n    padding-right: 20px;\n    width: 100%;\n}\n\n/* Using an array of string matchers */\n.link {\n    color: red;\n}\n\n.link:hover {\n    color: red;\n}\n\n.link:visited {\n    color: red;\n}\n/* Using a unique string matcher */\n\n/* Using an array of string matchers */\n.test-class {\n    text-align: left;\n    height: 100px;\n}\n```\n\n### Using RegExp rule matchers\n\nRegular Expressions matchers are more flexible. They allow one to match rules without specifing exactly the string of their selectors using a Regular Expression pattern instead.\n\n```javascript\npostcssComments({\n    rulesMatchers: [\n       {\n            matcher: [/^\\.test\\d+/, /^\\.link:\\w+$/],\n            prepend: 'Using an array of RegExp matchers'\n       },\n       {\n            matcher: /\\.test-\\w+$/,\n            append: 'Using a single regular expression'\n       }\n    ]\n})\n```\n\n#### Output\n\n```css\n/* Using an array of RegExp matchers */\n.test1, .test2 {\n    color: #666;\n    padding-right: 20px;\n    width: 100%;\n}\n\n.link {\n    color: red;\n}\n\n/* Using an array of RegExp matchers */\n.link:hover {\n    color: red;\n}\n\n/* Using an array of RegExp matchers */\n.link:visited {\n    color: red;\n}\n\n.test-class {\n    text-align: left;\n    height: 100px;\n}\n/* Using a single regular expression */\n```\n\nNotes\n---\n\n1. String matchers and Regular Expression matchers can be mixed in the same macther array.\n1. Only the first matcher is used. If a rule matches a matcher, the `append` or `prepend` comments are inserted and it doesnâ€˜t continue checking the next matchers on the array.\n2. Regular Expressions matchers cannot have [flags], if you set flags, they will be ignored.\n3. If you do not use PostCSS, add it according to [official docs]\nand set this plugin in settings.\n\n[PostCSS]: https://github.com/postcss/postcss\n[RTLCSS]: https://rtlcss.com/learn/usage-guide/control-directives/\n[PostCSS RTLCSS]: https://github.com/elchininet/postcss-rtlcss#control-directives\n[flags]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags\n[official docs]: https://github.com/postcss/postcss#usage\n",
	"readmeFilename": "README.md",
	"_downloads": 61
}