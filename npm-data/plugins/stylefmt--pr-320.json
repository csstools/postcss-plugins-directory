{
	"_id": "stylefmt--pr-320",
	"_rev": "1-583d49916a347f10729ffd6a32bf937a",
	"name": "stylefmt--pr-320",
	"description": "stylefmt is a tool that automatically formats CSS according to stylelint rules",
	"dist-tags": {
		"latest": "6.0.1"
	},
	"versions": {
		"6.0.1": {
			"name": "stylefmt--pr-320",
			"version": "6.0.1",
			"description": "stylefmt is a tool that automatically formats CSS according to stylelint rules",
			"main": "index.js",
			"scripts": {
				"test": "tape test/*.js | faucet && npm run lint",
				"lint": "eslint -c .eslintrc.json index.js lib bin"
			},
			"bin": {
				"stylefmt": "bin/cli.js"
			},
			"repository": {
				"type": "git",
				"url": "git://github.com/morishitter/stylefmt/git"
			},
			"engines": {
				"node": ">=4.2.0"
			},
			"keywords": [
				"css",
				"format",
				"formatter",
				"code style",
				"beautifier",
				"postcss-plugin",
				"postcss",
				"stylelint"
			],
			"author": {
				"name": "Masaaki Morishita"
			},
			"license": "MIT",
			"dependencies": {
				"chalk": "^1.1.3",
				"css-color-list": "^0.0.1",
				"diff": "^3.2.0",
				"editorconfig": "^0.13.2",
				"globby": "^6.1.0",
				"minimist": "^1.2.0",
				"postcss": "^6.0.1",
				"postcss-scss": "^1.0.0",
				"postcss-sorting": "^2.1.0",
				"postcss-value-parser": "^3.3.0",
				"stdin": "^0.0.1",
				"stylelint": "^7.10.1",
				"stylelint-order": "^0.4.4"
			},
			"devDependencies": {
				"each-series": "^1.0.0",
				"eslint": "^3.19.0",
				"faucet": "^0.0.1",
				"klaw": "^1.3.1",
				"tape": "^4.6.3"
			},
			"gitHead": "f956b22091010b7d8f729cc1541d92b4a9920b6a",
			"_id": "stylefmt--pr-320@6.0.1",
			"_npmVersion": "5.3.0",
			"_nodeVersion": "8.4.0",
			"_npmUser": {
				"name": "dmitriy-lodyanov",
				"email": "dmitriy.lodyanov@gmail.com"
			},
			"dist": {
				"integrity": "sha512-buCTZYDt+TdthmgM5do+9Y0HzyRL/p5LBKsqDIDDqUPo0R3/vZnK7plwYJXvmpNWafOKk5JaRWuZM6twll7Htg==",
				"shasum": "041d4359d906e18b5fd26c204bb4402a9eeb2763",
				"tarball": "https://registry.npmjs.org/stylefmt--pr-320/-/stylefmt--pr-320-6.0.1.tgz",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCICIqyMH2xNVtj2ctSBmfg7qHP4C82qHXuBHtKiiCpUTkAiEAo70q8xsJY9R4y6KQMIoYmwDXlcG+i4l+wv4QDQtpc+o="
					}
				]
			},
			"maintainers": [
				{
					"name": "dmitriy-lodyanov",
					"email": "dmitriy.lodyanov@gmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/stylefmt--pr-320-6.0.1.tgz_1503919712058_0.11969988676719368"
			}
		}
	},
	"readme": "> Modern CSS Formatter\r\n\r\n<div align=\"center\">\r\n  <a href=\"https://github.com/morishitter/stylefmt\">\r\n    <img width=360px src=\"http://morishitter.github.io/stylefmt-logo.svg\">\r\n  </a>\r\n</div>\r\n<br>\r\n\r\n<p align=\"center\"><big>\r\n\r\n</big></p>\r\n\r\n<p align=\"center\">\r\n  <a href=\"https://travis-ci.org/morishitter/stylefmt\">\r\n    <img src=\"https://travis-ci.org/morishitter/stylefmt.svg\"\r\n         alt=\"Build Status\">\r\n  </a>\r\n\r\n  <a href=\"https://www.npmjs.com/package/stylefmt\">\r\n    <img src=\"https://img.shields.io/npm/v/stylefmt.svg?style=flat-square\"\r\n         alt=\"NPM Version\">\r\n  </a>\r\n\r\n  <a href=\"https://www.npmjs.org/package/stylefmt\">\r\n    <img src=\"https://img.shields.io/npm/dm/stylefmt.svg?style=flat-square\"\r\n         alt=\"Downloads\">\r\n  </a>\r\n\r\n  <a href=\"https://david-dm.org/morishitter/stylefmt\">\r\n    <img src=\"https://david-dm.org/morishitter/stylefmt.svg\"\r\n         alt=\"Dependency Status\">\r\n  </a>\r\n\r\n  <a href=\"https://opensource.org/licenses/MIT\">\r\n    <img src=\"https://img.shields.io/badge/license-MIT-444444.svg?style=flat-square\"\r\n         alt=\"License\">\r\n  </a>\r\n\r\n  <a href=\"https://gitter.im/morishitter/stylefmt\">\r\n    <img src=\"https://badges.gitter.im/Join%20Chat.svg\"\r\n         alt=\"Gitter\">\r\n  </a>\r\n</p>\r\n<br>\r\n\r\nstylefmt is a tool that automatically formats CSS according to [stylelint](http://stylelint.io/) rules.\r\n\r\nstylefmt'd code is:\r\n\r\n- easier to **write** : never worry about minor formatting concerns while hacking away.\r\n- easier to **read** : when all code looks the same you need not mentally convert others' formatting style into something you can understand.\r\n- easier to **maintain** : mechanical changes to the source don't cause unrelated changes to the file's formatting; diffs show only the real changes.\r\n- **uncontroversial** : never have a debate about spacing or brace position ever again!\r\n\r\n## NOTICE: Consider other tools before adopting stylefmt\r\n\r\nIf you are using stylefmt with stylelint configuration to format according to its rules, you can now use stylelint's [--fix](https://github.com/stylelint/stylelint/releases/tag/7.11.0) option (from v7.11.0) to autofix.\r\n\r\nAnother on the other hand, [prettier](https://github.com/prettier/prettier) supports to format not only JavaScript but also CSS, SCSS and Less code.\r\n\r\n## Features\r\n\r\n- **Supports the latest CSS syntax:** Including custom properties, range context for media features, `calc()` and nesting.\r\n- **Understands CSS-like syntaxes:** stylefmt is powered by [PostCSS](https://github.com/postcss/postcss), so it understands any syntax that PostCSS can parse, including SCSS.\r\n- **Works well with stylelint:** [stylelint](http://stylelint.io/) is a mighty, modern CSS linter. stylefmt can understand the formatting rules specified in your stylelint configuration file (`.stylelintrc`).\r\n\r\n## Examples\r\n\r\n### Future CSS syntax (cssnext)\r\n\r\nInput (input.css):\r\n\r\n```css\r\n/* custom properties */\r\n:root{--fontSize: 1rem;\r\n  --mainColor       :#12345678;\r\n--highlightColor:hwb(190, 35%, 20%);\r\n}\r\n\r\n/* custom media queries */\r\n@custom-media\r\n\r\n--viewport-medium(width<=50rem);\r\n\r\n/* some var() & calc() */\r\nbody{color:var(--mainColor);\r\n    font-size:var(--fontSize);\r\n line-height: calc(var(--fontSize) * 1.5);\r\npadding: calc((var(--fontSize) / 2) + 1px)}\r\n\r\n/* custom media query usage */\r\n@media (--viewport-medium) {\r\nbody {font-size: calc(var(--fontSize) * 1.2); }\r\n}\r\n\r\n/* custom selectors */\r\n@custom-selector :--heading h1,h2,h3,    h4,h5,h6;\r\n:--heading { margin-top:0 }\r\n\r\n/* colors stuff */\r\na{\r\ncolor:var(--highlightColor);\r\n    transition:color 1s;\r\n}\r\na:hover{color  :gray(255,50%) }\r\na:active{color : rebeccapurple }\r\na:any-link { color:color(var(--highlightColor) blackness(+20%)) }\r\n\r\n/* font stuff */\r\nh2 {font-variant-caps:small-caps;\r\n}table{font-variant-numeric: lining-nums;\r\n}\r\n\r\n/* filters */\r\n.blur{filter:blur(4px)}.sepia{\r\nfilter: sepia(.8);}\r\n\r\n```\r\n\r\nYield:\r\n\r\n```css\r\n/* custom properties */\r\n:root {\r\n  --fontSize: 1rem;\r\n  --mainColor: #12345678;\r\n  --highlightColor: hwb(190, 35%, 20%);\r\n}\r\n\r\n/* custom media queries */\r\n@custom-media --viewport-medium (width <= 50rem);\r\n\r\n/* some var() & calc() */\r\nbody {\r\n  color: var(--mainColor);\r\n  font-size: var(--fontSize);\r\n  line-height: calc(var(--fontSize) * 1.5);\r\n  padding: calc((var(--fontSize) / 2) + 1px);\r\n}\r\n\r\n/* custom media query usage */\r\n@media (--viewport-medium) {\r\n  body {\r\n    font-size: calc(var(--fontSize) * 1.2);\r\n  }\r\n}\r\n\r\n/* custom selectors */\r\n@custom-selector :--heading h1, h2, h3, h4, h5, h6;\r\n\r\n:--heading {\r\n  margin-top: 0;\r\n}\r\n\r\n/* colors stuff */\r\na {\r\n  color: var(--highlightColor);\r\n  transition: color 1s;\r\n}\r\n\r\na:hover {\r\n  color: gray(255, 50%);\r\n}\r\n\r\na:active {\r\n  color: rebeccapurple;\r\n}\r\n\r\na:any-link {\r\n  color: color(var(--highlightColor) blackness(+20%));\r\n}\r\n\r\n/* font stuff */\r\nh2 {\r\n  font-variant-caps: small-caps;\r\n}\r\n\r\ntable {\r\n  font-variant-numeric: lining-nums;\r\n}\r\n\r\n/* filters */\r\n.blur {\r\n  filter: blur(4px);\r\n}\r\n\r\n.sepia {\r\n  filter: sepia(.8);\r\n}\r\n\r\n```\r\n\r\n### SCSS syntax\r\n\r\nInput (input.scss):\r\n\r\n```scss\r\n// mixin for clearfix\r\n\r\n\r\n        @mixin      clearfix    ()      { &:before,\r\n  &:after {\r\n                content:\" \";\r\n    display              : table;  }\r\n\r\n  &:after        {clear: both;}\r\n   }.class\r\n{\r\n       padding:10px;@include        clearfix();}\r\n     .base {  color: red;  }\r\n\r\n// placeholder\r\n%base\r\n{\r\n\r\n\r\npadding: 12px\r\n}\r\n\r\n.foo{\r\n@extend      .base;}\r\n\r\n.bar\r\n      {     @extend            %base;\r\n\r\n}\r\n```\r\n\r\nYield:\r\n\r\n```scss\r\n// mixin for clearfix\r\n@mixin clearfix () {\r\n  &:before,\r\n  &:after {\r\n    content: \" \";\r\n    display: table;\r\n  }\r\n\r\n  &:after {\r\n    clear: both;\r\n  }\r\n}\r\n\r\n.class {\r\n  padding: 10px;\r\n  @include clearfix();\r\n}\r\n\r\n.base {\r\n  color: red;\r\n}\r\n\r\n// placeholder\r\n%base {\r\n  padding: 12px;\r\n}\r\n\r\n.foo {\r\n  @extend .base;\r\n}\r\n\r\n.bar {\r\n  @extend %base;\r\n}\r\n```\r\n\r\n## Installation\r\n\r\n```shell\r\n$ npm install stylefmt\r\n```\r\n\r\n## Usage\r\n\r\n### in Command Line\r\n\r\nCLI Help:\r\n\r\n```\r\n$ stylefmt --help\r\n```\r\n\r\n```\r\nUsage: stylefmt [options] input-name [output-name]\r\n\r\nOptions:\r\n\r\n  -b, --config-basedir   Path to the directory that relative paths defining \"extends\"\r\n  -c, --config           Path to a specific configuration file (JSON, YAML, or CommonJS)\r\n  -d, --diff             Output diff against original file\r\n  -r, --recursive        Format list of space seperated files(globs) in place\r\n  -v, --version          Output the version number\r\n  -h, --help             Output usage information\r\n  -i, --ignore-path      Path to a file containing patterns that describe files to ignore.\r\n  --stdin-filename       A filename to assign stdin input.\r\n```\r\n\r\nstylefmt can also read a file from stdin if there are no input-file as argument in CLI.\r\n\r\n```\r\n$ cat input.css | stylefmt --stdin-filename input.css\r\n```\r\n\r\n### in Node.js\r\n\r\n```js\r\nvar fs = require('fs');\r\nvar postcss = require('postcss');\r\nvar scss = require('postcss-scss'); // when you use scss syntax\r\nvar stylefmt = require('stylefmt');\r\n\r\nvar css = fs.readFileSync('input.css', 'utf-8');\r\n\r\npostcss([\r\n  stylefmt\r\n]).process(css, {\r\n    from: 'input.css',\r\n    syntax: scss\r\n  })\r\n  .then(function (result) {\r\n    result.css; // formatted code\r\n  });\r\n```\r\n\r\n### in Task Runners\r\n\r\nWe can use stylefmt in [Grunt](https://github.com/morishitter/grunt-stylefmt), [gulp](https://github.com/morishitter/gulp-stylefmt), and [Fly](https://github.com/morishitter/fly-cssfmt).\r\n\r\n\r\n## stylelint rules that stylefmt can handle\r\n\r\nstylefmt :heart: stylelint\r\n\r\nstylefmt supports the following stylelint rules:\r\n\r\n- [at-rule-empty-line-before](https://github.com/stylelint/stylelint/tree/master/lib/rules/at-rule-empty-line-before) (\"always\"|\"never\" and except \"blockless-group\" only)\r\n- [at-rule-semicolon-newline-after](https://github.com/stylelint/stylelint/tree/master/lib/rules/at-rule-semicolon-newline-after)\r\n- [block-closing-brace-newline-after](https://github.com/stylelint/stylelint/tree/master/lib/rules/block-closing-brace-newline-after)\r\n- [block-closing-brace-newline-before](https://github.com/stylelint/stylelint/tree/master/lib/rules/block-closing-brace-newline-before)\r\n- [block-opening-brace-newline-after](https://github.com/stylelint/stylelint/tree/master/lib/rules/block-opening-brace-newline-after)\r\n- [block-opening-brace-newline-before](https://github.com/stylelint/stylelint/tree/master/lib/rules/block-opening-brace-newline-before)\r\n- [block-opening-brace-space-after](https://github.com/stylelint/stylelint/tree/master/lib/rules/block-opening-brace-space-after)\r\n- [block-opening-brace-space-before](https://github.com/stylelint/stylelint/tree/master/lib/rules/block-opening-brace-space-before)\r\n- [color-hex-case](https://github.com/stylelint/stylelint/tree/master/lib/rules/color-hex-case)\r\n- [color-hex-length](https://github.com/stylelint/stylelint/tree/master/lib/rules/color-hex-length)\r\n- [declaration-block-properties-order](https://github.com/stylelint/stylelint/tree/master/lib/rules/declaration-block-properties-order)\r\n- [declaration-colon-space-after](https://github.com/stylelint/stylelint/tree/master/lib/rules/declaration-colon-space-after)\r\n- [declaration-colon-space-before](https://github.com/stylelint/stylelint/tree/master/lib/rules/declaration-colon-space-before)\r\n- [declaration-empty-line-before](https://github.com/stylelint/stylelint/tree/master/lib/rules/declaration-empty-line-before)\r\n- [indentation](https://github.com/stylelint/stylelint/tree/master/lib/rules/indentation)\r\n- [length-zero-no-unit](https://github.com/stylelint/stylelint/tree/master/lib/rules/length-zero-no-unit)\r\n- [number-leading-zero](https://github.com/stylelint/stylelint/tree/master/lib/rules/number-leading-zero)\r\n- [number-no-trailing-zeros](https://github.com/stylelint/stylelint/tree/master/lib/rules/number-no-trailing-zeros)\r\n- [selector-combinator-space-after](https://github.com/stylelint/stylelint/tree/master/lib/rules/selector-combinator-space-after)\r\n- [selector-combinator-space-before](https://github.com/stylelint/stylelint/tree/master/lib/rules/selector-combinator-space-before)\r\n- [selector-list-comma-newline-after](https://github.com/stylelint/stylelint/tree/master/lib/rules/selector-list-comma-newline-after)\r\n- [selector-list-comma-newline-before](https://github.com/stylelint/stylelint/tree/master/lib/rules/selector-list-comma-newline-before)\r\n- [selector-list-comma-space-after](https://github.com/stylelint/stylelint/tree/master/lib/rules/selector-list-comma-space-after)\r\n- [selector-list-comma-space-before](https://github.com/stylelint/stylelint/tree/master/lib/rules/selector-list-comma-space-before)\r\n- [shorthand-property-no-redundant-values](https://github.com/stylelint/stylelint/tree/master/lib/rules/shorthand-property-no-redundant-values)\r\n- [string-quotes](https://github.com/stylelint/stylelint/tree/master/lib/rules/string-quotes)\r\n\r\nand we can also format from the other stylelint's configration files or packages (e.g. [stylelint-config-standard](https://github.com/stylelint/stylelint-config-standard), [stylelint-config-suitcss](https://github.com/suitcss/stylelint-config-suitcss) and so on) using `extends` property.\r\n\r\n## Default formatting rules (without stylelint config file)\r\n\r\n### Basic\r\n\r\n- 2 spaces indentation\r\n- require 1 space between a simple selector and combinator\r\n- require 1 space between selectors and `{`\r\n- require new line after `{`\r\n- disallow any spaces between property and `:`\r\n- require 1 space between `:` and values\r\n- require new line after declarations\r\n- require `;` in last declaration\r\n- require 1 space between values and `!important`\r\n- disallow any spaces between `!` and `important`\r\n- leave 1 blank line between rules\r\n- leave 1 blank line between rules in atrules\r\n- disallow any blank lines between `@import`\r\n\r\n### for nested selector syntax\r\n\r\n-  leave 1 line between declarations and nested rules\r\n\r\n### SCSS\r\n\r\n- require 1 space between `@mixin` and mixin name\r\n- require 1 space between mixin name and `(`\r\n- require 1 space between `@extend` and base rules\r\n- require 1 space between `@include` and mixin name\r\n- disallow any spaces between `$variable` and `:`\r\n- require 1 space between `:` and name of variable\r\n\r\n## Option projects\r\n\r\n### Editor plugins\r\n\r\n- [sublime-stylefmt](https://github.com/dmnsgn/sublime-stylefmt) by [@dmnsgn](https://github.com/dmnsgn)\r\n- [atom-stylefmt](https://github.com/1000ch/atom-stylefmt) by [@1000ch](https://github.com/1000ch)\r\n- [vim-stylefmt](https://github.com/kewah/vim-stylefmt) by [@kewah](https://github.com/kewah)\r\n- [stylefmt.el](https://github.com/KeenS/stylefmt.el) by [@KeenS](https://github.com/KeenS)\r\n- [vscode-stylefmt](https://github.com/mrmlnc/vscode-stylefmt) by [@mrmlnc](https://github.com/mrmlnc)\r\n\r\n### for Task Runners\r\n\r\n- [gulp-stylefmt](https://github.com/morishitter/gulp-stylefmt)\r\n- [grunt-stylefmt](https://github.com/morishitter/grunt-stylefmt)\r\n- [fly-stylefmt](https://github.com/morishitter/fly-cssfmt)\r\n- [laravel-elixir-stylefmt](https://github.com/appleboy/laravel-elixir-cssfmt) by [@appleboy](https://github.com/appleboy)\r\n- [stylefmt-loader](https://github.com/tomasAlabes/stylefmt-loader) by [@tomasAlabes](https://github.com/tomasAlabes)\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Masaaki Morishita\r\n",
	"maintainers": [
		{
			"name": "dmitriy-lodyanov",
			"email": "dmitriy.lodyanov@gmail.com"
		}
	],
	"time": {
		"modified": "2022-05-18T22:28:54.061Z",
		"created": "2017-08-28T11:28:33.242Z",
		"6.0.1": "2017-08-28T11:28:33.242Z"
	},
	"keywords": [
		"css",
		"format",
		"formatter",
		"code style",
		"beautifier",
		"postcss-plugin",
		"postcss",
		"stylelint"
	],
	"repository": {
		"type": "git",
		"url": "git://github.com/morishitter/stylefmt/git"
	},
	"author": {
		"name": "Masaaki Morishita"
	},
	"license": "MIT",
	"readmeFilename": "README.md",
	"_downloads": 4
}