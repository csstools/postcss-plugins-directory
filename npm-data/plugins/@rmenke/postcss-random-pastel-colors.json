{
	"_id": "@rmenke/postcss-random-pastel-colors",
	"name": "@rmenke/postcss-random-pastel-colors",
	"dist-tags": {
		"latest": "1.0.0"
	},
	"versions": {
		"1.0.0": {
			"name": "@rmenke/postcss-random-pastel-colors",
			"version": "1.0.0",
			"description": "Assign random pastel colors to color properties",
			"main": "index.js",
			"scripts": {
				"test": "node ./test.js"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/romainmenke/postcss-random-pastel-colors.git"
			},
			"keywords": [
				"postcss-plugin",
				"chatgpt",
				"color",
				"random"
			],
			"author": {
				"name": "Romain Menke"
			},
			"license": "MIT",
			"bugs": {
				"url": "https://github.com/romainmenke/postcss-random-pastel-colors/issues"
			},
			"homepage": "https://github.com/romainmenke/postcss-random-pastel-colors#readme",
			"devDependencies": {
				"postcss": "^8.4.20"
			},
			"peerDependencies": {
				"postcss": "^8.0.0"
			},
			"gitHead": "e796a4b471b5e93ba624afa1f1229528f037a4eb",
			"_id": "@rmenke/postcss-random-pastel-colors@1.0.0",
			"_nodeVersion": "19.2.0",
			"_npmVersion": "9.2.0",
			"dist": {
				"integrity": "sha512-oytpaSGlZBMPM6/8bU0u+xJyozI5HjI29cIvKdG48YfCqLr0b8x0FBl390fZ7OjLnmqvFduOuW5hAX+Db9ip/Q==",
				"shasum": "deee62459d92ec1622399757ddc9115273e8c8fa",
				"tarball": "https://registry.npmjs.org/@rmenke/postcss-random-pastel-colors/-/postcss-random-pastel-colors-1.0.0.tgz",
				"fileCount": 3,
				"unpackedSize": 8540,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEQCIB2mSH6vmSMxb3pHyxIP8lyiglkloc0ijyggQijyc+CZAiA7nMG3ZtKS5SjGLY/WBnjRH/XUxE/lMRetmUD0fMmNqw=="
					}
				],
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjmfdgACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmox1A/9Fk2nYJMYIf0oLXtO9QsBjv4YgFgTC5Qv9/gtT+wuh88FMkdW\r\nhs3cefzaAr0CQDsOUPxLi5HWwoSqXAG1J2PW98gyIvFdwpKD0p634qdNYbd2\r\nwL901kLSz5NgsU+XwIM2QiV/Gmm8mRqiZMBf9i2iOk47rB0YuhDcasYepcWE\r\nkQM8FvLF5gms8cbmYclNOtAbWCaQsJOGzxARvmgp6oSnLZVcgKkyXJZObIzG\r\noGpM384/9A8aYexFHTYWU0HiEHx5j2iv57fs0W+vTwtqvbgy1sVLNvXJmmEX\r\nXZ68nzUv5OMY9GJWlBiZTVtLdBH+ADS+jQR53C/Z+4+goLfM+ll2J2t5eJYc\r\nfCExsiDZDH43d4irchQBG0S9Io01tP3MRVN6RXJiOmKil5wZXcmjzmak59Bz\r\n7RZTDi7UJWbfmhcESJKdKKI08zEP79t+qajR2i1VF/M2IhU/+KU6MNiF2iQc\r\nbYyeKVmfcLuVvJpuzjTlG/8d2kyaNLGujndhVoarTPuvgvvTGJTUoLWrrQgh\r\nOhhzkmfXv1OXH0XapYUa2P67hnz+rJSSspFM+3OiQ8x9U99dsU+5oF+lXzhe\r\nHVHq7mEnmnbmNdchQ8RMdMg3Di9klkXK01+jxwQGSGb6Y29yxHJSXvQEasv+\r\nGItgrayWMNW7xfVPe9mrKAf7DLkRaUrh4cA=\r\n=dU1S\r\n-----END PGP SIGNATURE-----\r\n"
			},
			"_npmUser": {
				"name": "romainmenke",
				"email": "romainmenke@gmail.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "romainmenke",
					"email": "romainmenke@gmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-random-pastel-colors_1.0.0_1671034720438_0.10378787870614259"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2022-12-14T16:18:40.357Z",
		"1.0.0": "2022-12-14T16:18:40.558Z",
		"modified": "2022-12-14T16:18:40.752Z"
	},
	"maintainers": [
		{
			"name": "romainmenke",
			"email": "romainmenke@gmail.com"
		}
	],
	"description": "Assign random pastel colors to color properties",
	"homepage": "https://github.com/romainmenke/postcss-random-pastel-colors#readme",
	"keywords": [
		"postcss-plugin",
		"chatgpt",
		"color",
		"random"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/romainmenke/postcss-random-pastel-colors.git"
	},
	"author": {
		"name": "Romain Menke"
	},
	"bugs": {
		"url": "https://github.com/romainmenke/postcss-random-pastel-colors/issues"
	},
	"license": "MIT",
	"readme": "# PostCSS Random Pastel Colors\n\nThis plugin was created with ChatGPT.\nBelow is the conversation that resulted in this plugin.\n\n---------\n\n## Generating a plugin\n\n### Q 1\n\n> Me :\n> Can you help me create a PostCSS plugin to randomize the colors in my CSS files\n\n### A 1\n\n> Sure, I'd be happy to help you create a PostCSS plugin that can randomize the colors in your CSS files. To create a PostCSS plugin, you'll need to use JavaScript to write a function that takes a CSS file as input and returns a modified version of that file with the colors randomized.\n>\n> Here's an example of what the plugin might look like:\n>\n>```js\n> const randomizeColors = postcss.plugin('randomize-colors', () => {\n>   return (css) => {\n>     css.walkDecls((decl) => {\n>       if (decl.value.includes('color')) {\n>         decl.value = randomColor();\n>       }\n>     });\n>   }\n> });\n> \n> function randomColor() {\n>   // Generate a random color and return it\n> }\n>\n>```\n>\n> This plugin uses the `postcss.plugin()` method to create a new PostCSS plugin called `randomize-colors`. The plugin function itself takes a `css` object, which represents the CSS file, and uses the `css.walkDecls()` method to iterate over all of the declarations in the file. For each declaration that includes the word \"color\", the plugin sets the value of the declaration to a random color generated by the `randomColor()` function.\n\n### Q 2\n\n> Me :\n> Can you elaborate on the `randomColor` function? Maybe it should return a random hex color value\n\n### A 2\n\n> Yes, that's a good idea. The `randomColor()` function could generate a random hex color value, which is a six-digit code that represents a specific color. To generate a random hex color value, you could use the following code:\n>\n>```js\n>function randomColor() {\n>  const letters = '0123456789ABCDEF';\n>  let color = '#';\n>  for (let i = 0; i < 6; i++) {\n>    color += letters[Math.floor(Math.random() * 16)];\n>  }\n>  return color;\n>}\n>```\n>\n> This function generates a string of six random letters or numbers, using the `letters` string as a list of possible characters. It then prepends the `#` symbol to the string to create a valid hex color value, and returns the result.\n>\n>For example, a call to `randomColor()` might return `#B73A7D`, `#FBC94E`, or any of the other 16 million possible hex color values.\n\n### Q 3\n\n> Me :\n> Can you change the condition to update the value when `decl.prop` equals `color` but case insensitively.\n\n### A 3\n\n> Sure, you can use the `.toLowerCase()` method to make the check for the word \"color\" case-insensitive. Here's an example of how you could update the `randomizeColors` plugin to do this:\n>\n>```js\n>const randomizeColors = postcss.plugin('randomize-colors', () => {\n>  return (css) => {\n>    css.walkDecls((decl) => {\n>      if (decl.prop.toLowerCase() === 'color') {\n>        decl.value = randomColor();\n>      }\n>    });\n>  }\n>});\n>```\n>\n>In this updated version of the plugin, the `if` statement checks the lowercase version of the `decl.prop` property to see if it equals \"color\". This makes the check case-insensitive, so it will match CSS declarations with the property \"color\" as well as \"Color\", \"COLOR\", etc.\n\n### Q 4\n\n> Me :\n> Can you make the random colors all a bit pastel?\n\n### A 4\n\n> Yes, you can make the random colors generated by the `randomColor()` function all a bit pastel by modifying the function to generate only colors with relatively low saturation and lightness values. To do this, you could use the HSL color model, which represents colors as values for hue, saturation, and lightness, rather than using the RGB or hexadecimal models.\n>\n> Here's an example of how you could modify the `randomColor()` function to generate pastel colors:\n>\n>```js\n>function randomColor() {\n>  const hue = Math.floor(Math.random() * 360);\n>  const saturation = Math.floor(Math.random() * 20) + 20; // 20-40%\n>  const lightness = Math.floor(Math.random() * 20) + 60; // 60-80%\n>  return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n>}\n>\n>```\n>\n> This updated version of the `randomColor()` function generates random hue, saturation, and lightness values, and then combines them into an HSL color value using string interpolation. The hue value is a number between 0 and 360, representing the color's position on the color wheel. The saturation and lightness values are both percentages between 0% and 100%, representing the intensity of the color and its lightness or darkness, respectively.\n>\n>By setting the saturation and lightness values to be within a certain range (in this case, between 20% and 40% for saturation, and between 60% and 80% for lightness), you can ensure that the generated colors are all relatively pale and muted. This will make them look more pastel than if the saturation and lightness values were allowed to be higher or lower.\n\n-------\n\nThe final result :\n\n```js\nconst randomizeColors = postcss.plugin('randomize-colors', () => {\n\treturn (css) => {\n\t\tcss.walkDecls((decl) => {\n\t\t\tif (decl.prop.toLowerCase() === 'color') {\n\t\t\t\tdecl.value = randomColor();\n\t\t\t}\n\t\t});\n\t}\n});\n\nfunction randomColor() {\n\tconst hue = Math.floor(Math.random() * 360);\n\tconst saturation = Math.floor(Math.random() * 20) + 20; // 20-40%\n\tconst lightness = Math.floor(Math.random() * 20) + 60; // 60-80%\n\treturn `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n}\n```\n\n-------\n\n## Fixing the plugin\n\nThis is missing some bits :\n- `postcss` is not defined\n- there is no export\n\nFixing these results in :\n\n```js\nconst postcss = require('postcss')\n\nconst randomizeColors = postcss.plugin('randomize-colors', () => {\n\treturn (css) => {\n\t\tcss.walkDecls((decl) => {\n\t\t\tif (decl.prop.toLowerCase() === 'color') {\n\t\t\t\tdecl.value = randomColor();\n\t\t\t}\n\t\t});\n\t}\n});\n\nrandomizeColors.postcss = true\nmodule.exports = randomizeColors;\n\nfunction randomColor() {\n\tconst hue = Math.floor(Math.random() * 360);\n\tconst saturation = Math.floor(Math.random() * 20) + 20; // 20-40%\n\tconst lightness = Math.floor(Math.random() * 20) + 60; // 60-80%\n\treturn `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n}\n```\n\nUnfortunately we now have a plugin in an older style.\nThis will not work well in the current ecosystem.\n\nIt seems that ChatGPT is mostly trained on the large volume of older PostCSS plugins.\n\nWhen we migrate to PostCSS 8 it looks like this :\n\n```js\nconst creator = () => {\n\treturn {\n\t\tpostcssPlugin: 'randomize-colors',\n\t\tOnce: (root) => {\n\t\t\troot.walkDecls((decl) => {\n\t\t\t\tif (decl.prop.toLowerCase() === 'color') {\n\t\t\t\t\tdecl.value = randomColor();\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t};\n};\n\ncreator.postcss = true;\nmodule.exports = creator;\n\nfunction randomColor() {\n\tconst hue = Math.floor(Math.random() * 360);\n\tconst saturation = Math.floor(Math.random() * 20) + 20; // 20-40%\n\tconst lightness = Math.floor(Math.random() * 20) + 60; // 60-80%\n\treturn `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n}\n```\n\nWhen running the plugin it does this :\n\n```css\n{ color: blue; }\n\n{ color: hsl(310, 22%, 78%); }\n```\n\n```css\n{ color: blue; }\n\n{ color: hsl(126, 39%, 66%); }\n```\n\n```css\n{ color: blue; }\n\n{ color: hsl(162, 27%, 63%); }\n```\n\n## Conclusion\n\nThere is no conclusion here as this wan't scientific research. :D<br>\nI just typed stuff and a program wrote replies.\n",
	"readmeFilename": "README.md"
}