{
	"_id": "@qse/postcss-pxtorem",
	"_rev": "1-2939a48b76500c7a628bd314713026e6",
	"name": "@qse/postcss-pxtorem",
	"dist-tags": {
		"latest": "6.1.0"
	},
	"versions": {
		"6.1.0": {
			"name": "@qse/postcss-pxtorem",
			"description": "A CSS post-processor that converts px to rem.",
			"version": "6.1.0",
			"author": {
				"name": "cuth"
			},
			"license": "MIT",
			"types": "index.d.ts",
			"publishConfig": {
				"registry": "https://registry.npmjs.org/",
				"access": "public"
			},
			"main": "index.js",
			"scripts": {
				"lint": "eslint .",
				"test": "jest",
				"release": "npm publish"
			},
			"devDependencies": {
				"eslint": "^6.8.0",
				"jest": "^28.1.3",
				"postcss": "^8.0.0",
				"prettier": "^1.19.1"
			},
			"keywords": [
				"css",
				"rem",
				"pixel",
				"px",
				"postcss",
				"postcss-plugin"
			],
			"peerDependencies": {
				"postcss": "^8.0.0"
			},
			"_id": "@qse/postcss-pxtorem@6.1.0",
			"_nodeVersion": "16.13.1",
			"_npmVersion": "8.1.2",
			"dist": {
				"integrity": "sha512-w913/VdEKPcqIWaCROsb8toLMUrrLVaiWElYqFi1Y6BfzovqpUpP9kBGOmOTHrxpo6cwq8KukLsHAACXzcTZ1w==",
				"shasum": "d8e314e1893bc58ec267b1fedcaf77396c17515e",
				"tarball": "https://registry.npmjs.org/@qse/postcss-pxtorem/-/postcss-pxtorem-6.1.0.tgz",
				"fileCount": 12,
				"unpackedSize": 19015,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIQDGwcmRARJdpcDsiozrnQx8TkQnZPhfLo2quXSmI9EeLQIgI1DD2HfQboORWRWtHiG1PJAZpO+PfZncj6o1teQh3cw="
					}
				],
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjNPleACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrbhA/+KcMr4y//8N21ZpDu7FLTxZtHhmsQYAueM36pF4L67rjqF8TW\r\nFxD8rQR9XgvD1xY+JecauxlRReDq3wGYt4/Qx+Ru5zBd9dkt3i33TXODv0Ot\r\nh7sG2rvx8NORNh6PkvgQUA6ZDzjj46rr1h4Qq5HviUZW3Je3h2oUCCmAQEIE\r\nqZ0di6ajJFw0NgmEig14NNe/k/1H7VcByR+Zi0P1YFd84jOma/fp7pEk8YuC\r\nZAnrMF77sImBNhqchny7b9U9XmhL4eu5wfV20owwV7og2aLVj7DuC3FDA4Z5\r\nJkk8NyC0GfuRN3miFUwHRnU7FiMIrWiHbZ3AvIkah7R2cTc31yLqUmsAIZ6l\r\noGKmmIbxwT4Ak16HrJqMakmUiyL4qop1rPNJrWmYdsOYviEPzbunGIvafxFN\r\n46X+THCPsVjREeBPFCVCpQq/MWtW2dFEcAFJCnIiHtEV3kAxVyC+K88Lh76T\r\n+jtqlO5byhCGMc2dvimvFguk4VvnWJO+WGtXU60Y0mpntF1LxKAzJXVNO4Z6\r\nsI3/d+8k2CnefrwKib5SmEx1p4n/15AZ7keQgEfoAzIDU+G1hnH4mb0FPMdb\r\n+oMYZntwYS+xWuTOsWTtKQ3lxMtXE75Mr7vTwUhtFtAVhQJ6BAM8jZzsJcsI\r\njPr66Pq/lazZ8a3Mv8mMWXkmU6YQwyuIx0M=\r\n=LU7N\r\n-----END PGP SIGNATURE-----\r\n"
			},
			"_npmUser": {
				"name": "ironkinoko",
				"email": "kinoko_main@outlook.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "ironkinoko",
					"email": "kinoko_main@outlook.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-pxtorem_6.1.0_1664416094739_0.5031931755932515"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2022-09-29T01:48:14.685Z",
		"6.1.0": "2022-09-29T01:48:14.954Z",
		"modified": "2023-03-02T08:02:01.545Z"
	},
	"maintainers": [
		{
			"email": "18368003190@163.com",
			"name": "daniel-glf"
		},
		{
			"email": "kinoko_main@outlook.com",
			"name": "ironkinoko"
		}
	],
	"description": "A CSS post-processor that converts px to rem.",
	"keywords": [
		"css",
		"rem",
		"pixel",
		"px",
		"postcss",
		"postcss-plugin"
	],
	"author": {
		"name": "cuth"
	},
	"license": "MIT",
	"readme": "# postcss-pxtorem [![NPM version](https://badge.fury.io/js/postcss-pxtorem.svg)](http://badge.fury.io/js/postcss-pxtorem)\n\nA plugin for [PostCSS](https://github.com/ai/postcss) that generates rem units from pixel units.\n\n## Install\n\n```shell\n$ npm install postcss postcss-pxtorem --save-dev\n```\n\n## Usage\n\nPixels are the easiest unit to use (*opinion*). The only issue with them is that they don't let browsers change the default font size of 16. This script converts every px value to a rem from the properties you choose to allow the browser to set the font size.\n\n\n### Input/Output\n\n*With the default settings, only font related properties are targeted.*\n\n```css\n// input\nh1 {\n    margin: 0 0 20px;\n    font-size: 32px;\n    line-height: 1.2;\n    letter-spacing: 1px;\n}\n\n// output\nh1 {\n    margin: 0 0 20px;\n    font-size: 2rem;\n    line-height: 1.2;\n    letter-spacing: 0.0625rem;\n}\n```\n\n### Example\n\n```js\nvar fs = require('fs');\nvar postcss = require('postcss');\nvar pxtorem = require('postcss-pxtorem');\nvar css = fs.readFileSync('main.css', 'utf8');\nvar options = {\n    replace: false\n};\nvar processedCss = postcss(pxtorem(options)).process(css).css;\n\nfs.writeFile('main-rem.css', processedCss, function (err) {\n  if (err) {\n    throw err;\n  }\n  console.log('Rem file written.');\n});\n```\n\n### options\n\nType: `Object | Null`  \nDefault:\n```js\n{\n    rootValue: 16,\n    unitPrecision: 5,\n    propList: ['font', 'font-size', 'line-height', 'letter-spacing'],\n    selectorBlackList: [],\n    replace: true,\n    mediaQuery: false,\n    minPixelValue: 0,\n    exclude: /node_modules/i\n}\n```\n\n- `rootValue` (Number | Function) Represents the root element font size or returns the root element font size based on the [`input`](https://api.postcss.org/Input.html) parameter\n- `unitPrecision` (Number) The decimal numbers to allow the REM units to grow to.\n- `propList` (Array) The properties that can change from px to rem.\n    - Values need to be exact matches.\n    - Use wildcard `*` to enable all properties. Example: `['*']`\n    - Use `*` at the start or end of a word. (`['*position*']` will match `background-position-y`)\n    - Use `!` to not match a property. Example: `['*', '!letter-spacing']`\n    - Combine the \"not\" prefix with the other prefixes. Example: `['*', '!font*']`\n- `selectorBlackList` (Array) The selectors to ignore and leave as px.\n    - If value is string, it checks to see if selector contains the string.\n        - `['body']` will match `.body-class`\n    - If value is regexp, it checks to see if the selector matches the regexp.\n        - `[/^body$/]` will match `body` but not `.body`\n- `replace` (Boolean) Replaces rules containing rems instead of adding fallbacks.\n- `mediaQuery` (Boolean) Allow px to be converted in media queries.\n- `minPixelValue` (Number) Set the minimum pixel value to replace.\n- `exclude` (String, Regexp, Function) The file path to ignore and leave as px.\n    - If value is string, it checks to see if file path contains the string.\n        - `'exclude'` will match `\\project\\postcss-pxtorem\\exclude\\path`\n    - If value is regexp, it checks to see if file path matches the regexp.\n        - `/exclude/i` will match `\\project\\postcss-pxtorem\\exclude\\path`\n    - If value is function, you can use exclude function to return a true and the file will be ignored.\n        - the callback will pass the file path as  a parameter, it should returns a Boolean result.\n        - `function (file) { return file.indexOf('exclude') !== -1; }`\n\n### Use with gulp-postcss and autoprefixer\n\n```js\nvar gulp = require('gulp');\nvar postcss = require('gulp-postcss');\nvar autoprefixer = require('autoprefixer');\nvar pxtorem = require('postcss-pxtorem');\n\ngulp.task('css', function () {\n\n    var processors = [\n        autoprefixer({\n            browsers: 'last 1 version'\n        }),\n        pxtorem({\n            replace: false\n        })\n    ];\n\n    return gulp.src(['build/css/**/*.css'])\n        .pipe(postcss(processors))\n        .pipe(gulp.dest('build/css'));\n});\n```\n\n### A message about ignoring properties\nCurrently, the easiest way to have a single property ignored is to use a capital in the pixel unit declaration.\n\n```css\n// `px` is converted to `rem`\n.convert {\n    font-size: 16px; // converted to 1rem\n}\n\n// `Px` or `PX` is ignored by `postcss-pxtorem` but still accepted by browsers\n.ignore {\n    border: 1Px solid; // ignored\n    border-width: 2PX; // ignored\n}\n```\n",
	"readmeFilename": "README.md",
	"_downloads": 11
}