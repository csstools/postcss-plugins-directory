{
	"_id": "@digitalnative/postcss-preset-env",
	"_rev": "3-cff6aa67d8266f3cd8fe1f1ea997f859",
	"name": "@digitalnative/postcss-preset-env",
	"dist-tags": {
		"latest": "0.0.4"
	},
	"versions": {
		"0.0.4": {
			"name": "@digitalnative/postcss-preset-env",
			"version": "0.0.4",
			"description": "Convert modern CSS into something browsers understand",
			"author": {
				"name": "Jonathan Neal",
				"email": "jonathantneal@hotmail.com"
			},
			"license": "CC0-1.0",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/csstools/postcss-preset-env.git"
			},
			"homepage": "https://github.com/csstools/postcss-preset-env#readme",
			"bugs": {
				"url": "https://github.com/csstools/postcss-preset-env/issues"
			},
			"main": "index.js",
			"module": "index.mjs",
			"scripts": {
				"build": "rollup -c .rollup.js --silent",
				"pretest:tape": "npm run build",
				"test": "npm run test:js && npm run test:tape",
				"test:js": "eslint src/*.js src/lib/*.js src/patch/*.js --cache --ignore-path .gitignore --quiet",
				"test:tape": "postcss-tape"
			},
			"engines": {
				"node": ">=6.0.0"
			},
			"dependencies": {
				"autoprefixer": "^9.6.1",
				"browserslist": "^4.6.4",
				"caniuse-lite": "^1.0.30001040",
				"css-blank-pseudo": "^0.1.4",
				"css-has-pseudo": "^0.10.0",
				"css-prefers-color-scheme": "^3.1.1",
				"cssdb": "^4.4.0",
				"postcss": "^8.3.4",
				"postcss-attribute-case-insensitive": "^4.0.1",
				"postcss-color-functional-notation": "^2.0.1",
				"postcss-color-gray": "^5.0.0",
				"postcss-color-hex-alpha": "^5.0.3",
				"postcss-color-mod-function": "^3.0.3",
				"postcss-color-rebeccapurple": "^4.0.1",
				"postcss-custom-media": "^7.0.8",
				"postcss-custom-properties": "^8.0.11",
				"postcss-custom-selectors": "^5.1.2",
				"postcss-dir-pseudo-class": "^5.0.0",
				"postcss-double-position-gradients": "^1.0.0",
				"postcss-env-function": "^2.0.2",
				"postcss-focus-visible": "^4.0.0",
				"postcss-focus-within": "^4.0.0",
				"postcss-font-variant": "^4.0.0",
				"postcss-gap-properties": "^2.0.0",
				"postcss-image-set-function": "^3.0.1",
				"postcss-initial": "^3.0.1",
				"postcss-lab-function": "^2.0.1",
				"postcss-logical": "^3.0.0",
				"postcss-media-minmax": "^4.0.0",
				"postcss-nesting": "^7.0.0",
				"postcss-overflow-shorthand": "^2.0.0",
				"postcss-page-break": "^2.0.0",
				"postcss-place": "^4.0.1",
				"postcss-pseudo-class-any-link": "^6.0.0",
				"postcss-replace-overflow-wrap": "^3.0.0",
				"postcss-selector-matches": "^4.0.0",
				"postcss-selector-not": "^4.0.0"
			},
			"devDependencies": {
				"@babel/core": "^7.5.0",
				"@babel/preset-env": "^7.5.2",
				"babel-eslint": "^10.0.2",
				"eslint": "^5.16.0",
				"eslint-config-dev": "^2.0.0",
				"postcss-simple-vars": "^5.0.2",
				"postcss-tape": "^4.0.0",
				"pre-commit": "^1.2.2",
				"rollup": "^1.16.6",
				"rollup-plugin-babel": "^4.3.3"
			},
			"eslintConfig": {
				"extends": "dev",
				"parser": "babel-eslint"
			},
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"specifications",
				"specs",
				"features",
				"lists",
				"stages",
				"w3c",
				"csswg",
				"future",
				"next"
			],
			"gitHead": "268e8a3d8b827028288d447f72dca96c9dd99b59",
			"_id": "@digitalnative/postcss-preset-env@0.0.4",
			"_nodeVersion": "16.5.0",
			"_npmVersion": "7.19.1",
			"dist": {
				"integrity": "sha512-jjYBdKjwe2kwGDmjBEHHFpIUuV3Lf/Y+x0UVx/CpX+k+4dlByq47HTibd7ZYH0zFK0pF99C01BS2Nb0BCnttPA==",
				"shasum": "3537c85f21cd5884cbddb310082886e424c9bc84",
				"tarball": "https://registry.npmjs.org/@digitalnative/postcss-preset-env/-/postcss-preset-env-0.0.4.tgz",
				"fileCount": 7,
				"unpackedSize": 134579,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh2D+1CRA9TVsSAnZWagAAId8P/3DjlwQj7roQAYnvTgpy\nxwDMKOoG+e3l34MVNgmQ1yK2dAgTjqbF0LUiVoAW18VxTWs8iDPNFs21YSzP\ncIE6ZDCIigmeaEqWg3PcEVD36/psEPKOovDo49SEe+9ZXqODky5kRun5LfZt\nHSOlS9CM+N1zwi7pyEC2uRZ8YcHe270QE4LUVZpClsYTtFNTG4jspPZmfw/W\nWduESIfNHQg3j2aQk47G7iaRlSc7GMtUQBwiTwaSoltrNDPsqOlEPkggfqd3\nYM9KpSqTjDLf6HSXHTg6xrDUkrbefyzJWS4jC828dlG3XRYbckBjO06Q/TsT\nHPB3jWyJ7MQ6zu7XtmQLVuZ5MHLLsD+wsybpJfLKhgL1ikRTieQAC2pHpQh2\n7mj6P1kfzXGAgelXDWuDTKCPWEvxr7uKeyuIswGbJ7Q5avPesRiNDDGVJT/f\nlRsRn1ilt7hA5eMkiZGhKPb2Y4e3GZt0O5UysXvzfK34X9quqdHVBMogu7N0\nuVgbz2K5TT7ZrZYC1vskJFqnnAI3M2eohPrc3f3lSqC8khQC0HcCOlBPWkdL\n6fKgNsrOa9jJEKFwFpGimlIr0wBlspMXK7zva6iv6bVdjC9dcDqVWIM7pBkY\nIuc3iHx1fNPwSEJ7NhM48Hp7JvxmlM8bTUKyhSd7Lu/+FmliAxTtaanwxJkZ\nKtyz\r\n=GJiO\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEQCIARG+5bFvK6VUqxZdQcjRGAoKNTTCllfQmzx1DbC4wqIAiA8IvcuD3saq4l/iPpg9uwEHMu0RVdYNrabIav88y2/3g=="
					}
				]
			},
			"_npmUser": {
				"name": "billjhlee",
				"email": "billjhlee@gmail.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "hskang9",
					"email": "hskang9@gmail.com"
				},
				{
					"name": "billjhlee",
					"email": "billjhlee@gmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-preset-env_0.0.4_1636116276522_0.3186310560302157"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2021-11-05T12:44:36.452Z",
		"0.0.4": "2021-11-05T12:44:36.720Z",
		"modified": "2022-09-10T10:45:39.035Z"
	},
	"maintainers": [
		{
			"email": "hskang9@gmail.com",
			"name": "hskang9"
		}
	],
	"description": "Convert modern CSS into something browsers understand",
	"homepage": "https://github.com/csstools/postcss-preset-env#readme",
	"keywords": [
		"postcss",
		"css",
		"postcss-plugin",
		"specifications",
		"specs",
		"features",
		"lists",
		"stages",
		"w3c",
		"csswg",
		"future",
		"next"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/csstools/postcss-preset-env.git"
	},
	"author": {
		"name": "Jonathan Neal",
		"email": "jonathantneal@hotmail.com"
	},
	"bugs": {
		"url": "https://github.com/csstools/postcss-preset-env/issues"
	},
	"license": "CC0-1.0",
	"readme": "# PostCSS Preset Env [<img src=\"https://postcss.github.io/postcss/logo.svg\" alt=\"PostCSS\" width=\"90\" height=\"90\" align=\"right\">][postcss]\n\n[![NPM Version][npm-img]][npm-url]\n[![Build Status][cli-img]][cli-url]\n[![Support Chat][git-img]][git-url]\n\n[PostCSS Preset Env] lets you convert modern CSS into something most browsers\ncan understand, determining the polyfills you need based on your targeted\nbrowsers or runtime environments.\n\n```bash\nnpm install postcss-preset-env\n```\n\n```pcss\n@custom-media --viewport-medium (width <= 50rem);\n@custom-selector :--heading h1, h2, h3, h4, h5, h6;\n\n:root {\n  --mainColor: #12345678;\n}\n\nbody {\n  color: var(--mainColor);\n  font-family: system-ui;\n  overflow-wrap: break-word;\n}\n\n:--heading {\n  background-image: image-set(url(img/heading.png) 1x, url(img/heading@2x.png) 2x);\n\n  @media (--viewport-medium) {\n    margin-block: 0;\n  }\n}\n\na {\n  color: rgb(0 0 100% / 90%);\n\n  &:hover {\n    color: rebeccapurple;\n  }\n}\n\n/* becomes */\n\n:root {\n  --mainColor: rgba(18, 52, 86, 0.47059);\n}\n\nbody {\n  color: rgba(18, 52, 86, 0.47059);\n  color: var(--mainColor);\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Droid Sans, Helvetica Neue;\n  word-wrap: break-word;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  background-image: url(img/heading.png);\n}\n\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n  h1, h2, h3, h4, h5, h6 {\n    background-image: url(img/heading@2x.png)\n  }\n}\n\n@media (max-width: 50rem) {\n  h1, h2, h3, h4, h5, h6 {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n}\n\na {\n  color: rgba(0, 0, 255, 0.9)\n}\n\na:hover {\n  color: #639;\n}\n```\n\nWithout any configuration options, [PostCSS Preset Env] enables **Stage 2**\nfeatures and supports **all** browsers.\n\n[![Transform with Preset Env][readme-transform-with-preset-env-img]][readme-transform-with-preset-env-url]\n[![Style with Preset Env][readme-style-with-preset-env-img]][readme-style-with-preset-env-url]\n\n## Usage\n\nAdd [PostCSS Preset Env] to your project:\n\n```bash\nnpm install postcss-preset-env --save-dev\n```\n\nUse [PostCSS Preset Env] to process your CSS:\n\n```js\nconst postcssPresetEnv = require('postcss-preset-env');\n\npostcssPresetEnv.process(YOUR_CSS /*, processOptions, pluginOptions */);\n```\n\nOr use it as a [PostCSS] plugin:\n\n```js\nconst postcss = require('postcss');\nconst postcssPresetEnv = require('postcss-preset-env');\n\npostcss([\n  postcssPresetEnv(/* pluginOptions */)\n]).process(YOUR_CSS /*, processOptions */);\n```\n\n[PostCSS Preset Env] runs in all Node environments, with special instructions for:\n\n| [Node](INSTALL.md#node) | [PostCSS CLI](INSTALL.md#postcss-cli) | [Webpack](INSTALL.md#webpack) | [Create React App](INSTALL.md#create-react-app) | [Gulp](INSTALL.md#gulp) | [Grunt](INSTALL.md#grunt) | [Rollup](INSTALL.md#rollup) |\n| --- | --- | --- | --- | --- | --- | --- |\n\n## Options\n\n### stage\n\nThe `stage` option determines which CSS features to polyfill, based upon their\nstability in the process of becoming implemented web standards.\n\n```js\npostcssPresetEnv({ stage: 0 })\n```\n\nThe `stage` can be `0` (experimental) through `4` (stable), or `false`. Setting\n`stage` to `false` will disable every polyfill. Doing this would only be useful\nif you intended to exclusively use the [`features`](#features) option.\n\nWithout any configuration options, [PostCSS Preset Env] enables **Stage 2**\nfeatures.\n\n### features\n\nThe `features` option enables or disables specific polyfills by ID. Passing\n`true` to a specific feature ID will enable its polyfill, while passing `false`\nwill disable it. [List of IDs](https://github.com/csstools/postcss-preset-env/blob/master/src/lib/plugins-by-id.js#L36)\n\n```js\npostcssPresetEnv({\n  /* use stage 3 features + css nesting rules */\n  stage: 3,\n  features: {\n    'nesting-rules': true\n  }\n})\n```\n\nPassing an object to a specific feature ID will both enable and configure it.\n\n```js\npostcssPresetEnv({\n  /* use stage 3 features + css color-mod (warning on unresolved) */\n  stage: 3,\n  features: {\n    'color-mod-function': { unresolved: 'warn' }\n  }\n})\n```\n\nAny polyfills not explicitly enabled or disabled through `features` are\ndetermined by the [`stage`](#stage) option.\n\n### browsers\n\nThe `browsers` option determines which polyfills are required based upon the\nbrowsers you are supporting.\n\n[PostCSS Preset Env] supports any standard [browserslist] configuration, which\ncan be a `.browserslistrc` file, a `browserslist` key in `package.json`, or\n`browserslist` environment variables.\n\nThe `browsers` option should only be used when a standard browserslist\nconfiguration is not available.\n\n```js\npostcssPresetEnv({ browsers: 'last 2 versions' })\n```\n\nIf not valid browserslist configuration is specified, the\n[default browserslist query](https://github.com/browserslist/browserslist#queries)\nwill be used.\n\n### insertBefore / insertAfter\n\nThe `insertBefore` and `insertAfter` keys allow you to insert other PostCSS\nplugins into the chain. This is only useful if you are also using sugary\nPostCSS plugins that must execute before or after certain polyfills.\nBoth `insertBefore` and `insertAfter` support chaining one or multiple plugins.\n\n```js\nimport postcssSimpleVars from 'postcss-simple-vars';\n\npostcssPresetEnv({\n  insertBefore: {\n    'all-property': postcssSimpleVars\n  }\n})\n```\n\n### autoprefixer\n\n[PostCSS Preset Env] includes [autoprefixer] and [`browsers`](#browsers) option\nwill be passed to it automatically.\n\nSpecifying the `autoprefixer` option enables passing\n[additional options](https://github.com/postcss/autoprefixer#options)\ninto [autoprefixer].\n\n```js\npostcssPresetEnv({\n  autoprefixer: { grid: true }\n})\n```\n\nPassing `autoprefixer: false` disables autoprefixer.\n\n### preserve\n\nThe `preserve` option determines whether all plugins should receive a\n`preserve` option, which may preserve or remove otherwise-polyfilled CSS. By\ndefault, this option is not configured.\n\n```js\npostcssPresetEnv({\n  preserve: false // instruct all plugins to omit pre-polyfilled CSS\n});\n```\n\n### importFrom\n\nThe `importFrom` option specifies sources where variables like Custom Media,\nCustom Properties, Custom Selectors, and Environment Variables can be imported\nfrom, which might be CSS, JS, and JSON files, functions, and directly passed\nobjects.\n\n```js\npostcssPresetEnv({\n  /*\n    @custom-media --small-viewport (max-width: 30em);\n    @custom-selector :--heading h1, h2, h3;\n    :root { --color: red; }\n  */\n  importFrom: 'path/to/file.css'\n});\n```\n\nMultiple sources can be passed into this option, and they will be parsed in the\norder they are received. JavaScript files, JSON files, functions, and objects\nwill use different namespaces to import different kinds of variables.\n\n```js\npostcssPresetEnv({\n  importFrom: [\n    /*\n      @custom-media --small-viewport (max-width: 30em);\n      @custom-selector :--heading h1, h2, h3;\n      :root { --color: red; }\n    */\n    'path/to/file.css',\n\n    /* module.exports = {\n      customMedia: { '--small-viewport': '(max-width: 30em)' },\n      customProperties: { '--color': 'red' },\n      customSelectors: { ':--heading': 'h1, h2, h3' },\n      environmentVariables: { '--branding-padding': '20px' }\n    } */\n    'and/then/this.js',\n\n    /* {\n      \"custom-media\": { \"--small-viewport\": \"(max-width: 30em)\" }\n      \"custom-properties\": { \"--color\": \"red\" },\n      \"custom-selectors\": { \":--heading\": \"h1, h2, h3\" },\n      \"environment-variables\": { \"--branding-padding\": \"20px\" }\n    } */\n    'and/then/that.json',\n\n    {\n      customMedia: { '--small-viewport': '(max-width: 30em)' },\n      customProperties: { '--color': 'red' },\n      customSelectors: { ':--heading': 'h1, h2, h3' },\n      environmentVariables: { '--branding-padding': '20px' }\n    },\n    () => {\n      const customMedia = { '--small-viewport': '(max-width: 30em)' };\n      const customProperties = { '--color': 'red' };\n      const customSelectors = { ':--heading': 'h1, h2, h3' };\n      const environmentVariables = { '--branding-padding': '20px' };\n\n      return { customMedia, customProperties, customSelectors, environmentVariables };\n    }\n  ]\n});\n```\n\n### exportTo\n\nThe `exportTo` option specifies destinations where variables like Custom Media,\nCustom Properties, Custom Selectors, and Environment Variables can be exported\nto, which might be CSS, JS, and JSON files, functions, and directly passed\nobjects.\n\n```js\npostcssPresetEnv({\n  /*\n    @custom-media --small-viewport (max-width: 30em);\n    @custom-selector :--heading h1, h2, h3;\n    :root { --color: red; }\n  */\n  exportTo: 'path/to/file.css'\n});\n```\n\nMultiple destinations can be passed into this option as well, and they will be\nparsed in the order they are received. JavaScript files, JSON files, and\nobjects will use different namespaces to import different kinds of variables.\n\n```js\nconst cachedObject = {};\n\npostcssPresetEnv({\n  exportTo: [\n    /*\n      @custom-media --small-viewport (max-width: 30em);\n      @custom-selector :--heading h1, h2, h3;\n      :root { --color: red; }\n    */\n    'path/to/file.css',\n\n    /* module.exports = {\n      customMedia: { '--small-viewport': '(max-width: 30em)' },\n      customProperties: { '--color': 'red' },\n      customSelectors: { ':--heading': 'h1, h2, h3' },\n      environmentVariables: { '--branding-padding': '20px' }\n    } */\n    'and/then/this.js',\n\n    /* {\n      \"custom-media\": { \"--small-viewport\": \"(max-width: 30em)\" }\n      \"custom-properties\": { \"--color\": \"red\" },\n      \"custom-selectors\": { \":--heading\": \"h1, h2, h3\" },\n      \"environment-variables\": { \"--branding-padding\": \"20px\" }\n    } */\n    'and/then/that.json',\n\n    cachedObject,\n    variables => {\n      if ('customProperties' in variables) {\n        // do something special with customProperties\n      }\n\n      Object.assign(cachedObject, variables);\n    }\n  ]\n});\n```\n\n[cli-img]: https://img.shields.io/travis/csstools/postcss-preset-env/master.svg\n[cli-url]: https://travis-ci.org/csstools/postcss-preset-env\n[git-img]: https://img.shields.io/badge/support-chat-blue.svg\n[git-url]: https://gitter.im/postcss/postcss\n[npm-img]: https://img.shields.io/npm/v/postcss-preset-env.svg\n[npm-url]: https://www.npmjs.com/package/postcss-preset-env\n\n[autoprefixer]: https://github.com/postcss/autoprefixer\n[browserslist]: https://github.com/browserslist/browserslist#readme\n[caniuse]: https://caniuse.com/\n[cssdb]: https://cssdb.org/\n[PostCSS]: https://github.com/postcss/postcss\n[PostCSS Preset Env]: https://github.com/csstools/postcss-preset-env\n[readme-style-with-preset-env-img]: https://csstools.github.io/postcss-preset-env/readme-style-with-preset-env.svg\n[readme-style-with-preset-env-url]: https://codepen.io/pen?template=OZRovK\n[readme-transform-with-preset-env-img]: https://csstools.github.io/postcss-preset-env/readme-transform-with-preset-env.svg\n[readme-transform-with-preset-env-url]: https://csstools.github.io/postcss-preset-env/\n",
	"readmeFilename": "README.md",
	"_downloads": 5
}