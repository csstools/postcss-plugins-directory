{
	"_id": "postcss-inline-variables",
	"_rev": "4-bbd2f1a46fcc0c5c9a3f79e5c7148e09",
	"name": "postcss-inline-variables",
	"description": "PostCSS plugin for Sass-like variables with inline defaults",
	"dist-tags": {
		"latest": "1.1.0"
	},
	"versions": {
		"1.0.0": {
			"name": "postcss-inline-variables",
			"version": "1.0.0",
			"description": "PostCSS plugin for Sass-like variables with inline defaults",
			"main": "index.js",
			"scripts": {
				"lint": "eslint --max-warnings 0 index.js",
				"test-with-coverage": "istanbul cover ./node_modules/.bin/_mocha",
				"test": "npm run lint && npm run test-with-coverage"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/nelsonpecora/postcss-inline-variables.git"
			},
			"keywords": [
				"postcss-plugin",
				"sass",
				"variables"
			],
			"author": {
				"name": "Nelson Pecora"
			},
			"license": "MIT",
			"bugs": {
				"url": "https://github.com/nelsonpecora/postcss-inline-variables/issues"
			},
			"homepage": "https://github.com/nelsonpecora/postcss-inline-variables#readme",
			"dependencies": {
				"lodash": "^4.17.4",
				"postcss": "^6.0.2"
			},
			"devDependencies": {
				"chai": "^4.0.2",
				"coveralls": "^2.13.1",
				"eslint": "^4.0.0",
				"istanbul": "^0.4.5",
				"mocha": "^3.4.2",
				"mocha-lcov-reporter": "^1.3.0"
			},
			"gitHead": "0590f5f26190aa15cbee0326e8d605d2f680398e",
			"_id": "postcss-inline-variables@1.0.0",
			"_shasum": "409bd4fd14663a20c57e04bba698943228b29f02",
			"_from": ".",
			"_npmVersion": "3.10.10",
			"_nodeVersion": "6.10.3",
			"_npmUser": {
				"name": "yoshokatana",
				"email": "nelson@keats.me"
			},
			"dist": {
				"shasum": "409bd4fd14663a20c57e04bba698943228b29f02",
				"tarball": "https://registry.npmjs.org/postcss-inline-variables/-/postcss-inline-variables-1.0.0.tgz",
				"integrity": "sha512-avzna/ORQeHYkL4n4vOAIsZVqFAFD/Zt8Y6NnH7YE8lRampLWhyYVvtsSIZYcWxUzBnJ3X/Fb8jSAKgOiTkmww==",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIDbe4WNmxCJoTTg0CgM1a0E36s2xuTblwU6/s3IL9gwsAiEAu6leV30T1P5o2TxKrmYfVpnAJfSt9Wimvl6s8N+PRZs="
					}
				]
			},
			"maintainers": [
				{
					"name": "yoshokatana",
					"email": "nelson@keats.me"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-inline-variables-1.0.0.tgz_1497464066678_0.6953295706771314"
			},
			"directories": {}
		},
		"1.0.1": {
			"name": "postcss-inline-variables",
			"version": "1.0.1",
			"description": "PostCSS plugin for Sass-like variables with inline defaults",
			"main": "index.js",
			"scripts": {
				"lint": "eslint --max-warnings 0 index.js",
				"test-with-coverage": "istanbul cover ./node_modules/.bin/_mocha",
				"test": "npm run lint && npm run test-with-coverage",
				"coveralls": "npm run test-with-coverage -- --report lcovonly && cat ./coverage/lcov.info | coveralls"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/nelsonpecora/postcss-inline-variables.git"
			},
			"keywords": [
				"postcss-plugin",
				"sass",
				"variables"
			],
			"author": {
				"name": "Nelson Pecora"
			},
			"license": "MIT",
			"bugs": {
				"url": "https://github.com/nelsonpecora/postcss-inline-variables/issues"
			},
			"homepage": "https://github.com/nelsonpecora/postcss-inline-variables#readme",
			"dependencies": {
				"lodash": "^4.17.4",
				"postcss": "^6.0.2"
			},
			"devDependencies": {
				"chai": "^4.0.2",
				"coveralls": "^2.13.1",
				"eslint": "^4.0.0",
				"istanbul": "^0.4.5",
				"mocha": "^3.4.2",
				"mocha-lcov-reporter": "^1.3.0"
			},
			"gitHead": "f17eb28926196906a8ce33b40f61d84d1de861e6",
			"_id": "postcss-inline-variables@1.0.1",
			"_shasum": "964d7e618c3e9081405618d1473e357becbe9dea",
			"_from": ".",
			"_npmVersion": "3.10.10",
			"_nodeVersion": "6.10.3",
			"_npmUser": {
				"name": "yoshokatana",
				"email": "nelson@keats.me"
			},
			"dist": {
				"shasum": "964d7e618c3e9081405618d1473e357becbe9dea",
				"tarball": "https://registry.npmjs.org/postcss-inline-variables/-/postcss-inline-variables-1.0.1.tgz",
				"integrity": "sha512-eFbaDjgcrPaTsnl0Q6j5E/UgpBgOiy0bWewpTQ6hIrDDi5LLMAonkSGiU+2uzaDvCCYBplQxdOlyPQ7l/9ONRA==",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIQCjfRrfAdvQQXaN+G6O5MvuM8arTzfP9etpw6PBzDHUfQIgagaKnkLEvNW62RtzrDUyilgr/CC56rYh0JH45Uf/NoI="
					}
				]
			},
			"maintainers": [
				{
					"name": "yoshokatana",
					"email": "nelson@keats.me"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-inline-variables-1.0.1.tgz_1497544470160_0.10496364044956863"
			},
			"directories": {}
		},
		"1.1.0": {
			"name": "postcss-inline-variables",
			"version": "1.1.0",
			"description": "PostCSS plugin for Sass-like variables with inline defaults",
			"main": "index.js",
			"scripts": {
				"lint": "eslint --max-warnings 0 index.js",
				"test-with-coverage": "istanbul cover ./node_modules/.bin/_mocha",
				"test": "npm run lint && npm run test-with-coverage",
				"coveralls": "npm run test-with-coverage -- --report lcovonly && cat ./coverage/lcov.info | coveralls"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/nelsonpecora/postcss-inline-variables.git"
			},
			"keywords": [
				"postcss-plugin",
				"sass",
				"variables"
			],
			"author": {
				"name": "Nelson Pecora"
			},
			"license": "MIT",
			"bugs": {
				"url": "https://github.com/nelsonpecora/postcss-inline-variables/issues"
			},
			"homepage": "https://github.com/nelsonpecora/postcss-inline-variables#readme",
			"dependencies": {
				"lodash": "^4.17.4",
				"postcss": "^6.0.2"
			},
			"devDependencies": {
				"chai": "^4.0.2",
				"coveralls": "^2.13.1",
				"eslint": "^4.0.0",
				"istanbul": "^0.4.5",
				"mocha": "^3.4.2",
				"mocha-lcov-reporter": "^1.3.0"
			},
			"gitHead": "e91cf075a281e2d765165881415bceaab40bf02c",
			"_id": "postcss-inline-variables@1.1.0",
			"_nodeVersion": "12.22.12",
			"_npmVersion": "6.14.16",
			"dist": {
				"integrity": "sha512-F/b/rnu+1MMwxXLjbtKSUJxxHkEun1eSvLFXh0qMmYEr1b4XvTlPFWKPOU/x5P1SbxI3ughAOsqiXJxKSOXrgA==",
				"shasum": "7848c364290214aa6158f44e4bbe8a62f77105aa",
				"tarball": "https://registry.npmjs.org/postcss-inline-variables/-/postcss-inline-variables-1.1.0.tgz",
				"fileCount": 10,
				"unpackedSize": 26308,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIFRPWQKnzCVrhI9aGhsrtZ8HNFRAkFkablDLb5HhKCtYAiEAkdIwD1/QO2g0lBFGtCSEqlGu/EpLk4evphnRHURXAW0="
					}
				],
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjKy3DACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp/xQ//ZUPtYI1j0bogLny7hnFBsV0GPBwvK4E/Zf/SuyEawHRA1W5J\r\nRBuw+4CUrztgOWlLyNZtpOrPaujT+AEQJGJSazFtrwLVkA330Tj3OliWaGua\r\nHGAPuQZ3pFT3TOEnR48qxnFZabLAaU4XLa1n/VUCQmLPsDooR4QmXXmkOUzz\r\n+XR+ggSK3e3AizAIkq6T6aYMcJk9YPT8kqzpmqtdWa1xAmPldeR7fEOPUxq+\r\ng04pn+RrKS948o6BA9ujoQIZbgOBCTMzDcb6AAjw5ouZtd+uXNdumum9hn5p\r\naUr6uFV+657DeHGhIK61S9k5nSOFBnBhlOPseLuql8J3IFJmiRjmt/ZICwzL\r\n/oZ1tw17DbtsuazQx4e+gFgWFOSCe09Ql2yiTx32qMgOmvJPS1Jjoq62SQZt\r\nBeFQgFSDSK0Y4Lvl/HrJsoQbNJwaA2Ow6H3gGPy9oCepQEgbprEiOgnVRGUl\r\n2+DmYQ9QWL6Ee0Hb4j58qyhzNftXmGWtOHZjswJXlLhvdGsoV1xznsNYJqax\r\nhADD38ZX+6a9Oo1VxWLIxBYF4N93CfQfpetZQiTvI32SF2HGnTBRj6Iukabj\r\nHaH29+CSaCC4JxP1VQoKk5k62GbzAxJyNh0AYK9MvxGsSZbWJGgt+0hWt8ol\r\ntQIW1Y0gafMnWZa5LamarXo8Z7ZQk9gvOjk=\r\n=/auD\r\n-----END PGP SIGNATURE-----\r\n"
			},
			"_npmUser": {
				"name": "yoshokatana",
				"email": "nelson@keats.me"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "yoshokatana",
					"email": "nelson@keats.me"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-inline-variables_1.1.0_1663774147103_0.6709814670122289"
			},
			"_hasShrinkwrap": false
		}
	},
	"readme": "# postcss-inline-variables [![Build Status](https://travis-ci.org/nelsonpecora/postcss-inline-variables.svg?branch=master)](https://travis-ci.org/nelsonpecora/postcss-inline-variables) [![Coverage Status](https://coveralls.io/repos/github/nelsonpecora/postcss-inline-variables/badge.svg?branch=master)](https://coveralls.io/github/nelsonpecora/postcss-inline-variables?branch=master)\n\n[PostCSS](https://github.com/postcss/postcss) plugin for Sass-like variables with inline defaults\n\n# Installation\n\n```\nnpm install --save-dev postcss-inline-variables\n```\n\n# Usage\n\nWrite defaults inline or define them at the top of your file:\n\n```css\n$background-color: red !default; /* sass-like syntax, tells variable it may be overwritten */\n\n.title {\n  background-color: $background-color;\n  color: $color or green; /* inline default */\n  flex-flow: [$direction or column] [$wrap or wrap]; /* use [brackets] if there's more than one variable in a rule */\n}\n```\n\nThen define your variables in an object, and pass it in when compiling your styles:\n\n```js\nconst inlineVariables = require('postcss-inline-variables'),\n  myVariables = {\n    'background-color': '#fff',\n    color: '#000'\n    // direction and wrap aren't defined, so the defaults will be used\n  };\n\npostcss([inlineVariables(myVariables)])\n  .process(css)\n  .then((result) => {\n    console.log(result.css); // → styles that use the variables!\n  })\n  .catch((e) => {\n    console.log(e.message); // → throws error with the variable name if it has no default value!\n  });\n```\n\nThe variables you define will be applied to the styles, which will fall back to using their defaults!\n\n```css\n.title {\n  background-color: #fff;\n  color: #000;\n  flex-flow: column wrap;\n}\n```\n\n_Note:_ It might be useful to use [postcss-get-sass-variables](https://github.com/nelsonpecora/postcss-get-sass-variables) to extract them from other css files, if you organize your styleguides purely in css.\n\n# Options\n\n## requirePrefix\n\nBy default, this will error if a variable fallback isn't defined (similar to SASS). If you want to be even more strict, you can make it error if the variable isn't prefixed with the file name / folder name it's in. This is useful when building component-based style systems.\n\nFor example, imagine you have a `components/foo.css` (that styles the `foo` component):\n\n```css\n.title {\n  background-color: $color or #fff; /* will error */\n  color: $foo-color or #000; /* will pass */\n}\n```\n\nThe `$color` variable will throw an error if you set `requirePrefix: 'file'`:\n\n```js\npostcss([inlineVariables(myVariables, { requirePrefix: 'file' })])\n  .process(css)\n  .catch((e) => {\n    console.log(e.message); // → 'No prefix for $color in components/foo.css! Should it be $foo-color?'\n  });\n```\n\nThe same behavior can be used at the folder level, e.g. `components/foo/styles.css`:\n\n```js\npostcss([inlineVariables(myVariables, { requirePrefix: 'folder' })])\n  .process(css)\n  .catch((e) => {\n    console.log(e.message); // → 'No prefix for $color in components/foo/styles.css! Should it be $foo-color?'\n  });\n```\n\nThese errors will suggest variable names, to make it easier to diagnose issues with your styles.\n\n## requireDefault\n\nBesides the inline `$variable or default` definitions, you can use SASS's `!default` syntax to write hoisted variable definitions in your files:\n\n```css\n$color: #000 !default;\n\n.title {\n  color: $color; /* will be #000 if $color isn't passed in */\n}\n```\n\nThis is handy for large css files, but allows you to _overwrite the passed-in variables_ if you don't specify `!default`, e.g. if you simply write `$color: #000`. This maintains the intuitive behavior from SASS, but might be a gotcha for developers who aren't used to it. If you don't want to allow this, use the `requireDefault` option.\n\nFor example, `$color: #000` will throw an error if you set `requireDefault: 'flag'`:\n\n```js\npostcss([inlineVariables(myVariables, { requireDefault: 'flag' })])\n  .process(css)\n  .catch((e) => {\n    console.log(e.message); // → 'No !default flag set for $color!'\n  });\n```\nThis can also be used to disable hoisted variable definitions entirely, requiring developers to write all of their variables inline in the form of `$var or value`:\n\n```js\npostcss([inlineVariables(myVariables, { requireDefault: 'inline' })])\n  .process(css)\n  .catch((e) => {\n    console.log(e.message); // → 'Illegal hoisted variable $color! Use \"$color or value\"'\n  });\n```\n\nAlternatively, you can specify the exact opposite behavior, requiring _all_ variables to be hoisted (and preventing _all_ inline defaults):\n\n```js\npostcss([inlineVariables(myVariables, { requireDefault: 'hoisted' })])\n  .process(css)\n  .catch((e) => {\n    console.log(e.message); // → 'Illegal inline variable $color! Use \"$color: value !default\"'\n  });\n```\n\n# Contributing\n\nThis plugin is in a stable state, and doesn't get updates frequently. If you'd like to add a feature or fix a bug, please make a pull request!\n\nYou can install dependencies with `npm install` once you've cloned the repo, and run tests with `npm test`.\n",
	"maintainers": [
		{
			"name": "yoshokatana",
			"email": "nelson@keats.me"
		}
	],
	"time": {
		"modified": "2022-09-21T15:29:07.413Z",
		"created": "2017-06-14T18:14:27.647Z",
		"1.0.0": "2017-06-14T18:14:27.647Z",
		"1.0.1": "2017-06-15T16:34:31.092Z",
		"1.1.0": "2022-09-21T15:29:07.308Z"
	},
	"homepage": "https://github.com/nelsonpecora/postcss-inline-variables#readme",
	"keywords": [
		"postcss-plugin",
		"sass",
		"variables"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/nelsonpecora/postcss-inline-variables.git"
	},
	"author": {
		"name": "Nelson Pecora"
	},
	"bugs": {
		"url": "https://github.com/nelsonpecora/postcss-inline-variables/issues"
	},
	"license": "MIT",
	"readmeFilename": "README.md",
	"_downloads": 23
}