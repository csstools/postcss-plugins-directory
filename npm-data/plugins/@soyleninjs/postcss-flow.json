{
	"_id": "@soyleninjs/postcss-flow",
	"name": "@soyleninjs/postcss-flow",
	"dist-tags": {
		"latest": "1.0.0"
	},
	"versions": {
		"1.0.0": {
			"name": "@soyleninjs/postcss-flow",
			"version": "1.0.0",
			"description": "PostCSS plugin for creating fluid and responsive CSS values with granular breakpoint control using the flow() function",
			"main": "postcss-flow.min.js",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/soyleninjs/postcss-flow.git"
			},
			"bugs": {
				"url": "https://github.com/soyleninjs/postcss-flow/issues"
			},
			"homepage": "https://github.com/soyleninjs/postcss-flow#readme",
			"keywords": [
				"postcss",
				"postcss-plugin",
				"css",
				"responsive",
				"fluid",
				"clamp",
				"flow",
				"media-queries",
				"breakpoints",
				"fluid-typography",
				"responsive-design",
				"desktop-first",
				"css-variables",
				"interpolation"
			],
			"author": {
				"name": "Lenin",
				"url": "https://github.com/soyleninjs"
			},
			"license": "MIT",
			"engines": {
				"node": ">=12.0.0"
			},
			"peerDependencies": {
				"postcss": ">=8.0.0"
			},
			"_id": "@soyleninjs/postcss-flow@1.0.0",
			"gitHead": "19dc5ca3f519185b92ab69399ee18200a18ac381",
			"_nodeVersion": "22.19.0",
			"_npmVersion": "10.9.3",
			"dist": {
				"integrity": "sha512-kSWWt+H99CNSeEjPvXLCc29/EaINq4KR2n8RYYy5uSMjvV+8GX/ywwak5fhN/TC0P9gd8fYiu8Lp+7XOdRDCkw==",
				"shasum": "3d8aceb8ba2205a1fe0cf90653563f6c6f768610",
				"tarball": "https://registry.npmjs.org/@soyleninjs/postcss-flow/-/postcss-flow-1.0.0.tgz",
				"fileCount": 5,
				"unpackedSize": 16034,
				"signatures": [
					{
						"keyid": "SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U",
						"sig": "MEQCIDd3tUmHpa2srpFty77xoz+s1i1jQQ3avncDltUG+NkeAiAznWAMbcXw9wmmrMkOifFD4GCObnv8iswRm9XXNkQaLg=="
					}
				]
			},
			"_npmUser": {
				"name": "soyleninjs",
				"email": "leninfelix@hotmail.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "soyleninjs",
					"email": "leninfelix@hotmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages-npm-production",
				"tmp": "tmp/postcss-flow_1.0.0_1761582963111_0.9369903379310569"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2025-10-27T16:36:02.980Z",
		"1.0.0": "2025-10-27T16:36:03.290Z",
		"modified": "2025-10-27T16:36:03.616Z"
	},
	"maintainers": [
		{
			"name": "soyleninjs",
			"email": "leninfelix@hotmail.com"
		}
	],
	"description": "PostCSS plugin for creating fluid and responsive CSS values with granular breakpoint control using the flow() function",
	"homepage": "https://github.com/soyleninjs/postcss-flow#readme",
	"keywords": [
		"postcss",
		"postcss-plugin",
		"css",
		"responsive",
		"fluid",
		"clamp",
		"flow",
		"media-queries",
		"breakpoints",
		"fluid-typography",
		"responsive-design",
		"desktop-first",
		"css-variables",
		"interpolation"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/soyleninjs/postcss-flow.git"
	},
	"author": {
		"name": "Lenin",
		"url": "https://github.com/soyleninjs"
	},
	"bugs": {
		"url": "https://github.com/soyleninjs/postcss-flow/issues"
	},
	"license": "MIT",
	"readme": "<div align=\"center\">\n\n# PostCSS Flow\n\n**A PostCSS plugin for creating fluid and responsive CSS values with granular breakpoint control**\n\n[![npm version](https://img.shields.io/npm/v/@soyleninjs/postcss-flow.svg)](https://www.npmjs.com/package/@soyleninjs/postcss-flow)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![PostCSS](https://img.shields.io/badge/PostCSS-8+-red.svg)](https://postcss.org/)\n\n[Features](#-features) • [Installation](#-installation) • [Usage](#-usage) • [Examples](#-examples) • [Contributing](#-contributing)\n\n</div>\n\n---\n\n## What is PostCSS Flow?\n\nPostCSS Flow is a powerful plugin that simplifies responsive design by transforming a simple `flow()` function into fluid CSS values with automatic media queries. Write responsive styles in a single line instead of managing multiple breakpoints manually.\n\n### Before (Traditional CSS)\n```css\n.heading {\n  font-size: clamp(20px, calc(20px + (30 - 20) * ((100vw - 834px) / 606)), 30px);\n}\n@media (width <= 834px) {\n  .heading {\n    font-size: clamp(10px, calc(10px + (20 - 10) * ((100vw - 360px) / 474)), 20px);\n  }\n}\n```\n\n### After (With PostCSS Flow)\n```css\n.heading {\n  font-size: flow(10-360, 20-834, 30-1440);\n}\n```\n\n---\n\n## Features\n\n- **Fluid Values**: Automatically generates `clamp()` functions with linear interpolation\n- **Fixed Values**: Define fixed breakpoints with the `-0` suffix\n- **Desktop First**: Exclusive desktop-first approach with automatic breakpoint sorting\n- **Auto-Sorting**: Breakpoints are automatically ordered from largest to smallest viewport\n- **Auto Media Queries**: Generates necessary media queries using `width <=`\n- **Simple Syntax**: One line instead of multiple declarations and media queries\n- **Zero Dependencies**: Lightweight and efficient\n\n---\n\n## Installation\n\nInstall via npm:\n\n```bash\nnpm install @soyleninjs/postcss-flow --save-dev\n```\n\nOr using yarn:\n\n```bash\nyarn add @soyleninjs/postcss-flow --dev\n```\n\nOr using pnpm:\n\n```bash\npnpm add @soyleninjs/postcss-flow --save-dev\n```\n\n---\n\n## Usage\n\n### 1. Add to PostCSS Config\n\nAdd the plugin to your PostCSS configuration:\n\n**postcss.config.js** (Array syntax)\n```js\nmodule.exports = {\n  plugins: [\n    require('@soyleninjs/postcss-flow'),\n    // other plugins...\n  ]\n}\n```\n\n**postcss.config.js** (Object syntax)\n```js\nmodule.exports = {\n  plugins: {\n    '@soyleninjs/postcss-flow': {},\n    // other plugins...\n  }\n}\n```\n\n### 2. Use in Your CSS\n\n```css\n.element {\n  property: flow(value1-viewport1, value2-viewport2, value3-viewport3);\n}\n```\n\n### 3. Recommended: Combine with postcss-sort-media-queries\n\nFor optimal results, we recommend using PostCSS Flow together with [postcss-sort-media-queries](https://www.npmjs.com/package/postcss-sort-media-queries). This plugin will organize and merge all generated media queries, resulting in cleaner and more optimized CSS output.\n\n**Installation:**\n```bash\nnpm install postcss-sort-media-queries --save-dev\n```\n\n**Configuration:**\n```js\nmodule.exports = {\n  plugins: [\n    require('@soyleninjs/postcss-flow'),\n    require('postcss-sort-media-queries')({\n      sort: 'desktop-first' // Matches PostCSS Flow's approach\n    }),\n    // other plugins...\n  ]\n}\n```\n\n**Note:** While not required, this combination significantly improves your final CSS structure by consolidating media queries and reducing duplication.\n\n---\n\n## Syntax\n\n### Basic Syntax\n\n```\nflow(value-viewport[, value-viewport-isFluid]*)\n```\n\n### Parameters\n\nEach breakpoint is defined with the format:\n\n| Format | Description |\n|--------|-------------|\n| `value-viewport` | Creates a fluid value between breakpoints |\n| `value-viewport-0` | Creates a fixed (non-fluid) value at that breakpoint |\n\n**Parameter details:**\n- **value**: Numeric value (unitless, automatically converted to px)\n- **viewport**: Viewport width in pixels\n- **isFluid** (optional): Omit or use any value except `0` for fluid. Use `0` for fixed.\n\n### Desktop First Approach\n\nThe plugin works exclusively with a **Desktop First** approach, starting from the largest viewport and going down to smaller ones. Breakpoints are automatically sorted to ensure this behavior.\n\n**Important:** The order you write breakpoints doesn't matter - they're automatically sorted from largest to smallest viewport!\n\n---\n\n## Examples\n\n### Example 1: Basic Fluid Values\n\nTransform a single line into fluid typography:\n\n**Input:**\n```css\n.heading {\n  font-size: flow(10-360, 20-834, 30-1440);\n}\n```\n\n**Output:**\n```css\n.heading {\n  font-size: clamp(20px, calc(20px + (30 - 20) * ((100vw - 834px) / 606)), 30px);\n}\n@media (width <= 834px) {\n  .heading {\n    font-size: clamp(10px, calc(10px + (20 - 10) * ((100vw - 360px) / 474)), 20px);\n  }\n}\n```\n\n**What happens:**\n- From 1440px and up: Fluid scaling from 20px to 30px\n- At 834px and below: Fluid scaling from 10px to 20px\n\n---\n\n### Example 2: Combining Fluid and Fixed Values\n\nMix fluid and fixed breakpoints for precise control. Using `-0` makes a breakpoint **fixed (non-fluid)** from that viewport down to the next breakpoint:\n\n**Input:**\n```css\n.container {\n  padding: flow(10-360, 20-834-0, 30-1440);\n}\n```\n\n**Output:**\n```css\n.container {\n  padding: clamp(20px, calc(20px + (30 - 20) * ((100vw - 834px) / 606)), 30px);\n}\n@media (width <= 360px) {\n  .container {\n    padding: 10px;\n  }\n}\n```\n\n**What happens:**\n- From 1440px down to 834px: Fluid scaling from 30px to 20px\n- At 834px (marked with `-0`): The value becomes fixed at 20px\n- From 834px down to 360px: Stays fixed at 20px (no fluid interpolation)\n- At 360px and below: Fixed 10px\n\nThe `-0` suffix prevents fluid interpolation **from that breakpoint downwards**, creating a fixed value zone.\n\n---\n\n### Example 3: Automatic Breakpoint Sorting\n\nDon't worry about the order - write breakpoints in any order you want:\n\n**Input:**\n```css\n.text {\n  font-size: flow(20-834, 10-360, 30-1440);\n}\n```\n\n**Output:**\n```css\n.text {\n  font-size: clamp(20px, calc(20px + (30 - 20) * ((100vw - 834px) / 606)), 30px);\n}\n@media (width <= 834px) {\n  .text {\n    font-size: clamp(10px, calc(10px + (20 - 10) * ((100vw - 360px) / 474)), 20px);\n  }\n}\n```\n\nThe plugin automatically sorts: `30-1440` → `20-834` → `10-360`\n\n---\n\n### Example 4: Fluid Margins\n\n**Input:**\n```css\n.section {\n  margin-bottom: flow(20-375, 40-768, 80-1920);\n}\n```\n\n**Output:**\n```css\n.section {\n  margin-bottom: clamp(40px, calc(40px + (80 - 40) * ((100vw - 768px) / 1152)), 80px);\n}\n@media (width <= 768px) {\n  .section {\n    margin-bottom: clamp(20px, calc(20px + (40 - 20) * ((100vw - 375px) / 393)), 40px);\n  }\n}\n```\n\n---\n\n### Example 5: Multiple Properties\n\nUse `flow()` on any CSS property that accepts pixel values:\n\n**Input:**\n```css\n.card {\n  padding: flow(16-360, 24-768, 32-1440);\n  gap: flow(8-360, 16-768, 24-1440);\n  border-radius: flow(4-360, 8-768, 12-1440);\n}\n```\n\nEach property gets its own fluid calculations and media queries!\n\n---\n\n## Use Cases\n\nPerfect for:\n\n- **Fluid Typography**: Scale font sizes smoothly across devices\n- **Responsive Spacing**: Padding, margins, and gaps that adapt naturally\n- **Adaptive Layouts**: Grid gaps, container widths, and more\n- **Design Systems**: Maintain consistent scaling across breakpoints\n- **Performance**: Uses native CSS `clamp()` for optimal rendering\n\n---\n\n## Browser Compatibility\n\n- **PostCSS**: 8.0.0 or higher\n- **Browsers**: All modern browsers with `clamp()` support\n  - Chrome 79+\n  - Firefox 75+\n  - Safari 13.1+\n  - Edge 79+\n\nFor older browser support, consider using a CSS `clamp()` polyfill.\n\n---\n\n## How It Works\n\n1. **Parse**: The plugin detects `flow()` functions in your CSS\n2. **Sort**: Breakpoints are automatically sorted from largest to smallest viewport\n3. **Calculate**: Linear interpolation formulas are generated for fluid values\n4. **Generate**: CSS `clamp()` functions and media queries are created\n5. **Output**: Clean, production-ready CSS\n\n---\n\n## Contributing\n\nContributions are welcome! Here's how you can help:\n\n### Reporting Issues\n\nFound a bug or have a feature request?\n\n1. Check existing [issues](https://github.com/soyleninjs/postcss-flow/issues)\n2. Create a new issue with:\n   - Clear description\n   - Steps to reproduce (for bugs)\n   - Expected vs actual behavior\n   - Code examples\n\n### Pull Requests\n\n1. Fork the repository\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\n3. Make your changes\n4. Test thoroughly\n5. Commit: `git commit -m 'Add amazing feature'`\n6. Push: `git push origin feature/amazing-feature`\n7. Open a Pull Request\n\n---\n\n## FAQ\n\n**Q: Can I use rem or em units?**\nA: Currently, the plugin works with px values only. Unit conversion may be added in future versions.\n\n**Q: Does it work with CSS variables?**\nA: The `flow()` function requires numeric values. CSS variables are not supported within the function.\n\n**Q: Can I use negative values?**\nA: Yes! Negative values work perfectly for margins and transforms.\n\n**Q: Is there a maximum number of breakpoints?**\nA: No hard limit, but 3-4 breakpoints is recommended for maintainability.\n\n---\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n---\n\n## Author\n\n**Lenin**\n- GitHub: [@soyleninjs](https://github.com/soyleninjs)\n\n---\n\n## Acknowledgments\n\nInspired by the need for simpler responsive design workflows and the power of modern CSS functions.\n\nIf this plugin helps you, consider giving it a star on [GitHub](https://github.com/soyleninjs/postcss-flow)!\n\n---\n\n<div align=\"center\">\n\n**Made with by [@soyleninjs](https://github.com/soyleninjs)**\n\n[Report Bug](https://github.com/soyleninjs/postcss-flow/issues) • [Request Feature](https://github.com/soyleninjs/postcss-flow/issues)\n\n</div>\n\n",
	"readmeFilename": "README.md",
	"_rev": "1-50b133969e1c2898b44e876f12ba9d4b",
	"_downloads": 78
}