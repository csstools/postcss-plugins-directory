{
	"_id": "postcss-customprop-validate",
	"_rev": "2-858e74346edcbad53e668ca805edeaae",
	"name": "postcss-customprop-validate",
	"dist-tags": {
		"latest": "1.0.0"
	},
	"versions": {
		"1.0.0": {
			"name": "postcss-customprop-validate",
			"version": "1.0.0",
			"description": "PostCSS plugin to validate fallback values of CSS custom properties",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"variables",
				"custom properties"
			],
			"scripts": {
				"test": "jest --coverage && eslint .",
				"publish": "clean-publish"
			},
			"author": {
				"name": "abhinavpreetu",
				"email": "abhinavpreetu@gmail.com"
			},
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "https://github.com/gojek/postcss-customprop-validate"
			},
			"engines": {
				"node": ">=10.0.0"
			},
			"peerDependencies": {
				"postcss": "^8.2.8"
			},
			"devDependencies": {
				"clean-publish": "^2.2.0",
				"eslint": "^7.21.0",
				"eslint-plugin-jest": "^24.2.1",
				"jest": "^26.6.3",
				"lint-staged": "^10.5.4",
				"postcss": "^8.2.8",
				"simple-git-hooks": "^2.0.2"
			},
			"dependencies": {
				"css-tree": "^1.1.3"
			},
			"simple-git-hooks": {
				"pre-commit": "npx lint-staged"
			},
			"lint-staged": {
				"*.js": "eslint --fix"
			},
			"eslintConfig": {
				"parserOptions": {
					"ecmaVersion": 2017
				},
				"env": {
					"node": true,
					"es6": true
				},
				"extends": [
					"eslint:recommended",
					"plugin:jest/recommended"
				],
				"rules": {
					"jest/expect-expect": "off"
				}
			},
			"jest": {
				"testEnvironment": "node",
				"coverageThreshold": {
					"global": {
						"statements": 100
					}
				}
			},
			"clean-publish": {
				"packageManager": "yarn"
			},
			"licenseText": "The MIT License (MIT)\n\nCopyright 2021 abhinavpreetu <abhinavpreetu@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
			"_id": "postcss-customprop-validate@1.0.0",
			"dist": {
				"shasum": "15c1e16ae6e79694e365bdc425494cd366d524f9",
				"integrity": "sha512-9dDelgPTBV/7Ln4Yr1FX6Uywh4e2VtP4Bn9btVl1xyfH9OdVaxs81bdE7BAYVocVt20o9EZ4P0ze+ebjuTwv/w==",
				"tarball": "https://registry.npmjs.org/postcss-customprop-validate/-/postcss-customprop-validate-1.0.0.tgz",
				"fileCount": 11,
				"unpackedSize": 12590,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgq1g5CRA9TVsSAnZWagAA6EcP/3PUYNwl8rlD4srFCvLF\nYGB4c2kml79yy2ZispG3IfNcVx0Rc5MoRJmUMTC3vSVUtTwqYM297UhAwNq/\nHyudwM/PzfcHeGdwDH1fhXnn8OntF8Xufpcie0zg1g9xpDRQNtv8xUnLdPeu\nXYsU0dvEQ7U+wug8ABGGa8ZoNtWjhFa242Bh7yDjOD/MReG06HG29Da3JpEQ\n0Mqh/gfHSvfOzXUttdm5O0+gL5eZqSAIUi2H1w/vnVJNGejbUHRmGzyVlYZR\n/v94FkBLPjmtzNVlzHsHX7wjaAt+TNI7NnPThULUqyRpHnZ8ulYaRqPTgcKK\ntaYMrNKCHut6Z7AwXrm3KYescphXOLu2XO7FxGzLuh38falGvkAxB217IIuL\nTVEksHdkeKaGOyriTQIyTl+2WVyP5Hr8P1siT7hZ1uDSY8c20nswl4abmn53\n2tNI73L2ksfiD+LYz0fec+qNb3Hoa4p6SrFI7nKyUYUNqC7eDfDyXWhKpnBU\n23LJYMaV10NOmT/9Pd0v1mBgCrkbpu/ydxR7UYdkiITpBv7Hv5+7T0ws6R/+\n7rG8AJiypjUkwYgf4TTZIJTtLA8IuteG/YJRHB+1TeuJXynSrFlJyykxp+Mr\n20uj7M8rRsL0fDmYfJ8HgkkYseOyJpf+btwPjSgB5/TupYHzi23NQeh7Y+Gb\nn0Mt\r\n=XTHu\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEQCIDvu1tO2GA/VtUnsZGqpR6aotq41nT5BPoWPLiAapqlJAiANYSdD//Jngh3M4QVvbE3/nqa5UhQSJqS+TbwudWSi/g=="
					}
				]
			},
			"_npmUser": {
				"name": "abhinav.preetu",
				"email": "abhinavpreetu@gmail.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "abhinav.preetu",
					"email": "abhinavpreetu@gmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-customprop-validate_1.0.0_1621841976999_0.79591371121261"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2021-05-24T07:39:36.999Z",
		"1.0.0": "2021-05-24T07:39:37.111Z",
		"modified": "2022-05-13T06:12:20.250Z"
	},
	"maintainers": [
		{
			"email": "debjeet12@gmail.com",
			"name": "detj"
		},
		{
			"email": "abhinavpreetu@gmail.com",
			"name": "abhinav.preetu"
		}
	],
	"description": "PostCSS plugin to validate fallback values of CSS custom properties",
	"keywords": [
		"postcss",
		"css",
		"postcss-plugin",
		"variables",
		"custom properties"
	],
	"repository": {
		"type": "git",
		"url": "https://github.com/gojek/postcss-customprop-validate"
	},
	"author": {
		"name": "abhinavpreetu",
		"email": "abhinavpreetu@gmail.com"
	},
	"license": "MIT",
	"readme": "# PostCSS Customprop Validate [![Build](https://img.shields.io/github/workflow/status/gojek/postcss-customprop-validate/Test)](https://github.com/gojek/postcss-customprop-validate/actions/workflows/test.yml)\n\n[PostCSS] plugin to validate [fallback values] of CSS custom properties.\n\nValidating the fallback values of CSS custom properties manually can be error prone and challening, specially if there are many.\n\nThis plugin validates the CSS and returns custom properties with incorrect fallback values. It can also modify the source CSS file with the updated values.\n\n## Usage\n\n```js\nconst postcss = require(\"postcss\");\nconst plugin = require(\"postcss-customprop-validate\");\nconst { readFileSync } = require(\"fs\");\n\nconst cssPath = \"./sample.css\";\nconst css = readFileSync(cssPath, \"utf-8\");\n/*\n{\n  font-size: 1rem;\n  color: var(--color-red, #fa0000);\n}\n*/\n\nconst properties = {\n  \"--color-red\": \"#ff0000\",\n};\n\nconst callback = (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(data);\n};\n\npostcss([\n  plugin({\n    properties,\n    write: false,\n    callback,\n  }),\n])\n  .process(css, { from: cssPath })\n  .then((result) => {\n    console.log(result.wrongProps);\n    /*\n     [\n       {\n         path: \"./sample.js\",\n         line: 3,\n         key: \"--color-red\",\n         current: \"#fa0000\",\n         expected: \"#ff0000\"\n       }\n     ]\n    */\n  });\n```\n\nSee [PostCSS] docs for examples for your environment.\n\n## Options\n\nThe plugin accepts an object containing 3 properties:\n\n### **`properties`**\n\nRequired: `true`\n\nAn object containg key and expected fallback values of custom properties. The plugin uses it as the source of truth to validate the CSS.\n\nExample:\n\n```json\n{\n  \"--border-radius\": \"4px\",\n  \"--color-red\": \"#ff0000\",\n  \"--danger-border\":\n    \"var(--border-radius, 4px) solid var(--color-red, #ff0000)\",\n};\n```\n\n### **`write`**\n\nDefault: `false`\n\nModifies the source CSS file with the correct fallback values.\n\n#### Formatting\n\nThe plugin does not preserves the code formatting. If you use a code formatter like [prettier], you may need to re-run it after the plugin modifies the source file.\n\n### **`callback`**\n\nDefault: `() => {}`\n\nCallback to handle the output of the plugin. The plugin invokes the callback after it processes the CSS of each file. The callback accepts 2 arguments. The first argument is an error object. The second argument is an array of objects. Each object represents an incorrect fallback value having the following shape:\n\n- `path` - absolute path of the CSS file\n- `line` - line number containing the custom property\n- `key` - key of the custom property\n- `current` - current fallback value\n- `expected` - expected fallback value\n\nThe second argument is also available in the plugin's result as `result.wrongProps`\n\n## Example\n\nA sample CSS:\n\n```css\n.foo {\n  border: var(\n    --danger-border,\n    var(--border-radius, 5px) solid var(--color-red, #fa0000)\n  );\n}\n\n.bar {\n  --danger-text: var(--color-red, red);\n  color: var(--danger-text);\n}\n```\n\nThe resultant CSS that the plugin produces:\n\n```diff\n.foo {\n  border: var(\n    --danger-border,\n-    var(--border-radius, 5px) solid var(--color-red, #fa0000)\n+    var(--border-radius, 4px) solid var(--color-red, #ff0000)\n  );\n}\n\n.bar {\n-  --danger-text: var(--color-red, red);\n+  --danger-text: var(--color-red, #ff0000);\n  color: var(--danger-text);\n}\n```\n\nCustom properties with incorrect fallback values:\n\n```js\n[\n  {\n    path: undefined,\n    line: 2,\n    key: \"--danger-border\",\n    current: \"var(--border-radius, 5px) solid var(--color-red, #fa0000)\",\n    expected: \"var(--border-radius, 4px) solid var(--color-red, #ff0000)\",\n  },\n  {\n    path: undefined,\n    line: 9,\n    key: \"--color-red\",\n    current: \"red\",\n    expected: \"#ff0000\",\n  },\n];\n```\n\n[postcss]: https://github.com/postcss/postcss\n[fallback values]: https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties#custom_property_fallback_values\n[prettier]: https://github.com/prettier/prettier\n[options]: #options\n[response]: #response\n[official docs]: https://github.com/postcss/postcss#usage\n",
	"readmeFilename": "README.md",
	"_downloads": 1
}