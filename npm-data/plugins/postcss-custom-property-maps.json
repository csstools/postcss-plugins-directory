{
	"_id": "postcss-custom-property-maps",
	"_rev": "1-b1780c24e8933bb67e9d61d20c481946",
	"name": "postcss-custom-property-maps",
	"dist-tags": {
		"latest": "1.0.0"
	},
	"versions": {
		"1.0.0": {
			"name": "postcss-custom-property-maps",
			"version": "1.0.0",
			"description": "Interlope external value maps with css as custom properties.",
			"keywords": [
				"css",
				"custom",
				"json",
				"map",
				"postcss",
				"postcss-plugin",
				"properties",
				"variables",
				"yaml"
			],
			"homepage": "https://github.com/RedHatter/postcss-custom-property-maps",
			"bugs": {
				"url": "https://github.com/RedHatter/postcss-custom-property-maps/issues"
			},
			"repository": {
				"type": "git",
				"url": "git://github.com/RedHatter/postcss-custom-property-maps.git"
			},
			"license": "MIT",
			"author": {
				"name": "RedHatter",
				"url": "https://github.com/RedHatter"
			},
			"main": "index.js",
			"module": "src/index.js",
			"scripts": {
				"build": "babel ./src -d dist",
				"coverage": "nyc report --reporter=text-lcov | coveralls",
				"lint": "eslint ./src ./test",
				"prepare": "yarn build",
				"test": "nyc ava ./test/*.js"
			},
			"dependencies": {
				"js-yaml": "^3.12.0",
				"postcss": "^7.0.6",
				"reduce-function-call": "^1.0.2",
				"tiny-glob": "^0.2.4"
			},
			"devDependencies": {
				"@babel/cli": "^7.1.5",
				"@babel/core": "^7.1.6",
				"@babel/preset-env": "^7.1.6",
				"@babel/register": "^7.0.0",
				"ava": "^1.0.0-rc.2",
				"babel-eslint": "^10.0.1",
				"babel-plugin-dynamic-import-node": "^2.2.0",
				"coveralls": "^3.0.2",
				"eslint": "^5.9.0",
				"eslint-config-standard": "^12.0.0",
				"eslint-plugin-import": "^2.14.0",
				"eslint-plugin-node": "^8.0.0",
				"eslint-plugin-promise": "^4.0.1",
				"eslint-plugin-standard": "^4.0.0",
				"nyc": "^13.1.0",
				"prettier": "^1.15.2"
			},
			"engines": {
				"node": ">=8.10"
			},
			"ava": {
				"require": [
					"@babel/register"
				]
			},
			"licenseText": "Copyright (c) 2018 [these people](https://github.com/RedHatter/postcss-custom-property-maps/graphs/contributors)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
			"_id": "postcss-custom-property-maps@1.0.0",
			"dist": {
				"shasum": "51ed04131c698b057d26451323495c690b868dc9",
				"integrity": "sha512-SOkPMM8m7SMHX+nzUNlzTi1HbX+36+Ai03StWdN2xRs6gZf6MIJxORU+eqiI7BsR01spVCKDbfBORxY1vmhVfA==",
				"tarball": "https://registry.npmjs.org/postcss-custom-property-maps/-/postcss-custom-property-maps-1.0.0.tgz",
				"fileCount": 9,
				"unpackedSize": 18448,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcBHjeCRA9TVsSAnZWagAAN9AP/iDLzC9gjTCNf+bONAbx\nOiUnwlG4NccPUO1r7qEXj8TPRRGgKUkvUQ+ndPa9a6dGeGgVShYMYnZ+sOrq\n9PfYmq/dSyBaQTrCWqRKRUW4tGDbqO++3TZUVW+ae0eqTuj2GkUbbQBACEak\nRD4flIWHjas+s0T1OElz9f6b/QXxwjPeWg61K86yqJV+G64tm8TMnxP6O/38\n1v/sV3NRBxzpL1pkarDBZP9IlTQq1dcMlJ5/AK0x1mCWvIPbb5/xPb/frSIF\n9GiQIZfqYRFv17fPnkA6JPjQpSODxr753E50X2xFqkWYntZTgf/2lsW53kv2\niFBvFlAljx+inAjAjRgZ2pETWwxF8R/maK08EqkhyAqGodCaLT7SNZO8x4UF\nsA3hF7iCagJRB/GC+7dOHQ2p/n+jWjObucSK3MS9oAsuhV1gm9x2Ke57OHSw\nrjIiko4gQQh/0v9p7b8zeUu5s2q2Un6kKEPto/ky+EoUPfpL+js3bKhSc4dC\nCTu2UAzUr6LHa4O5u15VojRO3kh4fejWMdKDlOv3UKhDIGXWhNYBj71QN8jY\nTaFIasl0gnxz7tLgDnG/iaoTSJvVK3OqjN/dViX2iAmfmb34AgS5qVwqeUl+\nAxgbfEHwZDrL0sqbw6HZah5N/778in8ga3lc2Uac0xVWIYYEnc7ddgC5VxWv\nxYii\r\n=y2PS\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEYCIQCiLEFhiy79uTCYT4zU9P4tIYypR0QtjVNKdzZPvIJnVQIhAP9u097+Z3uTXxHCzgyjtdQAqvrm/Hq+Ty7VA2Gi/Y/s"
					}
				]
			},
			"maintainers": [
				{
					"name": "redhatter",
					"email": "timothy@idioticdev.com"
				}
			],
			"_npmUser": {
				"name": "redhatter",
				"email": "timothy@idioticdev.com"
			},
			"directories": {},
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-custom-property-maps_1.0.0_1543796957442_0.3222341919853733"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2018-12-03T00:29:17.442Z",
		"1.0.0": "2018-12-03T00:29:17.594Z",
		"modified": "2022-05-13T06:12:03.448Z"
	},
	"maintainers": [
		{
			"name": "redhatter",
			"email": "timothy@idioticdev.com"
		}
	],
	"description": "Interlope external value maps with css as custom properties.",
	"homepage": "https://github.com/RedHatter/postcss-custom-property-maps",
	"keywords": [
		"css",
		"custom",
		"json",
		"map",
		"postcss",
		"postcss-plugin",
		"properties",
		"variables",
		"yaml"
	],
	"repository": {
		"type": "git",
		"url": "git://github.com/RedHatter/postcss-custom-property-maps.git"
	},
	"author": {
		"name": "RedHatter",
		"url": "https://github.com/RedHatter"
	},
	"bugs": {
		"url": "https://github.com/RedHatter/postcss-custom-property-maps/issues"
	},
	"license": "MIT",
	"readme": "# postcss-custom-property-maps\n\n[![npm version][npm-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n[![License][license-image]][license-url]\n\nInterlope external value maps with css as custom properties. Supports Javascript module, YAML file, or JSON file. Use before [postcss-custom-properties] to insert the map values directly into the css.\n\n## Installation\n\n```\nnpm install postcss-custom-property-maps --save-dev\n```\n\nor\n\n```\nyarn add postcss-custom-property-maps --save-dev\n```\n\n## Usage\n\n```js\nconst fs = require('fs');\nconst postcss = require('postcss');\nconst map = require('postcss-custom-property-maps');\n\nlet input = fs.readFileSync('input.css', 'utf8');\n\nlet opts = {\n  basePath: 'css',\n  maps: ['example.js', 'breakpoints.yml', 'fonts.json'],\n};\n\npostcss()\n  .use(map(opts))\n  .process(input)\n  .then(result =>\n    fs.writeFileSync('output.css', result.css);\n  );\n```\n\n## Options\n\n### basePath\n\ntype: `String`  \ndefault: `process.cwd`  \nDirectory to resolve map paths against.\n\n### includeUnused\n\ntype: `boolean`  \ndefault: `false`  \nIf true generate custom properties for _all_ map variables. Otherwise only generate custom properties for used variables.\n\n### maps\n\ntype: `Array`  \ndefault: `[]`  \nAn array representing maps files to load and parse.\nMap files can be YAML, JSON, or Javascript.  \nYou can also pass literal objects directly into the Array.\n\n### defaultMap (short syntax)\n\ntype: `string`  \ndefault: `config`\n\nA map to resolve values against if another map is not found. This allows a shorter syntax where you can leave off the map name.\n\nFor Example\n\n```js\nlet opts = {\n  defaultMap: 'values'\n  maps: ['colors.yml', 'values.yml']\n};\n```\n\nmaps:\n\n```yaml\n# colors.yml\nmain: 'red'\n```\n\n```yaml\n# values.yml\nfoo: 'foo value'\n```\n\ninput:\n\n```css\n.short {\n  content: map(foo); /* Resolves against 'values.yml' */\n  color: map(colors, main); /* Resolves against 'colors.yml' */\n}\n```\n\noutput:\n\n```css\n:root {\n  --values-foo: 'foo value';\n  --colors-main: 'red';\n}\n\n.short {\n  content: var(--values-foo);\n  color: var(--colors-main);\n}\n```\n\nIf you only have a single map all values will automatically resolve against it.\n\n### Example usage\n\n#### declaration values\n\nmaps:\n\n```yaml\n# colors.yml\nred: '#FF0000'\n```\n\n```yaml\n# example.yml\nfoo:\n  bar:\n    baz: 'yeah!'\n\nmain-color: map(colors, red)\n```\n\ninput:\n\n```css\n.baz {\n  content: map(example, foo, bar, baz);\n  color: map(example, main-color);\n}\n```\n\noutput:\n\n```css\n:root {\n  --colors-red: #ff0000;\n  --example-main-color: var(--colors-red);\n  --example-foo-bar-baz: yeah!;\n}\n\n.baz {\n  content: var(--example-foo-bar-baz);\n  color: var(--example-main-color);\n}\n```\n\n#### With `postcss-custom-properties`\n\n```js\nconst fs = require('fs');\nconst postcss = require('postcss');\nconst map = require('postcss-custom-property-maps');\nconst customProperties = require('postcss-custom-properties');\n\nlet input = fs.readFileSync('input.css', 'utf8');\n\npostcss()\n  .use(\n    map({\n      maps: ['example.yml'],\n    })\n  )\n  .use(customProperties())\n  .process(input)\n  .then(result =>\n    fs.writeFileSync('output.css', result.css);\n  );\n```\n\nmaps:\n\n```yaml\n# example.yml\nfoo: yeah!\n```\n\ninput:\n\n```css\n.baz {\n  content: map(example, foo);\n}\n```\n\noutput:\n\n```css\n.baz {\n  content: yeah!;\n}\n```\n\n#### Javascript module\n\nmaps:\n\n```js\n// example.js\nmodule.exports = {\n  foo: 'yeah!',\n};\n```\n\ninput:\n\n```css\n.baz {\n  content: map(example, foo);\n}\n```\n\noutput:\n\n```css\n:root {\n  --example-foo: yeah!;\n}\n\n.baz {\n  content: var(--example-foo);\n}\n```\n\n#### At-rule parameters\n\nmap:\n\n```yaml\n# breakpoints.yml\nsmall: 320px\nmedium: 321px\nlarge: 800px\n```\n\ninput:\n\n```css\n@media (min-width: map(breakpoints, medium)) {\n  .test {\n    width: 100%;\n  }\n}\n```\n\noutput:\n\n```css\n:root {\n  --breakpoints-medium: 321px;\n}\n\n@media (min-width: var(--breakpoints-medium)) {\n  .test {\n    width: 100%;\n  }\n}\n```\n\n#### Declaration blocks\n\nmap:\n\n```yaml\n# fonts.yml\nregular:\n  font-family: \"'Spinnaker Regular', sans-serif\"\n  font-weight: 'normal'\n  font-feature-settings: \"'onum', 'kern', 'liga', 'dlig', 'clig'\"\n  font-kerning: 'normal'\nbold:\n  font-family: \"'Spinnaker Bold', sans-serif\"\n  font-weight: 'normal'\n  font-feature-settings: \"'onum', 'kern', 'liga', 'dlig', 'clig'\"\n  font-kerning: 'normal'\n```\n\ninput:\n\n```css\n.whatever {\n  @map fonts regular;\n}\n```\n\noutput:\n\n```css\n:root {\n  --fonts-regular-font-family: 'Spinnaker Regular', sans-serif;\n  --fonts-regular-font-weight: normal;\n  --fonts-regular-font-feature-settings: 'onum', 'kern', 'liga', 'dlig', 'clig';\n  --fonts-regular-font-kerning: normal;\n}\n\n.whatever {\n  font-family: var(--fonts-regular-font-family);\n  font-weight: var(--fonts-regular-font-weight);\n  font-feature-settings: var(--fonts-regular-font-feature-settings);\n  font-kerning: var(--fonts-regular-font-kerning);\n}\n```\n\n#### Literal objects\n\n```js\nconst fs = require('fs');\nconst postcss = require('postcss');\nconst map = require('postcss-custom-property-maps');\n\nlet input = fs.readFileSync('input.css', 'utf8');\n\nlet opts = {\n  basePath: 'css',\n  maps: [\n    {\n      dummy: {\n        one: 1,\n        two: 2,\n      },\n    },\n    'example.yml',\n    'breakpoints.yml',\n    'fonts.yml'\n  }]\n};\n\npostcss()\n  .use(map(opts))\n  .process(input)\n  .then(result => {\n    fs.writeFileSync('output.css', result.css);\n  });\n```\n\ninput:\n\n```css\n.whatever {\n  content: map(dummy, one);\n}\n\n.baz {\n  content: map(example, foo, bar, baz);\n}\n```\n\noutput:\n\n```css\n:root {\n  --dummy-one: 1;\n  --example-foo-bar-baz: yeah!;\n}\n\n.whatever {\n  content: var(--dummy-one);\n}\n\n.baz {\n  content: var(--example-foo-bar-baz);\n}\n```\n\n#### Literal objects and short syntax\n\n```js\nconst fs = require('fs');\nconst postcss = require('postcss');\nconst map = require('postcss-custom-property-maps');\n\nlet input = fs.readFileSync('input.css', 'utf8');\n\nlet opts = {\n  maps: [\n    {\n      one: 1,\n      two: 2,\n    },\n  ],\n};\n\npostcss()\n  .use(map(opts))\n  .process(input)\n  .then(result => {\n    fs.writeFileSync('output.css', result.css);\n  });\n```\n\ninput:\n\n```css\n.whatever {\n  content: map(one);\n}\n```\n\noutput:\n\n```css\n:root {\n  --one: 1;\n}\n\n.whatever {\n  content: var(--one);\n}\n```\n\n## Context\n\nUsed in conjunction with [postcss-plugin-context] you can benefit from contextualized\nmaps and leverage the short syntax.\n\n```css\n@context brandColors {\n  h1 {\n    color: map(primary);\n  }\n}\n```\n\n## Credits\n\nThanks to [Pascal Duez](https://github.com/pascalduez) and [Bogdan Chadkin](https://github.com/TrySound) for the inital project [postcss-map](https://github.com/pascalduez/postcss-map).\n\n[postcss-custon-properties]: https://github.com/postcss/postcss-custom-properties\n[postcss-plugin-context]: https://github.com/postcss/postcss-plugin-context\n[npm-url]: https://www.npmjs.org/package/postcss-custom-property-maps\n[npm-image]: http://img.shields.io/npm/v/postcss-custom-property-maps.svg\n[travis-url]: https://travis-ci.com/RedHatter/postcss-custom-property-maps?branch=master\n[travis-image]: https://travis-ci.com/RedHatter/postcss-custom-property-maps.svg?branch=master\n[coveralls-url]: https://coveralls.io/github/RedHatter/postcss-custom-property-maps?branch=master\n[coveralls-image]: https://coveralls.io/repos/github/RedHatter/postcss-custom-property-maps/badge.svg?branch=master\n[license-image]: http://img.shields.io/npm/l/postcss-custom-property-maps.svg\n[license-url]: LICENSE\n",
	"readmeFilename": "README.md",
	"_downloads": 51
}