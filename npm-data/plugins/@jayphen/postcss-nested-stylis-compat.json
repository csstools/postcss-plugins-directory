{
	"_id": "@jayphen/postcss-nested-stylis-compat",
	"_rev": "1-3ba53a1dcd7803197deaa855ddb6b0dc",
	"name": "@jayphen/postcss-nested-stylis-compat",
	"dist-tags": {
		"latest": "4.2.1"
	},
	"versions": {
		"4.2.1": {
			"name": "@jayphen/postcss-nested-stylis-compat",
			"version": "4.2.1",
			"description": "PostCSS plugin to unwrap nested rules like how Stylis does it",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"sass",
				"nested"
			],
			"scripts": {
				"test": "jest --coverage && eslint-ci *.js"
			},
			"author": {
				"name": "Jayphen Simpson",
				"email": "software@jayphen.com"
			},
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/Jayphen/postcss-nested.git"
			},
			"dependencies": {
				"postcss": "^7.0.21",
				"postcss-selector-parser": "^6.0.2"
			},
			"devDependencies": {
				"@logux/eslint-config": "^34.0.0",
				"clean-publish": "^1.1.2",
				"eslint": "^6.6.0",
				"eslint-ci": "^1.0.0",
				"eslint-config-postcss": "^3.0.7",
				"eslint-config-standard": "^14.1.0",
				"eslint-plugin-es5": "^1.4.1",
				"eslint-plugin-import": "^2.18.2",
				"eslint-plugin-jest": "^23.0.2",
				"eslint-plugin-node": "^10.0.0",
				"eslint-plugin-prefer-let": "^1.0.1",
				"eslint-plugin-promise": "^4.2.1",
				"eslint-plugin-security": "^1.4.0",
				"eslint-plugin-standard": "^4.0.1",
				"eslint-plugin-unicorn": "^12.1.0",
				"jest": "^24.9.0"
			},
			"jest": {
				"coverageThreshold": {
					"global": {
						"statements": 100
					}
				},
				"testEnvironment": "node"
			},
			"eslintConfig": {
				"extends": "eslint-config-postcss/es5",
				"rules": {
					"func-style": "off"
				},
				"overrides": [
					{
						"files": [
							"*.test.js"
						],
						"rules": {
							"jest/expect-expect": "off"
						}
					}
				]
			},
			"gitHead": "c5a54e02e9782a519d2cae5915ba3eb4be652844",
			"bugs": {
				"url": "https://github.com/Jayphen/postcss-nested/issues"
			},
			"homepage": "https://github.com/Jayphen/postcss-nested#readme",
			"_id": "@jayphen/postcss-nested-stylis-compat@4.2.1",
			"_nodeVersion": "13.8.0",
			"_npmVersion": "6.13.7",
			"dist": {
				"integrity": "sha512-4S5CW3FfYAnAtSPMNSYoVi4OnysD6ycqrRhi6y77pyePmhGpVbjd/L9yLr57XIsCbjbCd2XKa7sv7GoMaAguAg==",
				"shasum": "e6947fef7aa01f169c0ff7a4ba300dafa3d7509b",
				"tarball": "https://registry.npmjs.org/@jayphen/postcss-nested-stylis-compat/-/postcss-nested-stylis-compat-4.2.1.tgz",
				"fileCount": 6,
				"unpackedSize": 13311,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeT/85CRA9TVsSAnZWagAA72kP/3QF3OeaBAWS4ERDCnPc\n8AvxsWvZ63itdy3MNNjMoLtRgj5AD2LhxTrSV5U54trjWL+CdT3dCT6rKfkS\nIy1I69M8uTrDpaqxRe6xmdjdTysGVKTpoRpKnd9wy8dWGYLaRTYje3yNOrbH\nq6wH9ssRG7bjeWKB17Jiqn9766G+j83hdFY9heN/vYjjp2QAWSa2fjTPyHdU\nQXdsnew25/ZCA/WltqUHT2ZczbEYQfb75ZpBv+7um/5C9WTi0O7kpAqUF2oS\nVe4Torf+Tx25tWLa0WcXPwiv6p/Yu+LJmsN9JJdGyykLi/nMeYgAc4qjMhYH\nOf6xQsDPYMsjNGmI4uguqfs6xVzcMMXPklH5KctL9BG6P5mXmfr62hnlQqAN\n/H7CtLbx3H1N816se5kfJyRDxEi0JJeAWqZLpLzJatgXuBOTMHHhvZokATOT\nPs01yCpnqlfN/qr/NswBJh9LRXCt/W+JWMQQjPkZB6brthqjUTTT8N7D2Rc2\nO9x4ZSuC3Rhp9saWLUC40TB656oYfIu7K85wXFOi0pZ/th1xBsj2L2pJREtD\nFKkent/cMdsUFUwz+fiKjZQsZ/AlewrCP42K4Tdpo7F2kvbHN3dW6fvm4Bg/\njDdlnoegHSKit93jDp9XuUII8uNhYfllpIKpxo135U6B3EOR1Gy8kmLr1Sdn\nKMrI\r\n=Refb\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIFC5bVQOg8P14rbxr66mnTQ551fmMat1KbVjVCKjIfEOAiEAt/LBddXC/SLzZNnKRgeSv2ZVfPgsTG7msY6kqDpjiDc="
					}
				]
			},
			"maintainers": [
				{
					"name": "jayphen",
					"email": "jayphen@gmail.com"
				}
			],
			"_npmUser": {
				"name": "jayphen",
				"email": "jayphen@gmail.com"
			},
			"directories": {},
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-nested-stylis-compat_4.2.1_1582300985399_0.18267866729231175"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2020-02-21T16:03:05.366Z",
		"4.2.1": "2020-02-21T16:03:05.552Z",
		"modified": "2022-04-05T21:40:46.307Z"
	},
	"maintainers": [
		{
			"name": "jayphen",
			"email": "jayphen@gmail.com"
		}
	],
	"description": "PostCSS plugin to unwrap nested rules like how Stylis does it",
	"homepage": "https://github.com/Jayphen/postcss-nested#readme",
	"keywords": [
		"postcss",
		"css",
		"postcss-plugin",
		"sass",
		"nested"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/Jayphen/postcss-nested.git"
	},
	"author": {
		"name": "Jayphen Simpson",
		"email": "software@jayphen.com"
	},
	"bugs": {
		"url": "https://github.com/Jayphen/postcss-nested/issues"
	},
	"license": "MIT",
	"readme": "# PostCSS Nested\n\n<img align=\"right\" width=\"135\" height=\"95\"\n     title=\"Philosopherâ€™s stone, logo of PostCSS\"\n     src=\"http://postcss.github.io/postcss/logo-leftp.svg\">\n\n[PostCSS] plugin to unwrap nested rules like how Stylis does it (for those migrating from Stylis to PostCSS).\n\nThis fork currently works identically to [the original](https://github.com/postcss/postcss-nested), with a few small differences.\n\n```css\n.phone {\n    &_title {\n        width: 500px;\n        @media (max-width: 500px) {\n            width: auto;\n        }\n        body.is_dark & {\n            color: white;\n        }\n    }\n    img {\n        display: block;\n    }\n}\n\n.title {\n  font-size: var(--font);\n\n  @at-root html {\n      --font: 16px\n    }\n  }\n}\n```\n\nwill be processed to:\n\n```css\n.phone_title {\n    width: 500px;\n}\n@media (max-width: 500px) {\n    .phone_title {\n        width: auto;\n    }\n}\nbody.is_dark .phone_title {\n    color: white;\n}\n.phone img {\n    display: block;\n}\n\n.title {\n  font-size: var(--font);\n}\nhtml {\n  --font: 16px\n}\n```\n\n\nRelated plugins:\n\n* Use [`postcss-current-selector`] **after** this plugin if you want\nto use current selector in properties or variables values.\n* Use [`postcss-nested-ancestors`] **before** this plugin if you want\nto reference any ancestor element directly in your selectors with `^&`.\n\nAlternatives:\n\n* See also [`postcss-nesting`], which implements [CSSWG draft]\n  (requires the `&` and introduces `@nest`).\n* [`postcss-nested-props`] for nested properties like `font-size`.\n\n<a href=\"https://evilmartians.com/?utm_source=postcss-nested\">\n<img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\" alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n[`postcss-current-selector`]: https://github.com/komlev/postcss-current-selector\n[`postcss-nested-ancestors`]: https://github.com/toomuchdesign/postcss-nested-ancestors\n[`postcss-nested-props`]:     https://github.com/jedmao/postcss-nested-props\n[`postcss-nesting`]:          https://github.com/jonathantneal/postcss-nesting\n[CSSWG draft]:              https://drafts.csswg.org/css-nesting-1/\n[PostCSS]:                  https://github.com/postcss/postcss\n\n## Usage\n\n```js\npostcss([ require('postcss-nested') ])\n```\n\nSee [PostCSS] docs for examples for your environment.\n\n## Options\n\n### `bubble`\n\nBy default, plugin will bubble only `@media` and `@supports` at-rules.\nYou can add your custom at-rules to this list by `bubble` option:\n\n```js\npostcss([ require('postcss-nested')({ bubble: ['phone'] }) ])\n```\n\n```css\n/* input */\na {\n  color: white;\n  @phone {\n    color: black;\n  }\n}\n/* output */\na {\n  color: white;\n}\n@phone {\n  a {\n    color: black;\n  }\n}\n```\n\n### `unwrap`\n\nBy default, plugin will unwrap only `@font-face`, `@keyframes` and `@document`\nat-rules. You can add your custom at-rules to this list by `unwrap` option:\n\n```js\npostcss([ require('postcss-nested')({ unwrap: ['phone'] }) ])\n```\n\n```css\n/* input */\na {\n  color: white;\n  @phone {\n    color: black;\n  }\n}\n/* output */\na {\n  color: white;\n}\n@phone {\n  color: black;\n}\n```\n\n### `preserveEmpty`\n\nBy default, plugin will strip out any empty selector generated by intermediate\nnesting levels. You can set `preserveEmpty` to `true` to preserve them.\n\n```css\n.a {\n    .b {\n        color: black;\n    }\n}\n```\n\nWill be compiled to:\n\n```css\n.a { }\n.a .b {\n    color: black;\n}\n```\n\nThis is especially useful if you want to export the empty classes with `postcss-modules`.\n\n\n## Differences to postcss-nested\n\n- Nested pseudo-selectors are applied to their parent.\n\n```\n  .one { :hover: { color: red } }\n```\n\nWill be compiled to\n\n```\n  .one:hover { color: red }\n```\n\nThis matches the stylis behaviour, instead of the postcss-nested/SASS behaviour, which is to compile to:\n\n```\n  .one :hover { color: red }\n```\n",
	"readmeFilename": "README.md",
	"_downloads": 6
}