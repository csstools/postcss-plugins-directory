{
	"_id": "postcss-custom-utils",
	"_rev": "3-9f33c58875392160fcd56876eae71deb",
	"name": "postcss-custom-utils",
	"dist-tags": {
		"latest": "1.0.0"
	},
	"versions": {
		"0.1.0": {
			"name": "postcss-custom-utils",
			"version": "0.1.0",
			"description": "Read, write, and transform Custom Media and Custom Properties from almost anywhere",
			"author": {
				"name": "Jonathan Neal",
				"email": "jonathantneal@hotmail.com"
			},
			"license": "CC0-1.0",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/jonathantneal/postcss-custom-utils.git"
			},
			"homepage": "https://github.com/jonathantneal/postcss-custom-utils#readme",
			"bugs": {
				"url": "https://github.com/jonathantneal/postcss-custom-utils/issues"
			},
			"main": "index.js",
			"module": "index.js",
			"scripts": {
				"build": "rollup --config --silent",
				"test": "npm run test:js && npm run test:node",
				"test:js": "eslint src/*.js src/lib/*.js --cache --ignore-path .gitignore --quiet",
				"pretest:node": "npm run build",
				"test:node": "node test"
			},
			"engines": {
				"node": ">=6.0.0"
			},
			"dependencies": {
				"postcss": "^7.0.6",
				"postcss-selector-parser": "^5.0.0-rc.4",
				"postcss-values-parser": "^2.0.0"
			},
			"devDependencies": {
				"@babel/core": "^7.2.0",
				"@babel/plugin-syntax-dynamic-import": "^7.2.0",
				"@babel/preset-env": "^7.2.0",
				"babel-eslint": "^10.0.1",
				"eslint": "^5.9.0",
				"eslint-config-dev": "2.0.0",
				"rollup": "^0.67.4",
				"rollup-plugin-babel": "^4.0.3",
				"rollup-plugin-terser": "^3.0.0"
			},
			"eslintConfig": {
				"extends": "dev",
				"parser": "babel-eslint"
			},
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"javascript",
				"js"
			],
			"gitHead": "0e4f5018d59e34ab47a91e2c0301148c40f7e90f",
			"_id": "postcss-custom-utils@0.1.0",
			"_npmVersion": "6.4.1",
			"_nodeVersion": "11.3.0",
			"_npmUser": {
				"name": "jonathantneal",
				"email": "jonathantneal@hotmail.com"
			},
			"dist": {
				"integrity": "sha512-8TgwAgS+Aignq9EVsvnrGhyF6meIzak9PWXjlvA2SbWfOB0uut5yQjCDn10/RghYKiXcvfoLrn3Z57DSP7yP9A==",
				"shasum": "a181c7c47586e42fb867233b4d585811ffeedd06",
				"tarball": "https://registry.npmjs.org/postcss-custom-utils/-/postcss-custom-utils-0.1.0.tgz",
				"fileCount": 8,
				"unpackedSize": 246149,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcB2BbCRA9TVsSAnZWagAANaUP/2n2zYhxzpQ9qv+HG+8i\nPWCAuqpTl5RgTYPohsUYeskVzE7NpqXMnYBjNnxtoQ0XMJPA+xVec356RCr5\nijTSInW7SlbI3BIinJj5JiYEx7GeXbYIHkv7GlWmu7ObvMUdz9/Misv6HMTb\nKnLE+NL47ASnzsq2KcxRdhrc0OVBT3PPPMA/mlFGwU4+FM8TcrBKD+hwkbR+\nf9dS3VM2ZQtqZnHeij0Ee1YvxuMK6aT5FwWBo3uYDEJrY7JhYMWanwUORfvy\nl8WpTcszEnvER86vfKB4IAyVyYGx5TfhZ/71Z6CTG8/jQDYRKRRyeNK8aeM8\naiEsqSmrOKL7AFvwdX+FQOabmmkUBK24gxns57Fby1phNAOt6hcXsFoVt2MY\nKVdDzFeh4di2NUg+N+xsrAMnwe5n2IQYvMgjYGsG3LcofD5T9WmyosGtxRJV\npAYvNXlfExOD0oVLG+4ccfTho9jyalPo8OFYWguUg2UsC7hqsMQDH4R3iyo/\n6hF/dsWgPglDBBUFs9MUAtGsnMwLKYdlfibvJPQkoNBwC7o6M/UEwqnT1lq3\nV6zoA85avWsEqRWuJ4kJTV8rURrRwgpINmQrRWfXD7fY+b+uFTsStihxMxC6\nylFkZSO10+lVrqzSaYwNBaw265wqlaenUparunF3MBGU5bFx+f+KYu00Hm5u\nE63E\r\n=7Rbq\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIQDgFV0YZPDr8ENd0qVVBvf9vXXaYOhShDPWJZmmaphVsgIgGnfHqdm8pOfcQHiq1tWj0l2D3/7MaKi18hf8LJnb7y4="
					}
				]
			},
			"maintainers": [
				{
					"name": "jonathantneal",
					"email": "jonathantneal@hotmail.com"
				}
			],
			"directories": {},
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-custom-utils_0.1.0_1543987290718_0.8784156961875029"
			},
			"_hasShrinkwrap": false
		},
		"1.0.0": {
			"name": "postcss-custom-utils",
			"version": "1.0.0",
			"description": "Read, write, and transform Custom Media and Custom Properties from almost anywhere",
			"author": {
				"name": "Jonathan Neal",
				"email": "jonathantneal@hotmail.com"
			},
			"license": "CC0-1.0",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/csstools/postcss-custom-utils.git"
			},
			"homepage": "https://github.com/csstools/postcss-custom-utils#readme",
			"bugs": {
				"url": "https://github.com/csstools/postcss-custom-utils/issues"
			},
			"main": "index.cjs.js",
			"module": "index.cjs.js",
			"scripts": {
				"build": "rollup --config --silent",
				"test": "npm run test:js && npm run test:node",
				"test:js": "eslint src/{*,**/*}.js --cache --ignore-path .gitignore --quiet",
				"pretest:node": "npm run build",
				"test:node": "jest",
				"watch": "nodemon --exec \"npm run test:node\" --watch src --watch ./test.js"
			},
			"engines": {
				"node": ">=8.0.0"
			},
			"dependencies": {
				"postcss": "^7.0.17",
				"postcss-selector-parser": "^6.0.2",
				"postcss-values-parser": "^3.0.4"
			},
			"devDependencies": {
				"@babel/core": "^7.4.5",
				"@babel/preset-env": "^7.4.5",
				"babel-eslint": "^10.0.2",
				"eslint": "^5.16.0",
				"eslint-plugin-jest": "^22.6.4",
				"fse": "^4.0.1",
				"jest": "^24.8.0",
				"rollup": "^1.15.6",
				"rollup-plugin-babel": "^4.3.2"
			},
			"eslintConfig": {
				"env": {
					"browser": true,
					"es6": true,
					"node": true,
					"jest/globals": true
				},
				"extends": "eslint:recommended",
				"parser": "babel-eslint",
				"parserOptions": {
					"ecmaVersion": 2018,
					"impliedStrict": true,
					"sourceType": "module"
				},
				"plugins": [
					"jest"
				],
				"root": true
			},
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"javascript",
				"js"
			],
			"gitHead": "5a96440a575ab2c0ae7d898ce196352246d59b11",
			"_id": "postcss-custom-utils@1.0.0",
			"_nodeVersion": "12.1.0",
			"_npmVersion": "6.9.0",
			"dist": {
				"integrity": "sha512-SoJhWIUazVQLe0ILdvgineoT9OOrbZARbmuXOiQ+qNjsUHLjelNtb+mEJ6FyX25GJBbHGVcTgPaCGWru8hkkSw==",
				"shasum": "43bd00f085b32fd2967743e063e1c416998aab7e",
				"tarball": "https://registry.npmjs.org/postcss-custom-utils/-/postcss-custom-utils-1.0.0.tgz",
				"fileCount": 8,
				"unpackedSize": 306266,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdCjKJCRA9TVsSAnZWagAAYr8P/R2znOeeJRn0JZAjv1D8\nossP0OX7Gsu8Fot9cQ3SdHvuMpezZJuUmV1aW5tgxFfsPWTO6mkdAFNSxTsJ\nYG/1aytNxdgvcSUrwnlntBKtkTlWRQ1IBxzMktwwekOWHIQk8R0mMi+JOPE4\n8vgo0/lPjBvG7Bsq2pycpEKi5OXIkepo4DzHh57BlAOjoc4nvfZOSfeqEu6A\nXpx/i/v07QoShLsVdHzxxefXJ4VpsD3hxginyBkPkQpHPo1pFfd5ti6Fkga3\nvnnB5oN6O9ajvelHwcI3BS3ECQny6qks+eUHmz01ORITxlfggD7MVvfRkifk\nYYJVznrYLa6Kb/TbkN8syJ0H+1FEXXiU2kiyZBiKEbnGf6fbWmSB+u7BJO4t\nFBjkYp7j/EY1HoDANGoZ1ga0aQJfVa8EpfxhmfXc+mjvfK++F83rV2v2XrpU\nr8+Osrc93iH4wa8D9MHqIUawaO8BKx3DwZnzGMB5kVqr0+AQHlCwMOi7IbC7\nHTTBc2ifXVgHbPXFj1suuuHRA+JLMcw+6Ye1Xzl8zPmAsmJVIp9jhj0CZV3Z\nt0fioMerJLn+r9W0cjVdixb0T8A+gLlyccUZIla3Hnysm8hhjuW1OKRHoKkq\nH7X1RiOXIooV31NEZnhJMmdVFQH5HxskRXyZjuVKWgcRAfQwug0wgYS3sJ3m\ndcqr\r\n=qUH4\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEQCIDchm5v99b5nXkbGtEcI9ne6A9IEdUznRJf/w9d/99DgAiB0wmYJgZeN3S988Gy93nIMSresIOtBJlpuH3MPSYspmQ=="
					}
				]
			},
			"maintainers": [
				{
					"name": "jonathantneal",
					"email": "jonathantneal@hotmail.com"
				}
			],
			"_npmUser": {
				"name": "jonathantneal",
				"email": "jonathantneal@hotmail.com"
			},
			"directories": {},
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-custom-utils_1.0.0_1560949383331_0.1271559638849351"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2018-12-05T05:21:30.519Z",
		"0.1.0": "2018-12-05T05:21:30.917Z",
		"modified": "2024-02-19T21:18:57.182Z",
		"1.0.0": "2019-06-19T13:03:03.486Z"
	},
	"maintainers": [
		{
			"email": "romainmenke@gmail.com",
			"name": "romainmenke"
		},
		{
			"email": "sombragriselros@gmail.com",
			"name": "alaguna"
		},
		{
			"email": "jonathantneal@hotmail.com",
			"name": "jonathantneal"
		}
	],
	"description": "Read, write, and transform Custom Media and Custom Properties from almost anywhere",
	"homepage": "https://github.com/csstools/postcss-custom-utils#readme",
	"keywords": [
		"postcss",
		"css",
		"postcss-plugin",
		"javascript",
		"js"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/csstools/postcss-custom-utils.git"
	},
	"author": {
		"name": "Jonathan Neal",
		"email": "jonathantneal@hotmail.com"
	},
	"bugs": {
		"url": "https://github.com/csstools/postcss-custom-utils/issues"
	},
	"license": "CC0-1.0",
	"readme": "# PostCSS Custom Utils [<img src=\"https://postcss.github.io/postcss/logo.svg\" alt=\"PostCSS\" width=\"90\" height=\"90\" align=\"right\">][PostCSS Custom Utils]\n\n[![NPM Version][npm-img]][npm-url]\n[![Build Status][cli-img]][cli-url]\n[![Support Chat][git-img]][git-url]\n\n[PostCSS Custom Utils] lets you read, write, and transform Custom Variables,\nlike Custom Properties, Custom Media, Custom Selectors, and Environment Variables.\n\n## API\n\n### read\n\nThe `read` method reads custom variables from a variety of sources.\n\n```js\nutil.read(\n  '/path/to/source.css',\n  { to: '/path/to/another/source', type: 'css' },\n  '/path/to/source/variables.js',\n  '/path/to/source/variables.json'\n)\n```\n\nFor more details about configuring individual file sources, see\n[readFile](#readFile).\n\n### readCSS\n\nThe `readCSS` method returns an object of custom variables.\n\n```js\nutil.readCSS(root, options) // options = { filename }\n```\n\n#### readCSS filename Option\n\nThe `readCSS` method accepts a `filename` option to determine the source\nmapping for variables.\n\n### readFile\n\n```js\nutil.readFile(filename, options) // options = { from, type, async }\n```\n\n#### readFile Type Option\n\nThe `readFile` method accepts a `type` option to control which kind of file is\nwritten — Common JS using `cjs` or `js`, ES Module using `esm` or `mjs`, JSON\nusing `json`, and css using `css` or anything else. If not specified, the type\nwill be determined by the file extension, and otherwise it will be `css`.\n\n_Note: There is no convention for writing Environment Variable declarations in CSS, and so those variables will not be read from CSS files._\n\n#### readFile Async Option\n\nThe `readFile` method accepts a `async` option to control whether the function\nshould run asynchronously. By default, all read methods run synchronously.\n\n### readRoot\n\nThe `readRoot` method returns an object of custom variables from an AST Root.\n\n```js\nutil.readRoot(root, options) // options = { features, preserve }\n```\n\n_Note: There is no convention for writing Environment Variable declarations in CSS, and so those variables will not be written._\n\n### readRoot Features Option\n\nThe `readRoot` method accepts a `features` option to determine which kinds of\ncustom variables will be read from the AST Root.\n\nThe available options are `customMedia`, `customProperties`, `customSelectors`,\nand `environmentVariables`.\n\n### readRoot Preserve Option\n\nThe `readRoot` method accepts a `preserve` option to determine which kinds of\ncustom variables will be preserved from the AST Root, rather than removed.\n\nThe available options are `customMedia`, `customProperties`, `customSelectors`,\nand `environmentVariables`.\n\n### transformCSS\n\nThe `transformCSS` method returns a transformed string of CSS using custom\nvariables.\n\n```js\nutil.transformCSS(css_string, options) // options = { variables }\n```\n\n### transformFile\n\nThe `transformFile` method returns a transformed string of CSS from a file\nusing custom variables.\n\n```js\nutil.transformFile('path/to/style.css', options) // options = { variables }\n```\n\n### transformRoot\n\nThe `transformRoot` method returns a transformed AST Root using custom\nvariables.\n\n```js\nutil.transformFile('path/to/style.css', options) // options = { variables }\n```\n\n### write\n\nThe `write` method writes custom variables to a variety of destinations.\n\n```js\nutil.write(\n  '/path/to/destination.css',\n  { to: '/path/to/destination', type: 'css' },\n  options // options = { async }\n)\n```\n\nThe last argument passed into the `write` method are the options.\n\n#### write Async Option\n\nThe `write` method accepts a `async` option to control whether the function\nshould run asynchronously. By default, all write methods run synchronously.\n\n### writeFile\n\nThe `writeFile` method writes custom variables to a file.\n\n```js\nutil.writeFile(filename, options) // options = { type }\n```\n\n#### writeFile Type Option\n\nThe `writeCSS` method accepts a `type` option to control which kind of file is\nwritten — Common JS using `cjs` or `js`, ES Module using `esm` or `mjs`, JSON\nusing `json`, and css using `css` or anything else.\n\n_Note: There is no convention for writing Environment Variable declarations in CSS, and so those variables will not be written to CSS files._\n\n#### writeFile Async Option\n\nThe `writeFile` method accepts a `async` option to control whether the function\nshould run asynchronously. By default, the `writeFile` methods runs\nsynchronously.\n\n### writeCJS\n\nThe `writeCJS` method returns custom variables as an Common JS string of code.\n\n```js\nutil.writeCJS(root, options)\n```\n\n### writeCSS\n\nThe `writeCSS` method returns a CSS string of custom variables.\n\n```js\nutil.writeRoot(root, options) // options = { insert }\n```\n\n_Note: There is no convention for writing Environment Variable declarations in CSS, and so those variables will not be written._\n\n#### writeCSS Insert Option\n\nThe `writeCSS` method accepts a `insert` option to control whether the custom\nvariables are inserted `before` or `after` the other CSS.\n\n### writeESM\n\nThe `writeESM` method returns custom variables as an ES Module string of code.\n\n```js\nutil.writeESM(root, options)\n```\n\n### writeJSON\n\nThe `writeJSON` method returns custom variables as a JSON string.\n\n```js\nutil.writeJSON(root, options)\n```\n\n### writeRoot\n\nThe `writeRoot` method returns an Root object with inserted custom variables.\n\n```js\nutil.writeRoot(root, options) // options = { insert }\n```\n\n_Note: There is no convention for writing Environment Variable declarations in CSS, and so those variables will not be written._\n\n#### writeRoot Insert Option\n\nThe `writeRoot` method accepts a `insert` option to control whether the custom\nvariables are inserted `before` or `after` the other CSS.\n\n[cli-img]: https://img.shields.io/travis/csstools/postcss-custom-utils/master.svg\n[cli-url]: https://travis-ci.org/csstools/postcss-custom-utils\n[git-img]: https://img.shields.io/badge/support-chat-blue.svg\n[git-url]: https://gitter.im/postcss/postcss\n[npm-img]: https://img.shields.io/npm/v/postcss-custom-utils.svg\n[npm-url]: https://www.npmjs.com/package/postcss-custom-utils\n\n[PostCSS Custom Utils]: https://github.com/csstools/postcss-custom-utils\n",
	"readmeFilename": "README.md",
	"_downloads": 6
}