{
	"_id": "@yuheiy/postcss-custom-functions",
	"_rev": "1-e8b08246ac0a8602900922cf6cb2568f",
	"name": "@yuheiy/postcss-custom-functions",
	"dist-tags": {
		"latest": "0.1.1"
	},
	"versions": {
		"0.1.0": {
			"name": "@yuheiy/postcss-custom-functions",
			"version": "0.1.0",
			"keywords": [
				"postcss-plugin"
			],
			"author": {
				"url": "https://yuheiy.com/",
				"name": "Yuhei Yasuda",
				"email": "yuhei.yasuda1003@gmail.com"
			},
			"license": "MIT",
			"_id": "@yuheiy/postcss-custom-functions@0.1.0",
			"maintainers": [
				{
					"name": "yuheiy",
					"email": "yuhei.yasuda1003@gmail.com"
				}
			],
			"homepage": "https://github.com/yuheiy/postcss-custom-functions",
			"bugs": {
				"url": "https://github.com/yuheiy/postcss-custom-functions/issues"
			},
			"dist": {
				"shasum": "435cdd9c7ecea216c4d7e02f981b1f91bec3f510",
				"tarball": "https://registry.npmjs.org/@yuheiy/postcss-custom-functions/-/postcss-custom-functions-0.1.0.tgz",
				"fileCount": 10,
				"integrity": "sha512-g7MHDkeinYCG9Pn79TyQV+OdTHXU3gQWonKSpDZMi24Q7/F+IL5Kd1cOWhDexJ/Cnoj9aUolGSS/qTGoeTOC6A==",
				"signatures": [
					{
						"sig": "MEYCIQDgfWcgqNfQBjUbNmja8QgVR3Dfporgr+TMuGbr89pclgIhAMPNDAP26XoQRoOfqFDi6sjxv3ORM7FwMY/a5sYu5tZ2",
						"keyid": "SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U"
					}
				],
				"unpackedSize": 26389
			},
			"main": "./dist/index.cjs",
			"type": "module",
			"_from": "file:yuheiy-postcss-custom-functions-0.1.0.tgz",
			"types": "./dist/index.d.ts",
			"exports": {
				".": {
					"import": "./dist/index.mjs",
					"require": "./dist/index.cjs"
				},
				"./package.json": "./package.json"
			},
			"scripts": {
				"dev": "unbuild --stub && pnpm run test --watch",
				"fix": "biome check . --write",
				"test": "node --test",
				"build": "unbuild",
				"release": "np --no-tests",
				"lint:biome": "biome lint .",
				"lint:typecheck": "tsc --noEmit",
				"test:rewrite-expects": "REWRITE_EXPECTS=true node --test"
			},
			"unbuild": {
				"sourcemap": true,
				"declaration": true
			},
			"_npmUser": {
				"name": "yuheiy",
				"email": "yuhei.yasuda1003@gmail.com"
			},
			"_resolved": "/private/var/folders/h3/5ltbk3cs1hz996lwp7j9sj_m0000gq/T/8f4736d3c214c88b896d0ea5d43d0c9c/yuheiy-postcss-custom-functions-0.1.0.tgz",
			"_integrity": "sha512-g7MHDkeinYCG9Pn79TyQV+OdTHXU3gQWonKSpDZMi24Q7/F+IL5Kd1cOWhDexJ/Cnoj9aUolGSS/qTGoeTOC6A==",
			"repository": {
				"url": "git+https://github.com/yuheiy/postcss-custom-functions.git",
				"type": "git"
			},
			"_npmVersion": "10.9.2",
			"description": "PostCSS plugin that allows users to define custom functions using JavaScript.",
			"directories": {},
			"_nodeVersion": "18.20.7",
			"dependencies": {
				"@csstools/css-tokenizer": "^3.0.3",
				"@csstools/css-parser-algorithms": "^3.0.4"
			},
			"publishConfig": {
				"access": "public"
			},
			"_hasShrinkwrap": false,
			"devDependencies": {
				"np": "10.2.0",
				"postcss": "8.5.3",
				"unbuild": "3.3.1",
				"typescript": "5.7.3",
				"@types/node": "22.13.5",
				"@biomejs/biome": "1.9.4",
				"@csstools/postcss-tape": "6.0.0"
			},
			"peerDependencies": {
				"postcss": "^8.4"
			},
			"_npmOperationalInternal": {
				"tmp": "tmp/postcss-custom-functions_0.1.0_1740207190324_0.01992948868609168",
				"host": "s3://npm-registry-packages-npm-production"
			}
		},
		"0.1.1": {
			"name": "@yuheiy/postcss-custom-functions",
			"version": "0.1.1",
			"description": "PostCSS plugin that allows users to define custom functions using JavaScript.",
			"keywords": [
				"postcss-plugin"
			],
			"homepage": "https://github.com/yuheiy/postcss-custom-functions",
			"bugs": {
				"url": "https://github.com/yuheiy/postcss-custom-functions/issues"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/yuheiy/postcss-custom-functions.git"
			},
			"license": "MIT",
			"author": {
				"name": "Yuhei Yasuda",
				"email": "yuhei.yasuda1003@gmail.com",
				"url": "https://yuheiy.com/"
			},
			"type": "module",
			"exports": {
				".": {
					"import": "./dist/index.mjs",
					"require": "./dist/index.cjs"
				},
				"./package.json": "./package.json"
			},
			"main": "./dist/index.cjs",
			"types": "./dist/index.d.ts",
			"dependencies": {
				"@csstools/css-parser-algorithms": "^3.0.4",
				"@csstools/css-tokenizer": "^3.0.3"
			},
			"devDependencies": {
				"@biomejs/biome": "1.9.4",
				"@csstools/postcss-tape": "6.0.0",
				"@types/node": "22.13.5",
				"np": "10.2.0",
				"postcss": "8.5.3",
				"typescript": "5.7.3",
				"unbuild": "3.3.1"
			},
			"peerDependencies": {
				"postcss": "^8.4"
			},
			"publishConfig": {
				"access": "public"
			},
			"unbuild": {
				"declaration": true,
				"sourcemap": true
			},
			"scripts": {
				"build": "unbuild",
				"dev": "unbuild --stub && pnpm run test --watch",
				"fix": "biome check . --write",
				"lint:biome": "biome lint .",
				"lint:typecheck": "tsc --noEmit",
				"release": "np --no-tests",
				"test": "node --test",
				"test:rewrite-expects": "REWRITE_EXPECTS=true node --test"
			},
			"_id": "@yuheiy/postcss-custom-functions@0.1.1",
			"_integrity": "sha512-m2CjEjRT2FWRiqdFLbNP6gep6KZAN/rYUp34fjd3gnCr0pdVoVGmdgU6VN7spUn1guT3DxMoyrwZNTHWHkNCxA==",
			"_resolved": "/private/var/folders/h3/5ltbk3cs1hz996lwp7j9sj_m0000gq/T/fd6bf912fb70993795c43dc01e932435/yuheiy-postcss-custom-functions-0.1.1.tgz",
			"_from": "file:yuheiy-postcss-custom-functions-0.1.1.tgz",
			"_nodeVersion": "18.20.7",
			"_npmVersion": "10.9.2",
			"dist": {
				"integrity": "sha512-m2CjEjRT2FWRiqdFLbNP6gep6KZAN/rYUp34fjd3gnCr0pdVoVGmdgU6VN7spUn1guT3DxMoyrwZNTHWHkNCxA==",
				"shasum": "d847f8d822616e66bf2626ca99be09f71c37d8cf",
				"tarball": "https://registry.npmjs.org/@yuheiy/postcss-custom-functions/-/postcss-custom-functions-0.1.1.tgz",
				"fileCount": 10,
				"unpackedSize": 25638,
				"signatures": [
					{
						"keyid": "SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U",
						"sig": "MEYCIQCVFunJ/BPojkAUUwfFBR0vDxkegBtpuHzcVabux7V8AQIhAMuwe+5Gyh3Q0NRuhgCgNXHiXrYoLBvpkJ+O+3w2RSrW"
					}
				]
			},
			"_npmUser": {
				"name": "yuheiy",
				"email": "yuhei.yasuda1003@gmail.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "yuheiy",
					"email": "yuhei.yasuda1003@gmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages-npm-production",
				"tmp": "tmp/postcss-custom-functions_0.1.1_1740298817819_0.1411549420410405"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2025-02-22T06:53:10.240Z",
		"modified": "2025-02-23T08:20:18.239Z",
		"0.1.0": "2025-02-22T06:53:10.539Z",
		"0.1.1": "2025-02-23T08:20:18.055Z"
	},
	"bugs": {
		"url": "https://github.com/yuheiy/postcss-custom-functions/issues"
	},
	"author": {
		"name": "Yuhei Yasuda",
		"email": "yuhei.yasuda1003@gmail.com",
		"url": "https://yuheiy.com/"
	},
	"license": "MIT",
	"homepage": "https://github.com/yuheiy/postcss-custom-functions",
	"keywords": [
		"postcss-plugin"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/yuheiy/postcss-custom-functions.git"
	},
	"description": "PostCSS plugin that allows users to define custom functions using JavaScript.",
	"maintainers": [
		{
			"name": "yuheiy",
			"email": "yuhei.yasuda1003@gmail.com"
		}
	],
	"readme": "# @yuheiy/postcss-custom-functions\n\n[PostCSS](https://github.com/postcss/postcss) plugin that allows users to define custom functions using JavaScript. This plugin is inspired by [custom functions](https://drafts.csswg.org/css-mixins-1/#custom-function) in CSS.\n\nFor example, define a custom function:\n\n```js\nmodule.exports = {\n  plugins: {\n    '@yuheiy/postcss-custom-functions': {\n      functions: {\n        '--negative': (value) => `calc(-1 * ${value})`,\n      },\n    },\n  },\n};\n```\n\nUse the custom function you have defined:\n\n```css\nhtml {\n  --gap: 1em;\n  padding: --negative(var(--gap));\n  /* or by passing the value explicitly, like: */\n  padding: --negative(1em);\n}\n```\n\nwill be processed to:\n\n```css\nhtml {\n  --gap: 1em;\n  padding: calc(-1 * var(--gap));\n  /* or by passing the value explicitly, like: */\n  padding: calc(-1 * 1em);\n}\n```\n\n## Usage\n\n**Step 1:** Install plugin:\n\n```sh\nnpm install --save-dev postcss @yuheiy/postcss-custom-functions\n```\n\n**Step 2:** Check you project for existed PostCSS config: `postcss.config.js`\nin the project root, `\"postcss\"` section in `package.json`\nor `postcss` in bundle config.\n\nIf you do not use PostCSS, add it according to [official docs](https://github.com/postcss/postcss#usage)\nand set this plugin in settings.\n\n**Step 3:** Add the plugin to plugins list:\n\n```diff\nmodule.exports = {\n  plugins: {\n+   '@yuheiy/postcss-custom-functions': {},\n    'autoprefixer': {},\n  },\n};\n```\n\n## Options\n\n### `functions`\n\nType: `{ [key: string]: (...values: string[]) => string }`  \nDefault: `{}`\n\nDefine custom functions that can be used in your CSS.\n\n## Recipes\n\n### Optional arguments with fallback\n\nYou can define custom functions with optional arguments and fallback values.\n\n```js\nfunction shadow(shadowColor = 'var(--shadow-color, black)') {\n  return `2px 2px ${shadowColor}`;\n}\n\nmodule.exports = {\n  plugins: {\n    '@yuheiy/postcss-custom-functions': {\n      functions: {\n        '--shadow': shadow,\n      },\n    },\n  },\n};\n```\n\nUse the custom function you have defined:\n\n```css\n.foo {\n  --shadow-color: blue;\n  box-shadow: --shadow(); /* produces a blue shadow */\n  /* or just */\n  box-shadow: --shadow(blue);\n}\n```\n\nwill be processed to:\n\n```css\n.foo {\n  --shadow-color: blue;\n  box-shadow: 2px 2px var(--shadow-color, black); /* produces a blue shadow */\n  /* or just */\n  box-shadow: 2px 2px blue;\n}\n```\n\n### Arguments validation\n\nYou can validate functions arguments and output warnings if they are incorrect.\n\n```js\nfunction negative(value, ...rest) {\n  if (!value) {\n    throw new Error(\n      `The --negative(…) function requires an argument, but received none.`,\n    );\n  }\n\n  if (rest.length > 0) {\n    throw new Error(\n      `The --negative(…) function only accepts a single argument, but received ${\n        rest.length + 1\n      }.`,\n    );\n  }\n\n  return `calc(-1 * ${value})`;\n}\n\nmodule.exports = {\n  plugins: {\n    '@yuheiy/postcss-custom-functions': {\n      functions: {\n        '--negative': negative,\n      },\n    },\n  },\n};\n```\n\nThis implementation is inspired by [Tailwind CSS’s `css-functions.js`](https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/css-functions.ts).\n\n### Fluid Typography\n\nYou can also implement [Fluid Typography](https://www.smashingmagazine.com/2022/01/modern-fluid-typography-css-clamp/) as a custom function, using the [`tan(atan2())` technique](https://dev.to/janeori/css-type-casting-to-numeric-tanatan2-scalars-582j) to remove px units and calculate them in CSS.\n\n```js\nfunction fluid(\n  minSize,\n  maxSize,\n  minBreakpoint = 'var(--breakpoint-sm)',\n  maxBreakpoint = 'var(--breakpoint-xl)',\n  ...rest\n) {\n  if (!minSize || !maxSize) {\n    throw new Error(\n      'The --fluid(…) function requires 2–4 arguments, but received none.',\n    );\n  }\n\n  if (rest.length > 0) {\n    throw new Error(\n      `The --fluid(…) function only accepts 4 arguments, but received ${\n        rest.length + 1\n      }.`,\n    );\n  }\n\n  const slope = `calc(tan(atan2(${maxSize} - ${minSize}, 1px)) / tan(atan2(${maxBreakpoint} - ${minBreakpoint}, 1px)))`;\n  const intercept = `calc(tan(atan2(${minSize}, 1px)) - ${slope} * tan(atan2(${minBreakpoint}, 1px)))`;\n\n  return `clamp(${[\n    `min(${minSize}, ${maxSize})`,\n    `${slope} * 100lvi + ${intercept} / 16 * 1rem`,\n    `max(${minSize}, ${maxSize})`,\n  ].join(', ')})`;\n}\n\nmodule.exports = {\n  plugins: {\n    '@yuheiy/postcss-custom-functions': {\n      functions: {\n        '--fluid': fluid,\n      },\n    },\n  },\n};\n```\n\nUse the custom function you have defined:\n\n```css\n:root {\n  --breakpoint-sm: 40rem;\n  --breakpoint-md: 48rem;\n  --breakpoint-lg: 64rem;\n  --breakpoint-xl: 80rem;\n  --breakpoint-2xl: 96rem;\n}\n\nh1 {\n  font-size: --fluid(2rem, 4rem);\n}\n```\n\nwill be processed to:\n\n<!-- prettier-ignore -->\n```css\n:root {\n  --breakpoint-sm: 40rem;\n  --breakpoint-md: 48rem;\n  --breakpoint-lg: 64rem;\n  --breakpoint-xl: 80rem;\n  --breakpoint-2xl: 96rem;\n}\n\nh1 {\n  font-size: clamp(min(2rem, 4rem), calc(tan(atan2(4rem - 2rem, 1px)) / tan(atan2(var(--breakpoint-xl) - var(--breakpoint-sm), 1px))) * 100lvi + calc(tan(atan2(2rem, 1px)) - calc(tan(atan2(4rem - 2rem, 1px)) / tan(atan2(var(--breakpoint-xl) - var(--breakpoint-sm), 1px))) * tan(atan2(var(--breakpoint-sm), 1px))) / 16 * 1rem, max(2rem, 4rem));\n}\n```\n",
	"readmeFilename": "README.md",
	"_downloads": 93
}