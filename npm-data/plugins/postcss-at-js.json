{
	"_id": "postcss-at-js",
	"_rev": "1-bc10b833ad5d3a35fc0efe6a2146a722",
	"name": "postcss-at-js",
	"dist-tags": {
		"latest": "1.0.1"
	},
	"versions": {
		"1.0.0": {
			"name": "postcss-at-js",
			"version": "1.0.0",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"preprocessor"
			],
			"license": "MIT",
			"_id": "postcss-at-js@1.0.0",
			"maintainers": [
				{
					"name": "uenob",
					"email": "uenobk@gmail.com"
				}
			],
			"homepage": "https://github.com/uenoB/postcss-at-js#readme",
			"bugs": {
				"url": "https://github.com/uenoB/postcss-at-js/issues"
			},
			"dist": {
				"shasum": "1da717cb5ef745e6827feae123cbe578307364de",
				"tarball": "https://registry.npmjs.org/postcss-at-js/-/postcss-at-js-1.0.0.tgz",
				"fileCount": 9,
				"integrity": "sha512-Z+q4W1X+H5k7W3zfBJxyuL8tel/xh4drsDBAjSeBc0dts66qWzwxGRCwaFBIMXx2YvsWIZ7oTUHzsB/Q3fy7ag==",
				"signatures": [
					{
						"sig": "MEQCIC3BkgIkOTBRit2hASVB9PVSVq6aDLuHX22xZZedWTieAiB0lOeQSqMJvnYPu2e43x19gaRIGWfEGgaIH1TEdYHkNQ==",
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"
					}
				],
				"attestations": {
					"url": "https://registry.npmjs.org/-/npm/v1/attestations/postcss-at-js@1.0.0",
					"provenance": {
						"predicateType": "https://slsa.dev/provenance/v1"
					}
				},
				"unpackedSize": 145977
			},
			"main": "dist/index.cjs",
			"type": "module",
			"types": "./dist/index.d.ts",
			"module": "dist/index.js",
			"exports": {
				".": {
					"types": "dist/index.d.ts",
					"import": "dist/index.js",
					"default": "dist/index.cjs"
				}
			},
			"gitHead": "b7ec16a26ff7c26dd563320a5213548efe5db514",
			"scripts": {
				"test": "vitest run",
				"build": "rollup -c rollup.config.js",
				"prepare": "git config --local core.hooksPath .githooks || exit 0",
				"git-pre-commit": "lint-staged"
			},
			"_npmUser": {
				"name": "uenob",
				"email": "uenobk@gmail.com"
			},
			"repository": {
				"url": "git+https://github.com/uenoB/postcss-at-js.git",
				"type": "git"
			},
			"_npmVersion": "10.8.1",
			"description": "PostCSS plugin to embed JavaScript in CSS for preprocessing",
			"directories": {},
			"sideEffects": false,
			"_nodeVersion": "20.16.0",
			"publishConfig": {
				"access": "public",
				"provenance": true
			},
			"_hasShrinkwrap": false,
			"devDependencies": {
				"acorn": "^8.12.1",
				"eslint": "^8.57.0",
				"rollup": "^4.20.0",
				"vitest": "^2.0.5",
				"postcss": "^8.4.40",
				"prettier": "^3.3.3",
				"typescript": "^5.5.4",
				"@types/node": "^22.1.0",
				"lint-staged": "^15.2.8",
				"@eslint/compat": "^1.1.1",
				"eslint-plugin-n": "^17.10.2",
				"semantic-release": "^24.0.0",
				"rollup-plugin-dts": "^6.1.1",
				"typescript-eslint": "^8.0.1",
				"eslint-plugin-import": "^2.29.1",
				"@rollup/plugin-terser": "^0.4.4",
				"@semantic-release/git": "^10.0.1",
				"eslint-plugin-promise": "^7.0.0",
				"rollup-plugin-esbuild": "^6.1.1",
				"prettier-plugin-svelte": "^3.2.6"
			},
			"peerDependencies": {
				"acorn": "^8",
				"postcss": "^8"
			},
			"_npmOperationalInternal": {
				"tmp": "tmp/postcss-at-js_1.0.0_1722900475915_0.8980337549928186",
				"host": "s3://npm-registry-packages"
			}
		},
		"1.0.1": {
			"name": "postcss-at-js",
			"version": "1.0.1",
			"description": "PostCSS plugin to embed JavaScript in CSS for preprocessing",
			"homepage": "https://github.com/uenoB/postcss-at-js#readme",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/uenoB/postcss-at-js.git"
			},
			"license": "MIT",
			"type": "module",
			"sideEffects": false,
			"publishConfig": {
				"access": "public",
				"provenance": true
			},
			"scripts": {
				"prepare": "git config --local core.hooksPath .githooks || exit 0",
				"git-pre-commit": "lint-staged",
				"build": "rollup -c rollup.config.js",
				"test": "vitest run"
			},
			"module": "dist/index.js",
			"main": "dist/index.cjs",
			"exports": {
				".": {
					"types": "./dist/index.d.ts",
					"import": "./dist/index.js",
					"default": "./dist/index.cjs"
				}
			},
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"preprocessor"
			],
			"devDependencies": {
				"@eslint/compat": "^1.1.1",
				"@rollup/plugin-terser": "^0.4.4",
				"@semantic-release/git": "^10.0.1",
				"@types/node": "^22.1.0",
				"acorn": "^8.12.1",
				"eslint": "^8.57.0",
				"eslint-plugin-import": "^2.29.1",
				"eslint-plugin-n": "^17.10.2",
				"eslint-plugin-promise": "^7.0.0",
				"lint-staged": "^15.2.8",
				"postcss": "^8.4.40",
				"prettier": "^3.3.3",
				"prettier-plugin-svelte": "^3.2.6",
				"rollup": "^4.20.0",
				"rollup-plugin-dts": "^6.1.1",
				"rollup-plugin-esbuild": "^6.1.1",
				"semantic-release": "^24.0.0",
				"typescript": "^5.5.4",
				"typescript-eslint": "^8.0.1",
				"vitest": "^2.0.5"
			},
			"peerDependencies": {
				"acorn": "^8",
				"postcss": "^8"
			},
			"_id": "postcss-at-js@1.0.1",
			"gitHead": "f18fbafd207e2c16c8606c3a1220cc58b52e52c1",
			"types": "./dist/index.d.ts",
			"bugs": {
				"url": "https://github.com/uenoB/postcss-at-js/issues"
			},
			"_nodeVersion": "20.16.0",
			"_npmVersion": "10.8.1",
			"dist": {
				"integrity": "sha512-Le9A55Pc0cRTorMVfvRh4rcTGpqYHfYh4YTSuxrRfiDs3890LUOqIxRHt0x9UJ8gKaXbFg68NxlpWUNdkrxw5A==",
				"shasum": "c1189d05f8ccf61863aff72e2931b70f92ade548",
				"tarball": "https://registry.npmjs.org/postcss-at-js/-/postcss-at-js-1.0.1.tgz",
				"fileCount": 9,
				"unpackedSize": 145983,
				"attestations": {
					"url": "https://registry.npmjs.org/-/npm/v1/attestations/postcss-at-js@1.0.1",
					"provenance": {
						"predicateType": "https://slsa.dev/provenance/v1"
					}
				},
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIFSABGRG77YxAMyi/FQZhZ7YNTO993vncLIcwGMDP5BqAiEAxfS6gaDkd9Rq9k/Cyq7AB5jq/6VS2lkJgBU0lwV5eVc="
					}
				]
			},
			"_npmUser": {
				"name": "uenob",
				"email": "uenobk@gmail.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "uenob",
					"email": "uenobk@gmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-at-js_1.0.1_1722904229638_0.8520570019226921"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2024-08-05T23:27:55.822Z",
		"modified": "2024-08-06T00:30:30.276Z",
		"1.0.0": "2024-08-05T23:27:56.079Z",
		"1.0.1": "2024-08-06T00:30:29.839Z"
	},
	"bugs": {
		"url": "https://github.com/uenoB/postcss-at-js/issues"
	},
	"license": "MIT",
	"homepage": "https://github.com/uenoB/postcss-at-js#readme",
	"keywords": [
		"postcss",
		"css",
		"postcss-plugin",
		"preprocessor"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/uenoB/postcss-at-js.git"
	},
	"description": "PostCSS plugin to embed JavaScript in CSS for preprocessing",
	"maintainers": [
		{
			"name": "uenob",
			"email": "uenobk@gmail.com"
		}
	],
	"readme": "# PostCSS @js\n\nPostCSS @js is a [PostCSS] plugin that allows you to embed JavaScript\ncode in your CSS files for preprocessing.\n\n## Installation\n\n```bash\nnpm install postcss-at-js\n```\n\nTo enable accurate syntax errors, install [Acorn] at your option.\n\n```bash\nnpm install acorn\n```\n\n## Usage\n\nPut PostCSS @js into your `use` chain.\n\n```js\nconst postcss = require('postcss')\n\nfunction process(css) {\n  return postcss()\n    .use(require('postcss-import')())\n    .use(require('postcss-at-js')())\n    .use(require('postcss-calc')())\n    .process(css)\n    .css\n}\n```\n\nIn combination with [postcss-import], PostCSS @js enables its\nmodule feature.\n[PostCSS Calc] supplements arithmetic calculation,\nwhich PostCSS @js lacks intentionally.\n\nUnder this configuration, this input\n\n```css\n@js const mixin = {\n  color: black;\n}\n\nh1 {\n  @js mixin;\n}\n```\n\nis transformed into the following output:\n\n\n```css\nh1 {\n  color: black\n}\n```\n\n## Language Details\n\nPut `@js` followed by JavaScript code at anywhere in CSS.\nAll the embedded codes are evaluated to produce the resulting CSS.\nSimilar to the function body of JavaScript, you can write any\ndeclaration, statement, and expression in `@js`. For example:\n\n```css\n@js const fs = require('node:fs');\n@js let sum;\n@js for (let i = 0; i < 10; i++) sum += i;\n```\n\n### Usage of Braces\n\nThese JavaScript codes are embedded in CSS.\nThis means that each `@js`s are parsed by PostCSS at first and then\nread by the JavaScript interpreter.\nThe most annoying (but interesting) conflict between the syntax of CSS\nand JavaScript is in the use of braces (`{` ... `}`).\nIf braces occurs in `@js` without somehow escaping, they are consumed\nas CSS blocks by PostCSS, not a part of JavaScript, and cause CSS\nsyntax errors in most cases.\nTo avoid these errors, surround such braces with parentheses (`(` ... `)`)\nor brackets (`[` ... `]`).\nThe following are bad examples, which are interpreted unexpectedly by\nPostCSS and cause CSS syntax errors:\n\n```css\n@js const obj = { hello: 'World', enjoy: 'it' };     /* ❌ syntax error */\n@js const func = n => { return n + 1 };              /* ❌ syntax error */\n@js const { createHash } = require('node:crypto');   /* ❌ syntax error */\n@js if (x > 5) { console.log(x) } else { x++ };      /* ❌ syntax error */\n```\n\nTo avoid such errors, put seemingly unnecessary parentheses and\nbrackets around braces as follows:\n\n```css\n@js const obj = ({ hello: 'World', enjoy: 'it' });\n@js const func = (n => { return n + 1 });\n@js const [{ createHash }] = [require('node:crypto')];\n@js (function (){ if (x > 5) { console.log(x) } else { x++ } })();\n```\n\nThese parentheses and brackets are also parts of JavaScript; so,\nyou need to choose one in accordance with context without changing\nthe semantics of your code.\nThe following is a typical strategy:\n\n1. If braces occurs in the right-hand side of assignment `=`,\n   parentheses (`(` ... `)`) are preferable.\n   You can freely enclose any sub-expression with parentheses without\n   any modification of its semantics.\n2. If braces occurs in the left-hand side of assignment `=`,\n   put brackets (`[` ... `]`) in both side of `=`.\n   Braces in this context is a part of binding patterns, in which\n   parentheses are not allowed to appear.\n   A pair of brackets occurring here is accepted as an array binding\n   pattern.\n   To keep the original semantics of your code, you have to put brackets\n   in both side of `=`.\n3. For braces constituting a block statement, put the entire statement\n   in IIFE (immediately invoked function expression).\n\nBraces in `'` or `\"` string literals are safe, however, those in\ntemplate literals (`` `...` ``) are not safe.\nIn the CSS syntax, a back-quote (`` ` ``) is solely regarded as a\nseparate delimiter.\nTo avoid confusion, it is recommended to put parentheses around\nevery template literals in `@js` like the following:\n\n```css\nconst size = 12;\nconst fontSize = (`${size}pt`);\n```\n\n### CSS Blocks\n\nBare braces are only allowed at the end of `@js` rule, where is the\nonly right place for a CSS block attached to an at-rule.\nThe group attached to a `@js` is interpreted as a parenthesized\nJavaScript expression denoting an [AsyncIterable] of PostCSS nodes.\nFor example:\n\n```css\n@js const blackWhite = {\n  color: black;\n  background-color: white;\n  &:hover {\n    color: red;\n  }\n}\n```\n\nThis binds a constant `blackWhite` to a sequence of three CSS\nnodes: `color: black`, `background-color: white`, and `&:hover` rule.\nNote that\n\n```css\n@js const blackColor = { color: black }\n```\n\nis not a JavaScript object literal, but CSS group consisting of one\nproperty declaration `color: black`.\nHence, the value of `blackColor` is not a plain object, but an\nAsyncIterable of PostCSS nodes.\n\nAfter capturing a block in a JavaScript variable, you can inject it\ninto CSS by writing an `@js` expression evaluating to the content\nto be injected.\nFor example, the above `blackWhite` can be injected in a CSS rule\nas follows:\n\n```css\nblockquote {\n  font-size: 14pt;\n  @js blackWhite;\n}\n```\n\nThis results in the following:\n\n```css\nblockquote {\n  font-size: 14pt;\n  color: black;\n  background-color: white;\n  &:hover {\n    color: red;\n  }\n}\n```\n\nTo expand the nested rules, use [PostCSS Nesting] after PostCSS @js.\n\nEvery CSS block of `@js` is seen as a single parenthesized expression\nin JavaScript.\nBy exploiting this fact, you can pass a block to a function by\nputting the name of the function just before the block like this:\n\n```css\n@js const mixinWithBlock = content => {\n  margin: 1em;\n  @js content;\n  border: thin solid black;\n}\n\nh2 {\n  @js mixinWithBlock {\n    padding: 1em;\n  }\n}\n```\n\nThe `@js mixinWithBlock { padding: 1em; }` line is interpreted by\nthe JavaScript interpreter as an expression `mixinWithBlock ( ... )`,\nwhich is a function call expression with an argument.\nThe `mixinWithBlock` function receives a block `{ padding: 1em; }`\nas `content`, inject the block in its body, and returns the resulting\nbody as an AsyncIterable.\nAt the call site of `mixinWithblock`, the returned block is injected\nto the place of this `@js` rule.\nConsequently, we have the following result:\n\n```css\nh2 {\n  margin: 1em;\n  padding: 1em;\n  border: thin solid block;\n}\n```\n\n### Injecting Objects into CSS\n\nSeveral particular forms of JavaScript objects can be injected as CSS\nif they look like a set or sequence of CSS constructs.\nFor example:\n\n```css\n@js const marginsInPixel = n => ({\n  margin: `${n}px`,\n  padding: `calc(${n}px * 2)`\n})\n@js const colors = (light, dark) => [\n  { color: light },\n  { '@media': ['(prefers-color-scheme: dark)', { color: dark }] }\n];\n\npre {\n  @js marginsInPixel(4);\n  @js colors('black', 'silver');\n}\n```\n\nThis results in the following:\n\n```css\npre {\n  margin: 4px;\n  padding: calc(4px * 2);\n  color: black;\n  @media (prefers-color-scheme: dark) { color: silver };\n}\n```\n\nIf the value of `@js` expression is neither acceptable nor\n`undefined`, PostCSS @js reports an error to correct your mistake.\nInjecting `undefined` is simply ignored.\n\n### `@js` property value\n\nIf the value of a CSS property declaration begins with `@js`,\nsubsequent content in the value is interpreted as a JavaScript\nexpression.\nAfter evaluation, the value is replaced with the evaluation result.\nFor example:\n\n```css\n@js const pixels = 5;\n\ncode {\n  border-width: @js (`${pixels}px`);\n}\n```\n\nThis is actually a shorthand of object injection.\nThe following is equivalent to the above:\n\n```css\n@js const pixels = 5;\n\ncode {\n  @js ({ 'border-width': `${pixels}px` });\n}\n\n```\n\nAn `@js` property value is evaluated as if it is enclosed with\n`await (async () => ... )()`.\nTherefore, the `yield` keyword in a `@js` property value causes an\nsyntax error.\nIf an `@js` property value has statements instead of an expression,\nyou must return the value to be injected in CSS property value.\nThe following is equivalent to the above one:\n\n```css\ncode {\n  border-width: @js return pixels + 'px';\n}\n```\n\n### `:@js` pseudo selector\n\nThe `:@js` pseudo selector is available to inject a computed value\ninto a selector list.\nIf a selector is of the form `:@js( ... )`, the expression inside the\nselector is interpreted as a JavaScript expression and the selector\nis entirely replaced with the evaluation result.\nFor example:\n\n```css\n@js const seven = 7;\n\n:@js(`li:nth-child(${seven})`) {\n  background-color: yellow;\n}\n```\n\nEach `:@js` pseudo selector must be used solely in a selector.\nAny occurance of `@js` in a selector list in any other form is prohibited.\nAny of the following are bad examples:\n\n```css\nli:@js(`nth-child($seven)`) { ... }           /* ❌ syntax error */\n:@js(`li:nth-child($seven)`):hover { ... }    /* ❌ syntax error */\n.@js { ... }                                  /* ❌ syntax error */\n```\n\nSimilarly to `@js` property values, `:@js` pseudo selector is a\nshorthand of object injection.\nThe following is equivalent to the above:\n\n```css\n@js (x => { `li:nth-child(${seven})`: x }) {\n  background-color: yellow;\n}\n```\n\nAlso similarly to `@js` property values, `:@js` pseudo selector is\nevaluated as if it is enclosed with `await (async () => ... )()`.\nIf an `:@js` pseudo selector has statements instead of an expression,\nyou must return the value to be injected in CSS property value.\nThe following is equivalent to the above one:\n\n```css\n:@js(return `li:nth-child(${seven})`) {\n  background-color: yellow;\n}\n```\n\n### `yield`\n\nBy using the `yield` construct, you can inject multiple values into\na single `@js`.  The values `yield`ed during execution of a `@js`\nare injected into the place of the `@js` in the same order as evaluation.\nThis allows you iterative injection as seen in the following:\n\n```css\n@js for (const i of [1, 2, 3]) yield {\n  :@js(`p:nth-child(${i})`) {\n    margin: @js (`${i}em`);\n  }\n}\n```\n\nThe result is as follows:\n\n```css\np:nth-child(1) {\n  margin: 1em;\n}\np:nth-child(2) {\n  margin: 2em;\n}\np:nth-child(3) {\n  margin: 3em;\n}\n```\n\nWithout `yield` after `for ( ... )`, nothing appears in the result.\nThe block is certainly evaluated to a value three times but\nsimply discarded since no operation is performed for those values\nin the loop body.\n\nActually, each `@js` expression has an implicit outermost `yield`.\nThis is the reason why the value of `@js` expression is automatically\ninjected.\nConsider the following two `@js`s, which are semantically equivalent:\n\n```css\nh1 {\n  @js ({ margin: '1em' });\n  @js yield ({ margin: '1em' });\n}\n```\n\nSince both of these `@js`s are expressions, their values are implicitly\n`yield`ed.\nIn the first `@js`, the value of the expression is `yield`ed by the\nimplicit outermost `yield` and therefore `yield` is performed only\nonce.\nIn the second one, `yield` is performed twice: it yields the\n`{ margin: '1em' }` object at first and then yields `undefined`, which\nis the value of the expression `yield ({ margin: '1em' })`.\nSince `undefined` is ignored, the results of the two expressions are\nthe same.\n\nTo avoid the implicit `yield`, transform an expression into a statement\nby putting a meaningless prefix, like the following:\n\n```css\n@js var _ = exports.fonts = ({ text: ['times', 'serif'] });\n@js if(1) exports.fonts = ({ text: ['times', 'serif'] });\n```\n\nSince they are statements, no implicit `yield` happens.\nWithout such prefixes, the value of each expressions is implicitly\n`yield`ed and hence causes an error because `{ text: ['times', 'serif'] }`\nis not in an acceptable form as CSS.\n\nAnother way to avoid the implicit `yield` is to add `, void 0` to\nthe end of the expression.\nSince `void 0` evaluates to `undefined` and `undefined` is ignored\nas described above, this modification spoils the implicit outermost\n`yield`.\nThe following is an example:\n\n```css\n@js exports.fonts = ({ text: ['times', 'serif'] }), void 0;\n```\n\n### Function Injection\n\nIf a function is `yield`ed, it will be called with the next `yield`ed\nvalue as an argument and then its return value is injected to CSS.\nThis is convenient to define a mixin with a callback similarly to\n[Sass]'s `@mixin ... using` feature.\nFor example:\n\n```css\n@const divmod = (x, y) => block => {\n  @js block(Math.floor(x / y), x % y);\n}\n\ntable {\n  @js yield divmod(42, 5), (div, mod) => {\n     padding: @js (`${div}px ${mod}px`);\n  }\n}\n```\n\nThe following happens in the above code:\n\n1. `divmod` is defined as a curried function, which takes two numbers\n   and returns a function of the form `block => { ... }`.\n2. `divmod(42, 5)` evaluates to the function.\n3. `yield divmod(42, 5)` yields the function.\n   The yielded function is scheduled to be called with the next yielded\n   value.\n4. By the semantics of comma expression in JavaScript, the entire\n   expression evaluates to the function `(div, mod) => { ... }`.\n5. By the implicit outermost `yield`, the function is yielded.\n6. Since a function call is pending, the second function is given to\n   the first function as its first `block` argument.\n7. The function returns an AsyncIterable representing the computed body.\n8. The returned AsyncIterable is injected into CSS.\n\nThe final result is given below:\n\n```css\ntable {\n  padding: 8px 2px;\n}\n```\n\nIf a function has been `yield`ed in a `@js` but no subsequent `yield`\noccurs in the same `@js`, the function is called with no argument.\nIf another function is returned from this call, the returned function\nis called again with no argument.\nThis is repeated until a non-function value is obtained.\nThen, the returned value is injected as if it is `yield`ed.\n\nThis behavior is useful for functions that takes a block optionally.\nFor example, the following is the function creating an at-rule:\n\n```css\n@js const atRule = (name, params) => block =>\n  ({ [`@${name} ${params}`]: block });\n```\n\nThis function creates an at-rule with or without a block depending on\nwhether or not the optional `block` argument is given.\nBy calling this function as follows,\n\n```css\n@js atRule('media', 'print') {\n  font-size: 10.5pt;\n}\n@js atRule('namespace', '\"http://www.w3.org/2000/svg\"');\n```\n\nwe obtain the following:\n\n```css\n@media print {\n  font-size: 10.5pt;\n}\n@namespace \"http://www.w3.org/2000/svg\";\n```\n\n### `return`\n\nIf a `return` statement is executed in a `@js`, it aborts the\nevaluation of current block and all the subsequent content in the same\nblock, including ones other than `@js`, are discarded.\nFor example:\n\n```css\nsamp {\n  border: thin solid navy;\n  @js ({ color: 'blue' });\n  @js return;\n  background-color: white;\n  @js ({ margin: '4px' });\n  padding: @js '12px';\n}\n```\n\nThis results in the following:\n\n```css\nsamp {\n  border: thin solid navy;\n  color: blue;\n}\n```\n\n### `this`\n\nThe value of `this` in a `@js` is a PostCSS node in which the `@js` is\nincluded.\nThrough `this`, you can compute CSS contents in each `@js` depending\non where the `@js` is.\n\nThis is a very advanced feature.\nUse it at your own risk.\n\n### `postcss`\n\nA global variable `postcss` holds the Helpers object that PostCSS\npasses to this plugin.\nSee [PostCSS API] for details.\n\nThis is also a very advanced feature.\nUse it at your own risk.\n\n## Modules\n\nAs in nature, the scope of variables are bound within\na file or innermost braces (`{` ... `}`).\nPostCSS @js's module feature allows us to\npass values beyond files through `exports` and `require`.\nIf you are familiar with CommonJS module, you can easily\nunderstand the following example:\n\nIn `def.css`:\n\n```css\n@js const _ = exports.ratio = '80%';\n```\n\nIn `use.css`:\n\n```css\n@import url('./def.css');\n@js const def = require('./def.css');\n\nmain {\n  width: @js def.ratio;\n}\n```\n\nTo export variables, store them in the `exports` (or `module.exports`)\nobject, which is globally available by default.\nTo refer the exported variables, call `require` with\nthe path to the file exporting them.\n\nThe file specified in the argument of the `require` function must be\nimported by `@import` through [postcss-import] plugin.\nIf a `require`ed file is not `@import`ed, a \"file not found\" error\noccurs.\n\nAs in Node.js, `require` can be used to import JavaScript libraries.\n\n## Interpretation of Objects as CSS Fragments\n\nEvery value injected into CSS by `@js` must be one of the following:\n\n1. an [AsyncIterable] object,\n2. an [Iterable] object,\n3. a plain object\n   (an object whose prototype is either `Object.prototype` or `null`), or\n4. a PostCSS `Node` object.\n\nType checking is done in this order.\nIn what follows, we refer to these as _interpretable_ objects.\n\nEvery value enumerated in an interoperable Iterable or AsyncIterable\nmust be interpretable recursively.\nNested Iterables are visited recursively and their values are\ninterpreted one by one.\n\nIn a plain object, each of its properties is translated separately to\na CSS construct in accordance with the following rule:\n\n1. If its name starts with `@`, it is translated into an at-rule.\n   The name must be the name of the at-rule optionally followed by its\n   parameters.\n   The value must be either an interpretable object, which constitute\n   the block of the at-rule, or `undefined`, which indicates that the\n   at-rule have no block.\n2. Otherwise, if its value is an interpretable object, it is\n   translated into a styling rule.\n   The name and value of the property are used as the selector and\n   content of the styling rule, respectively.\n3. Otherwise, if its value is neither a function, `null`,\n   nor `undefined`, it is translated into a style property declaration.\n   The name and value of the property are used as the property name\n   and value of the declaration, respectively.\n   The value is stringified by `String()`.\n4. Otherwise, an error is raised.\n\nFor each of `@js` property values and `:@js` pseudo selectors,\nits value must not be either an interpretable object, function,\n`null`, or `undefined`.\nThe value is strigified by `String()` and injects into CSS.\n\nFor each of `@js` expressions and `yield`, its value may additionally\nbe one of the following:\n\n* `undefined`, which is simply discarded, or\n* a function, which will be called later with an argument given by\n  the next `yield`.\n  Its return value is interpreted as if it is `yield`ed.\n\nNote that, unlike `undefined`, `null` is not discarded and causes\nan error.\n\nThe rule of object interpretation is designed in a strict manner\nin order to protect you from accidental injection.\n\n## Related PostCSS plugins and CSS processors\n\nPostCSS @js is a CSS preprocessor, which allows us to transform CSS\niles before serving them to the clients.\nThe competitions of this plugin includes [Sass/Scss][Sass], [Less],\nand [Stylus].\nThe unique point of PostCSS @js is that its language is native\nJavaScript and therefore it allows the users to exploit the full power\nof JavaScript.\nAnother benefit of PostCSS @js is that it is a PostCSS plugin and\ntherefore it can be combined with other PostCSS plugins within a\nbundler or framework that includes PostCSS.\nConversely, it does not provide seamless interoperation with CSS\nvalues, such as computing values with units (`12em` and `34px`\nfor example) and lists of fonts, whereas other standalone CSS\npreprocessors can do that.\nIn `@js`, you must represent them in some JavaScript literals,\nsay strings.\n\nUse [PostCSS Calc] for calculation of CSS values.\nPostCSS @js does not provide any calculation of values with units\nbecause JavaScript does not allow us to overload binary operators\nand therefore writing such calculations in JavaScript is fairly\ncumbersome.\n\nPostCSS @js subsumes the functionality of [PostCSS Simple Variables]\nand [PostCSS Mixins] in the sense that, as seen in the above examples,\nJavaScript's variables and functions can be regarded as CSS variables\nand mixins, respectively.\n\nPostCSS @js does not conflict with [CSS Custom Properties], also\nknown as CSS variables.\nOne of their unique features is to represent dynamic context-dependent\nstyling, which PostCSS @js cannot provide inherently.\n\nPostCSS @js is also different from CSS-in-JS such as [JSS],\n[Styled Components], [Emotion], [Linaria], and many others.\nPostCSS @js embeds JavaScript in CSS, whereas CSS-in-JS embeds CSS\nin JavaScript.\nPostCSS @js is provided just for producing a plain CSS and therefore\ndoes not have any capability to collaborate with program main logic\nby itself.\n\n## Cheatsheet\n\nDefine a variable:\n\n```css\n@js const textSize = (`${14 + 2}pt`);\n@js const widthLimit = 640;\n@js const codeClass = '.code';\n@js const location = 'background';\n```\n\nSubstitute a variable in a property value:\n\n```css\nh1 {\n  font-size: @js (`calc(${textSize} * 2)`);\n}\n```\n\nSubstitute a variable in a property name:\n\n```css\nh1 {\n  @js ({ [`${location}-color`]: 'yellow' });\n}\n```\n\nSubstitute a variable in a selector:\n\n```css\n:@js(`pre${codeClass}`) {\n  font-family: monospace;\n}\n```\n\nSubstitute a variable in an at-rule:\n\n```css\n@js const atRule = (name, params) => rules =>\n  ({ [`@${name} ${params}`]: rules });\n@js atRule('media', `screen and (max-width: ${widthLimit}px)`) {\n  display: none;\n}\n```\n\nDefine a mixin:\n\n```css\n@js const makeBlack = {\n  color: black;\n}\n```\n\nInclude a mixin:\n\n```css\np {\n  @js makeBlack;\n}\n```\n\nDefine a mixin with parameters:\n\n```css\n@js const colorize = (fg, bg) => {\n  color: @js fg;\n  background-color: @js bg;\n}\n```\n\nInclude a mixin with arguments:\n\n```css\nstrong {\n  @js colorize('red', 'yellow');\n}\n```\n\nDefine a mixin with a hole:\n\n```css\n@js const mediaDark = content => {\n  @media screen and (prefers-color-scheme: dark) {\n    @js content;\n  }\n}\n```\n\nInclude a mixin with a hole:\n\n```css\nmain {\n  color: black;\n  @js mediaDark {\n    color: silver;\n  }\n}\n```\n\nDefine a higher-order mixin with parameters:\n\n```css\n@js const selectColor = (c1, c2, c3, c4) => content => {\n  @js content(c1, c3);\n  @js mediaDark {\n    @js content(c2, c4);\n  }\n}\n```\n\nInclude a higher-order mixin:\n\n```css\nnav {\n  @js yield selectColor('blue', 'green', 'white', 'black'), (c1, c2) => {\n    color: @js c1;\n    background-color: @js c2;\n  }\n}\n```\n\nConditionals:\n\n```css\n.box {\n  @js if (widthLimit > 600) yield {\n    max-height: 800px;\n  }\n  @js if (widthLimit <= 600)) yield {\n    height: 500px;\n  }\n}\n```\n\nIteration:\n\n```css\n@js for (const i of [1, 2, 3]) yield {\n  :@js(`p:nth-child(${i})`) {\n    font-size: @js (`calc(10px * ${i})`);\n  }\n}\n```\n\nExport variables for other CSS files:\n\n```css\n@js var _ = exports.textSize = textSize;\n@js var _ = exports.widthLimit = widthLimit;\n```\n\nImport variables from other CSS files:\n\n```css\n@import url('./global.css');\n@js const [{ textSize, widthLimit }] = [require('./global.css')];\n```\n\n## License\n\nMIT\n\n[PostCSS]: https://postcss.org\n[postcss-import]: https://github.com/postcss/postcss-import\n[PostCSS Calc]: https://github.com/postcss/postcss-calc\n[PostCSS Simple Variables]: https://github.com/postcss/postcss-simple-vars\n[PostCSS Mixins]: https://github.com/postcss/postcss-mixins\n[CSS Custom Properties]: https://developer.mozilla.org/en-US/docs/Web/CSS/--*\n[PostCSS Nesting]: https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-nesting\n[Acorn]: https://github.com/acornjs/acorn\n[Sass]: https://sass-lang.com\n[Less]: https://lesscss.org\n[Stylus]: https://stylus-lang.com\n[Styled Components]: https://styled-components.com\n[JSS]: https://cssinjs.org/\n[Emotion]: https://emotion.sh/docs/introduction\n[AsyncIterable]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator\n[Iterable]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n[PostCSS API]: https://postcss.org/api/\n[Linaria]: https://github.com/callstack/linaria\n",
	"readmeFilename": "README.md",
	"_downloads": 11
}