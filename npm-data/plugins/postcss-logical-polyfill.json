{
	"_id": "postcss-logical-polyfill",
	"_rev": "2-61f46a14cb611752226703c5a9304a25",
	"name": "postcss-logical-polyfill",
	"dist-tags": {
		"latest": "0.3.0"
	},
	"versions": {
		"0.2.0": {
			"name": "postcss-logical-polyfill",
			"version": "0.2.0",
			"keywords": [
				"postcss",
				"postcss-plugin",
				"css",
				"polyfill",
				"logical-properties",
				"physical-properties",
				"rtl",
				"ltr",
				"dir",
				"direction",
				"fallback",
				"compatibility",
				"typescript"
			],
			"author": {
				"name": "Saiya"
			},
			"license": "MIT",
			"_id": "postcss-logical-polyfill@0.2.0",
			"maintainers": [
				{
					"name": "evecalm",
					"email": "evecalm@live.com"
				}
			],
			"homepage": "https://github.com/oe/postcss-logical-polyfill#readme",
			"bugs": {
				"url": "https://github.com/oe/postcss-logical-polyfill/issues"
			},
			"dist": {
				"shasum": "73ad1b1baf593cc9fd06494fed1165ad257b3b54",
				"tarball": "https://registry.npmjs.org/postcss-logical-polyfill/-/postcss-logical-polyfill-0.2.0.tgz",
				"fileCount": 6,
				"integrity": "sha512-iPNFK+3DFL3rOhQ0zM07bG8laATfr7LW7vkhSSwsGUuIw/v7WzxxrnMh/bHipkPnrlJL3edDvwbH8js/CmZEEw==",
				"signatures": [
					{
						"sig": "MEUCIH6dFbqwr+CNvjKkgKdlR/aZxDWFAwmh46gCPfOBWunaAiEAgRiRo0tNC+oy5ycfxW/9XBXWnYeO+W2MCWdcCZ2a+zw=",
						"keyid": "SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U"
					}
				],
				"unpackedSize": 29575
			},
			"main": "dist/index.js",
			"_from": "file:postcss-logical-polyfill-0.2.0.tgz",
			"types": "dist/index.d.ts",
			"module": "dist/index.mjs",
			"engines": {
				"node": ">=14.0.0"
			},
			"scripts": {
				"dev": "vite",
				"lint": "tsc --noEmit",
				"test": "vitest",
				"build": "vite build",
				"test:ci": "vitest run",
				"examples": "tsx scripts/run-examples.ts",
				"prepublish": "pnpm run lint && pnpm run test:ci && pnpm run build",
				"preexamples": "pnpm run build",
				"test:coverage": "vitest run --coverage",
				"test:coverage:ui": "vitest --coverage --ui",
				"test:coverage:watch": "vitest --coverage"
			},
			"_npmUser": {
				"name": "evecalm",
				"email": "evecalm@live.com"
			},
			"_resolved": "/private/var/folders/1j/yrjn421j0wl9ffqx5mmqgk1m0000gp/T/8eb12d95d2e57f4a1c0a459988666a31/postcss-logical-polyfill-0.2.0.tgz",
			"_integrity": "sha512-iPNFK+3DFL3rOhQ0zM07bG8laATfr7LW7vkhSSwsGUuIw/v7WzxxrnMh/bHipkPnrlJL3edDvwbH8js/CmZEEw==",
			"repository": {
				"url": "git+https://github.com/oe/postcss-logical-polyfill.git",
				"type": "git"
			},
			"_npmVersion": "10.9.2",
			"description": "A PostCSS plugin that provides physical property polyfills for CSS logical properties with intelligent direction-aware selector handling",
			"directories": {},
			"_nodeVersion": "23.10.0",
			"dependencies": {
				"postcss-logical": "^8.0.0"
			},
			"_hasShrinkwrap": false,
			"devDependencies": {
				"tsx": "^4.19.4",
				"less": "^4.2.0",
				"sass": "^1.69.5",
				"vite": "^6.3.5",
				"chalk": "^5.4.1",
				"vitest": "^3.1.4",
				"postcss": "^8.4.0",
				"webpack": "^5.89.0",
				"css-loader": "^6.8.1",
				"typescript": "^5.8.3",
				"@types/node": "^22.15.21",
				"postcss-cli": "^11.0.1",
				"webpack-cli": "^5.1.4",
				"postcss-less": "^6.0.0",
				"postcss-scss": "^4.0.9",
				"postcss-loader": "^7.3.3",
				"vite-plugin-dts": "^4.5.4",
				"webpack-dev-server": "^4.15.1",
				"@vitest/coverage-v8": "^3.1.4",
				"html-webpack-plugin": "^5.5.3",
				"mini-css-extract-plugin": "^2.7.6"
			},
			"peerDependencies": {
				"postcss": "^8.0.0"
			},
			"_npmOperationalInternal": {
				"tmp": "tmp/postcss-logical-polyfill_0.2.0_1748150207390_0.9398308626680616",
				"host": "s3://npm-registry-packages-npm-production"
			}
		},
		"0.3.0": {
			"name": "postcss-logical-polyfill",
			"version": "0.3.0",
			"description": "A PostCSS plugin that provides physical property polyfills for CSS logical properties with intelligent direction-aware selector handling and block-direction optimization",
			"main": "dist/index.js",
			"module": "dist/index.mjs",
			"types": "dist/index.d.ts",
			"keywords": [
				"postcss",
				"postcss-plugin",
				"css",
				"polyfill",
				"logical-properties",
				"physical-properties",
				"rtl",
				"ltr",
				"dir",
				"direction",
				"fallback",
				"compatibility",
				"typescript"
			],
			"author": {
				"name": "Saiya"
			},
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/oe/postcss-logical-polyfill.git"
			},
			"bugs": {
				"url": "https://github.com/oe/postcss-logical-polyfill/issues"
			},
			"homepage": "https://github.com/oe/postcss-logical-polyfill#readme",
			"engines": {
				"node": ">=14.0.0"
			},
			"peerDependencies": {
				"postcss": "^8.0.0"
			},
			"dependencies": {
				"postcss-logical": "^8.1.0"
			},
			"devDependencies": {
				"@types/node": "^22.15.21",
				"@vitest/coverage-v8": "^3.1.4",
				"chalk": "^5.4.1",
				"css-loader": "^6.8.1",
				"html-webpack-plugin": "^5.5.3",
				"less": "^4.2.0",
				"mini-css-extract-plugin": "^2.7.6",
				"postcss": "^8.4.0",
				"postcss-cli": "^11.0.1",
				"postcss-less": "^6.0.0",
				"postcss-loader": "^7.3.3",
				"postcss-scss": "^4.0.9",
				"sass": "^1.69.5",
				"tsx": "^4.19.4",
				"typescript": "^5.8.3",
				"vite": "^6.3.5",
				"vite-plugin-dts": "^4.5.4",
				"vitest": "^3.1.4",
				"webpack": "^5.89.0",
				"webpack-cli": "^5.1.4",
				"webpack-dev-server": "^4.15.1"
			},
			"scripts": {
				"dev": "vite",
				"build": "vite build",
				"test": "vitest",
				"test:ci": "vitest run",
				"test:coverage": "vitest run --coverage",
				"test:coverage:watch": "vitest --coverage",
				"test:coverage:ui": "vitest --coverage --ui",
				"lint": "tsc --noEmit",
				"prepublish": "pnpm run lint && pnpm run test:ci && pnpm run build",
				"preexamples": "pnpm run build",
				"examples": "tsx scripts/run-examples.ts"
			},
			"_id": "postcss-logical-polyfill@0.3.0",
			"_integrity": "sha512-Y+bA8dLvKFHMLZ0DzsJFw46TBVKfI7ZB3KxJ2hYDl92nvrr1awImdb8BUU+A0PgySDF3ZJYqV+b3rVYhD7X6eg==",
			"_resolved": "/private/var/folders/1j/yrjn421j0wl9ffqx5mmqgk1m0000gp/T/9b94599b70ca57a721ee9d169818e7b7/postcss-logical-polyfill-0.3.0.tgz",
			"_from": "file:postcss-logical-polyfill-0.3.0.tgz",
			"_nodeVersion": "23.10.0",
			"_npmVersion": "10.9.2",
			"dist": {
				"integrity": "sha512-Y+bA8dLvKFHMLZ0DzsJFw46TBVKfI7ZB3KxJ2hYDl92nvrr1awImdb8BUU+A0PgySDF3ZJYqV+b3rVYhD7X6eg==",
				"shasum": "6f5cebd6e83ea758d75544c45fc530fb749605a4",
				"tarball": "https://registry.npmjs.org/postcss-logical-polyfill/-/postcss-logical-polyfill-0.3.0.tgz",
				"fileCount": 6,
				"unpackedSize": 38691,
				"signatures": [
					{
						"keyid": "SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U",
						"sig": "MEUCIQD9WJKfjG3TgeodRN60Psl+x3WT4iyl2n+3QGM5+1F0mAIgXqtetA6J967T+UlrwgFaDsQkIP/vf/77REo9adXeK5w="
					}
				]
			},
			"_npmUser": {
				"name": "evecalm",
				"email": "evecalm@live.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "evecalm",
					"email": "evecalm@live.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages-npm-production",
				"tmp": "tmp/postcss-logical-polyfill_0.3.0_1748184421408_0.6622183694564148"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2025-05-25T05:16:47.389Z",
		"modified": "2025-05-25T14:47:01.782Z",
		"0.2.0": "2025-05-25T05:16:47.611Z",
		"0.3.0": "2025-05-25T14:47:01.595Z"
	},
	"bugs": {
		"url": "https://github.com/oe/postcss-logical-polyfill/issues"
	},
	"author": {
		"name": "Saiya"
	},
	"license": "MIT",
	"homepage": "https://github.com/oe/postcss-logical-polyfill#readme",
	"keywords": [
		"postcss",
		"postcss-plugin",
		"css",
		"polyfill",
		"logical-properties",
		"physical-properties",
		"rtl",
		"ltr",
		"dir",
		"direction",
		"fallback",
		"compatibility",
		"typescript"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/oe/postcss-logical-polyfill.git"
	},
	"description": "A PostCSS plugin that provides physical property polyfills for CSS logical properties with intelligent direction-aware selector handling and block-direction optimization",
	"maintainers": [
		{
			"name": "evecalm",
			"email": "evecalm@live.com"
		}
	],
	"readme": "# postcss-logical-polyfill\n\n[![NPM Version][npm-img]][npm-url]\n[![Build Status][build-img]][build-url]\n[![Coverage Status][coverage-img]][coverage-url]\n[![NPM Downloads][downloads-img]][downloads-url]\n[![Types][types-img]][types-url]\n[![Package Size][size-img]][size-url]\n\nA PostCSS plugin that provides physical property polyfills for CSS logical properties, enabling backward compatibility for older browsers and environments that don't support logical properties natively.\n\n## Why?\n\nWhile most modern tools help you **upgrade** from physical properties to logical properties, this plugin does the **opposite** - it transforms logical properties back to physical properties for maximum browser compatibility.\n\nThe [CSS Logical Properties specification](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties) provides elegant direction-independent layout controls, but older browsers don't support them. This plugin acts as a polyfill, converting your modern logical properties to physical properties with appropriate direction selectors.\n\n**Key Differences from Other Tools:**\n- üîÑ **Reverse Direction**: Converts logical properties ‚Üí physical properties (not the other way around)\n- üéØ **Smart Scoping**: Automatically generates LTR and RTL versions for unscoped logical properties\n- üìê **Direction-Aware**: Respects existing direction selectors and converts accordingly\n\n## Features\n\n- **üì± Logical Property Polyfill**: Converts modern CSS logical properties to physical properties for browser compatibility\n- **üéØ Intelligent Direction Handling**: \n  - Unscoped logical properties ‚Üí Generate both `[dir=\"ltr\"]` and `[dir=\"rtl\"]` versions\n  - Scoped logical properties ‚Üí Convert according to existing direction selectors\n- **‚ö° Block-Direction Optimization**: **NEW!** Smart property classification for optimal output\n  - Block-only properties ‚Üí Generate single rule without direction selectors\n  - Inline properties ‚Üí Generate separate LTR/RTL rules as needed\n  - Significantly reduces CSS output size and eliminates duplicate rules\n- **üîÑ Output Order Control**: Configure the generation order of LTR and RTL rules\n  - `outputOrder: 'ltr-first'` (default) for standard layouts\n  - `outputOrder: 'rtl-first'` for RTL-primary sites and specificity control\n  - Crucial for CSS cascade behavior and framework integration\n- **üìê Direction-Aware Processing**: Respects existing direction selectors (`:dir(rtl)`, `[dir=\"rtl\"]`, `:dir(ltr)`, `[dir=\"ltr\"]`)\n- **‚öôÔ∏è Customizable Selectors**: Configure custom RTL and LTR selectors to match your project needs\n- **üèóÔ∏è Nested Rule Support**: Works seamlessly with media queries, at-rules, and nested selectors\n- **üîß Rule Optimization**: Intelligently merges duplicate rules and handles property overrides\n- **‚ö° Error Resilient**: Graceful fallbacks when transformations encounter issues with enhanced test coverage\n- **üîÑ Reverse Transformation**: Unlike other tools that upgrade to logical properties, this downgrades for compatibility\n\n## Installation\n\n```bash\n# Using npm\nnpm install postcss-logical-polyfill --save-dev\n\n# Using pnpm\npnpm add -D postcss-logical-polyfill\n\n# Using yarn\nyarn add -D postcss-logical-polyfill\n```\n\n## Processing Scope\n\nThis plugin processes **CSS Logical Properties** and transforms them into physical properties with appropriate direction selectors. Here's exactly what it handles:\n\n### ‚úÖ Supported Logical Properties\n\nThe plugin processes all standard [CSS Logical Properties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties) and intelligently categorizes them:\n\n**Block-Direction Properties** (generate single rule without direction selectors):\n- Properties containing `block` (e.g., `margin-block`, `padding-block-start`, `border-block-width`)\n- Block sizing properties (`block-size`, `min-block-size`, `max-block-size`)\n- Block scroll properties (`scroll-margin-block`, `scroll-padding-block`)\n\n**Inline-Direction Properties** (generate separate LTR and RTL rules):\n- Properties containing `inline` (e.g., `margin-inline`, `padding-inline-start`, `border-inline-color`)\n- Inline sizing properties (`inline-size`, `min-inline-size`, `max-inline-size`)\n- Inline scroll properties (`scroll-margin-inline`, `scroll-padding-inline`)\n- Border radius logical properties (`border-start-start-radius`, `border-end-start-radius`, etc.)\n\n**Mixed-Direction Properties** (affect both dimensions, generate LTR/RTL rules):\n- `inset` (shorthand affecting all four directions)\n\n### ‚ö†Ô∏è What This Plugin Does NOT Handle\n\n- **Physical Properties**: Regular CSS properties like `margin-left`, `padding-top`, `border-right` are left unchanged\n- **Writing Mode Properties**: `writing-mode`, `direction`, `text-orientation` are not processed\n- **Text Direction Properties**: `unicode-bidi`, `text-align` are not modified\n- **Grid/Flexbox Logical Properties**: Grid and flexbox logical properties may be handled by postcss-logical but are not the primary focus\n- **Custom Properties**: CSS custom properties (variables) are preserved as-is\n- **Non-CSS Content**: JavaScript, HTML, or other file types\n\n### üéØ Processing Behavior\n\n**Unscoped Logical Properties** ‚Üí Generate both LTR and RTL versions:\n```css\n/* Input */\n.element { margin-inline: 1rem; }\n\n/* Output */\n[dir=\"ltr\"] .element { margin-left: 1rem; margin-right: 1rem; }\n[dir=\"rtl\"] .element { margin-right: 1rem; margin-left: 1rem; }\n```\n\n**Block-Only Properties** ‚Üí Generate single rule (‚≠ê NEW optimization):\n```css\n/* Input */\n.element { margin-block: 1rem; }\n\n/* Output */\n.element { margin-top: 1rem; margin-bottom: 1rem; }\n```\n\n**Scoped Logical Properties** ‚Üí Convert according to existing scope:\n```css\n/* Input */\n[dir=\"rtl\"] .element { margin-inline-start: 1rem; }\n\n/* Output */\n[dir=\"rtl\"] .element { margin-right: 1rem; }\n```\n\n## Usage\n\n```js\n// postcss.config.js\nmodule.exports = {\n  plugins: [\n    require('postcss-logical-polyfill')()\n  ]\n}\n```\n\n```js\n// With options\nconst logicalPolyfill = require('postcss-logical-polyfill');\n\npostcss([\n  logicalPolyfill({\n    rtl: {\n      selector: '[dir=\"rtl\"]'  // Default\n    },\n    ltr: {\n      selector: '[dir=\"ltr\"]'  // Default\n    }\n  })\n])\n```\n\n### Input\n\n```css\n/* Unscoped logical properties - will generate both LTR and RTL versions */\n.container {\n  margin-inline: 1rem;\n  padding-inline-start: 1rem;\n}\n\n/* Block-direction properties - NEW! Generate single optimized rule */\n.content {\n  margin-block: 2rem;\n  padding-block-start: 1rem;\n}\n\n/* Scoped logical properties - will convert according to existing scope */\n:dir(rtl) .header {\n  margin-inline-end: 2rem;\n}\n\n[dir=\"ltr\"] .sidebar {\n  padding-inline: 1.5rem 1rem;\n}\n```\n\n### Output\n\n```css\n/* Generated LTR physical properties */\n[dir=\"ltr\"] .container {\n  margin-left: 1rem;\n  margin-right: 1rem;\n  padding-left: 1rem;\n}\n\n/* Generated RTL physical properties */\n[dir=\"rtl\"] .container {\n  margin-right: 1rem;\n  margin-left: 1rem;\n  padding-right: 1rem;\n}\n\n/* Block-direction properties - NEW! Single optimized rule without direction selectors */\n.content {\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n  padding-top: 1rem;\n}\n\n/* Scoped styles converted to physical properties */\n[dir=\"rtl\"] .header {\n  margin-left: 2rem;\n}\n\n[dir=\"ltr\"] .sidebar {\n  padding-left: 1.5rem;\n  padding-right: 1rem;\n}\n```\n\n## How It Works\n\nThis polyfill plugin intelligently processes your CSS through several optimized steps:\n\n1. **üîç Detection Phase**: Scans all CSS rules (including nested ones) to identify:\n   - Rules containing logical properties (`margin-inline`, `padding-block`, `inset-*`, etc.)\n   - Rules with existing direction selectors (`:dir(rtl)`, `[dir=\"rtl\"]`, etc.)\n   - **NEW**: Distinguishes between block-direction and inline-direction properties\n\n2. **üéØ Smart Property Classification** (‚≠ê NEW optimization):\n   - **Block-Direction Properties**: `margin-block`, `padding-block-start`, `inset-block`, etc.\n     - Generate single rules without direction selectors (same in LTR and RTL)\n     - Reduces CSS output size and eliminates duplicate rules\n   - **Inline-Direction Properties**: `margin-inline`, `padding-inline-start`, `inset-inline`, etc.\n     - Generate separate LTR and RTL rules (different values per direction)\n   - **Mixed Properties**: `inset` (affects all four directions)\n     - Generate LTR and RTL rules like inline properties\n\n3. **üîÑ Polyfill Transformation Phase**: For each qualifying rule:\n   - **Block-Only Rules**: Convert directly to physical properties without direction selectors\n   - **Inline/Mixed Rules**: Create separate LTR and RTL physical property versions\n   - **Scoped Direction Rules**: Convert logical properties according to the existing direction scope\n   - **Complex Rules**: Handle scenarios with both block and inline properties intelligently\n\n4. **üéØ Selector Application**: Adds appropriate direction selectors when needed:\n   - No selectors for block-only properties (optimization)\n   - `[dir=\"ltr\"]` for left-to-right physical properties\n   - `[dir=\"rtl\"]` for right-to-left physical properties  \n   - Cleans existing direction selectors to avoid duplication\n\n5. **üîß Optimization Phase**: \n   - Merges duplicate rules with identical selectors\n   - Handles property overrides correctly (later properties override earlier ones)\n   - Removes redundant CSS declarations\n   - **NEW**: Eliminates unnecessary direction-specific rules for block properties\n\n6. **‚ú® Output Generation**: Produces clean, optimized CSS with physical properties for maximum browser compatibility\n\n## More Examples\n\nCheck out the [examples directory](./examples) for more complex usage examples.\n\n## Options\n\n### `rtl`\n\nType: `Object`\nDefault: `{ selector: '[dir=\"rtl\"]' }`\n\nConfiguration for RTL processing.\n\n#### `rtl.selector`\n\nType: `String`\nDefault: `[dir=\"rtl\"]`\n\nThe selector to add for RTL rules. This selector determines how RTL-specific physical properties are scoped in the output CSS.\n\n### `ltr`\n\nType: `Object`\nDefault: `{ selector: '[dir=\"ltr\"]' }`\n\nConfiguration for LTR processing.\n\n#### `ltr.selector`\n\nType: `String`\nDefault: `[dir=\"ltr\"]`\n\nThe selector to add for LTR rules. This selector determines how LTR-specific physical properties are scoped in the output CSS.\n\n### `outputOrder`\n\nType: `'ltr-first' | 'rtl-first'`\nDefault: `'ltr-first'`\n\nControls the output order of generated rules for unscoped logical properties. This only affects rules that don't already have direction selectors (`:dir()` or `[dir=\"\"]`).\n\n- **`'ltr-first'` (default)**: Outputs LTR rules first, then RTL rules\n- **`'rtl-first'`**: Outputs RTL rules first, then LTR rules\n\n**Usage example:**\n\n```js\n// Default behavior - LTR rules come first\nlogicalPolyfill({\n  outputOrder: 'ltr-first'  // Default\n})\n\n// RTL-first output - useful for RTL-primary sites\nlogicalPolyfill({\n  outputOrder: 'rtl-first'\n})\n```\n\n**Input:**\n```css\n.button {\n  margin-inline: 1rem;\n}\n```\n\n**Output with `outputOrder: 'ltr-first'` (default):**\n```css\n[dir=\"ltr\"] .button {\n  margin-left: 1rem;\n  margin-right: 1rem;\n}\n[dir=\"rtl\"] .button {\n  margin-right: 1rem;\n  margin-left: 1rem;\n}\n```\n\n**Output with `outputOrder: 'rtl-first'`:**\n```css\n[dir=\"rtl\"] .button {\n  margin-right: 1rem;\n  margin-left: 1rem;\n}\n[dir=\"ltr\"] .button {\n  margin-left: 1rem;\n  margin-right: 1rem;\n}\n```\n\n**When to use `rtl-first`:**\n- üåç **RTL-primary websites**: Sites primarily serving RTL languages (Arabic, Hebrew, etc.)\n- üéØ **CSS specificity needs**: When you need RTL rules to have lower specificity for easier LTR overrides\n- üì± **Framework integration**: When your CSS framework expects RTL rules to come first\n\n**Important note:** This option only affects unscoped logical properties. Rules that already have direction selectors (like `:dir(rtl) .element` or `[dir=\"ltr\"] .element`) maintain their original order and are not affected by this setting.\n\n## ‚ö†Ô∏è Important Usage Notes\n\n### 1. **Direction Attribute Required in HTML**\n\nWhen using the default selectors (`[dir=\"rtl\"]` and `[dir=\"ltr\"]`), you **MUST** set the `dir` attribute on your HTML elements, even for LTR layouts:\n\n```html\n<!-- ‚úÖ CORRECT: Always specify dir attribute -->\n<html dir=\"ltr\">  <!-- For left-to-right layouts -->\n<html dir=\"rtl\">  <!-- For right-to-left layouts -->\n\n<!-- ‚ùå INCORRECT: Missing dir attribute will cause styles not to apply -->\n<html>\n```\n\n**Why this matters:**\n- The plugin generates CSS rules with attribute selectors like `[dir=\"ltr\"]` and `[dir=\"rtl\"]`\n- Without the `dir` attribute in your HTML, these selectors won't match and your styles won't apply\n- This applies to **both** LTR and RTL layouts - you can't omit `dir=\"ltr\"` for LTR layouts\n\n**Benefits of setting the `dir` attribute:**\n- üéØ **Explicit Direction Declaration**: Makes the text direction intention clear for both browsers and developers\n- üåê **Accessibility Enhancement**: Screen readers and assistive technologies use `dir` to properly announce content direction\n- üîß **CSS Selector Targeting**: Enables precise CSS targeting with `[dir=\"ltr\"]` and `[dir=\"rtl\"]` attribute selectors\n- üì± **Framework Compatibility**: Many CSS frameworks and libraries expect and utilize the `dir` attribute\n- üöÄ **Future-Proof**: Prepares your HTML for native CSS logical property support when you eventually migrate\n- üîÑ **Dynamic Direction Switching**: Allows JavaScript to easily toggle between LTR and RTL by changing a single attribute\n- üåç **Internationalization Ready**: Essential foundation for proper RTL language support (Arabic, Hebrew, etc.)\n- üêõ **Debugging Made Easy**: Visual indication in DevTools of which direction mode is active\n\n### 2. **Understanding Selector Configuration**\n\nThe `selector` options control how the plugin scopes the generated physical properties:\n\n```js\n// Default configuration\nlogicalPolyfill({\n  rtl: { selector: '[dir=\"rtl\"]' },  // Targets elements with dir=\"rtl\"\n  ltr: { selector: '[dir=\"ltr\"]' }   // Targets elements with dir=\"ltr\"\n})\n\n// Custom configuration example\nlogicalPolyfill({\n  rtl: { selector: '.rtl-layout' },  // Targets elements with class=\"rtl-layout\"\n  ltr: { selector: '.ltr-layout' }   // Targets elements with class=\"ltr-layout\"\n})\n```\n\nWhen you customize selectors, make sure your HTML matches:\n\n```html\n<!-- For custom class-based selectors -->\n<html class=\"ltr-layout\">  <!-- Matches .ltr-layout selector -->\n<html class=\"rtl-layout\">  <!-- Matches .rtl-layout selector -->\n```\n\n## Advanced Usage\n\n### Working with Existing Direction Selectors\n\nThe plugin intelligently handles existing direction-specific selectors:\n\n```css\n/* Input: Mixed logical properties with direction selectors */\n.component {\n  margin-inline: 1rem; /* Will generate both LTR and RTL versions */\n}\n\n:dir(rtl) .component {\n  padding-inline-start: 2rem; /* Will only generate RTL version */\n}\n\n[dir=\"ltr\"] .component {\n  border-inline-end: 1px solid; /* Will only generate LTR version */\n}\n```\n\n### Custom Direction Selectors\n\nConfigure custom selectors for specific frameworks or design systems:\n\n```js\npostcss([\n  logicalPolyfill({\n    ltr: { selector: '.ltr' },      // For frameworks like Tailwind\n    rtl: { selector: '.rtl' }       // Custom RTL class\n  })\n])\n```\n\n### Best Practices\n\n1. **üéØ Start with Logical Properties**: Write your CSS using logical properties, let the plugin handle the polyfill\n2. **‚ö° Minimize Pre-scoped Rules**: Let the plugin automatically generate direction variants for better maintainability\n3. **üîß Test Both Directions**: Always test your layouts in both LTR and RTL modes\n4. **üì± Consider Progressive Enhancement**: Use this plugin to ensure compatibility while keeping logical properties in your source code\n5. **üîÑ Gradual Migration**: Perfect for teams transitioning from physical to logical properties\n\n## Examples\n\nThis package includes several examples showing how to integrate with different build systems and preprocessors:\n\n### Basic Usage\n\nA simple example with plain CSS and PostCSS.\n\n```bash\n# Run the basic example\ncd examples/basic\nnpx tsx process.ts\n```\n\n### LESS Integration\n\nExample showing how to use with LESS preprocessor.\n\n```bash\n# Run the LESS example\ncd examples/less\nnpx tsx process.ts\n```\n\n### SASS Integration\n\nExample showing how to use with SASS preprocessor.\n\n```bash\n# Run the SASS example\ncd examples/sass\nnpx tsx process.ts\n```\n\n### Output Order Configuration\n\nExample demonstrating the `outputOrder` configuration option for controlling LTR/RTL rule generation order.\n\n```bash\n# Run the output order example\ncd examples/output-order\nnpx tsx process.ts\n```\n\nThis example shows:\n- How `outputOrder: 'ltr-first'` (default) generates LTR rules before RTL rules\n- How `outputOrder: 'rtl-first'` generates RTL rules before LTR rules\n- That only unscoped logical properties are affected by this setting\n- Side-by-side comparison of both output styles\n\n### PostCSS CLI Integration\n\nExample showing how to use with PostCSS CLI tool.\n\n```bash\n# Run the PostCSS CLI example\ncd examples/postcss-cli\nnpx tsx process.ts\n```\n\nThis example demonstrates:\n- Setting up PostCSS configuration with the plugin\n- Using PostCSS CLI to process CSS files\n- Integration with package.json scripts\n- Command-line usage patterns\n\n### Webpack Integration\n\nExample showing how to integrate with Webpack.\n\n```bash\n# Run the Webpack example\ncd examples/webpack\nnpx tsx process.ts\n```\n\n### Running All Examples\n\nYou can run all examples at once using:\n\n```bash\n# Run all examples\npnpm run examples\n```\n\n## Requirements\n\n- Node.js 16.0.0 or later\n- PostCSS 8.0.0 or later\n\n## Contributing\n\nContributions are welcome! Please see our [contributing guidelines](./CONTRIBUTING.md) for details.\n\nFor information about the coverage badge setup, see [coverage badge documentation](./docs/coverage-badge-setup.md).\n\n## Credits\n\nThis plugin wraps and extends [postcss-logical](https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-logical) to provide polyfill functionality.\n\n## License\n\n[MIT](./LICENSE)\n\n[npm-url]: https://www.npmjs.com/package/postcss-logical-polyfill\n[npm-img]: https://img.shields.io/npm/v/postcss-logical-polyfill\n[build-url]: https://github.com/oe/postcss-logical-polyfill/actions/workflows/ci.yml\n[build-img]: https://github.com/oe/postcss-logical-polyfill/actions/workflows/ci.yml/badge.svg\n[coverage-url]: https://codecov.io/gh/oe/postcss-logical-polyfill\n[coverage-img]: https://codecov.io/gh/oe/postcss-logical-polyfill/branch/main/graph/badge.svg\n[downloads-url]: https://www.npmjs.com/package/postcss-logical-polyfill\n[downloads-img]: https://img.shields.io/npm/dm/postcss-logical-polyfill\n[size-url]: https://packagephobia.com/result?p=postcss-logical-polyfill\n[size-img]: https://packagephobia.com/badge?p=postcss-logical-polyfill\n[types-url]: https://www.npmjs.com/package/postcss-logical-polyfill\n[types-img]: https://img.shields.io/npm/types/postcss-logical-polyfill\n",
	"readmeFilename": "README.md",
	"_downloads": 0
}