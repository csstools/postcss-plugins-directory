{
	"_id": "mqpacker",
	"_rev": "1-128434a5ed3b8bab0d16fea4cdb6ca84",
	"name": "mqpacker",
	"dist-tags": {
		"latest": "7.0.0"
	},
	"versions": {
		"7.0.0": {
			"name": "mqpacker",
			"description": "Literally just css-mqpacker reuploaded to npm. --- Pack same CSS media query rules into one using PostCSS",
			"version": "7.0.0",
			"author": {
				"name": "Kyo Nagashima",
				"email": "hail2u@gmail.com",
				"url": "https://kyonagashima.com/"
			},
			"bin": {
				"mqpacker": "./bin/mqpacker.js"
			},
			"bugs": {
				"url": "https://github.com/hail2u/node-css-mqpacker/issues"
			},
			"dependencies": {
				"minimist": "^1.2.0",
				"postcss": "^7.0.0"
			},
			"devDependencies": {
				"nodeunit": "^0.11.3"
			},
			"homepage": "https://github.com/hail2u/node-css-mqpacker",
			"keywords": [
				"css",
				"media",
				"postcss-plugin",
				"query"
			],
			"license": "MIT",
			"main": "index.js",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/hail2u/node-css-mqpacker.git"
			},
			"scripts": {
				"test": "nodeunit test"
			},
			"gitHead": "d16ce22056201e6d62a376972e4715b0d3079690",
			"_id": "mqpacker@7.0.0",
			"_nodeVersion": "12.2.0",
			"_npmVersion": "6.9.0",
			"dist": {
				"integrity": "sha512-Pyixs8cp582egVG1M8Y7rmL9eRIDz3nM0otY5KGYe/LDNb1tW4/wX/C+WlY1Z5BPZVAZCaTB7j4KLXtC5syKhw==",
				"shasum": "d78a7e6c3792a27553f3a4e4489bf3b2e2f5fab0",
				"tarball": "https://registry.npmjs.org/mqpacker/-/mqpacker-7.0.0.tgz",
				"fileCount": 37,
				"unpackedSize": 23911,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdFdzTCRA9TVsSAnZWagAAEDIP/RQDfFNqeeBTka12kqfa\nJbql8B7U0Hf0HXXJZykQ32G9cu3dDxcGi6szatI1kPzvClKv+VaMaIzu1FIb\nWlXFHr6tSUWK7V99lbmsgtI+RE/nCrEuz2wrZel1qp5qF2z7hk+U8rDJyGwI\npjVtNpuUrV0fuzZO0SRTmxm6LXPNRlXG+xDXnTNliDOF1i4OZlfBLfEKrUAA\nLP4WWO0wL9FghhqlWrkLjOmXPfD31asNiAg/Bph+Td0SclqgtATTbaLbCRPc\nI+mv+S6k8kfZ7Aa4XIXrUzXC6zl5a8A+DV48yFWTq1ektji2q1Uc0nfKeR8r\nBx2rw9jQvrLIDoPb2wgBg0nzomFD5PEAxIPr1I/VujRWABFU+MmYng+/YoTe\nQFmaabUiuSZQ+6u5rg9dOYBMSqR7J0+tWFtS4apPH5ujmux4+exr5nrSmlXo\nYzdfrzc74YqJOMkiowPxvKgwI8U6st/zZHkL2D3cg/MqZ7nFNKv4HaaAqNw0\nMCss5YSUe4Xq4X9QCY6SIsbejXoGOl0V8FPLZXLLDimO06JejctHMlWjBM/3\nhrApb93K6u9Jqzqdv3tX9DEWxE1e3IqL9THJkqJPvBsus/CD4g07xwCmYdzz\nobvWqi7mKW8h1JRJ9f8VbmKC4T9+QFr/+mlm+0KrrPnBMTDBORTZTSgaKYct\n+PEr\r\n=Y43Z\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEQCIHEKvqL0OyC0TACfWvxMRQOHN/3Im9HF7eN5SAzQteGUAiAHVxQ5lmDAERiyfpvz6fZQOFDIpHjGfrr2HkR+CsDliw=="
					}
				]
			},
			"maintainers": [
				{
					"name": "corysimmons",
					"email": "csimmonswork@gmail.com"
				}
			],
			"_npmUser": {
				"name": "corysimmons",
				"email": "csimmonswork@gmail.com"
			},
			"directories": {},
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/mqpacker_7.0.0_1561713875082_0.915787185531366"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2019-06-28T09:24:35.081Z",
		"7.0.0": "2019-06-28T09:24:35.244Z",
		"modified": "2022-05-09T22:10:41.291Z"
	},
	"maintainers": [
		{
			"name": "corysimmons",
			"email": "csimmonswork@gmail.com"
		}
	],
	"description": "Literally just css-mqpacker reuploaded to npm. --- Pack same CSS media query rules into one using PostCSS",
	"homepage": "https://github.com/hail2u/node-css-mqpacker",
	"keywords": [
		"css",
		"media",
		"postcss-plugin",
		"query"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/hail2u/node-css-mqpacker.git"
	},
	"author": {
		"name": "Kyo Nagashima",
		"email": "hail2u@gmail.com",
		"url": "https://kyonagashima.com/"
	},
	"bugs": {
		"url": "https://github.com/hail2u/node-css-mqpacker/issues"
	},
	"license": "MIT",
	"readme": "CSS MQPacker\n============\n\nPack same CSS media query rules into one using PostCSS\n\n\nSYNOPSIS\n--------\n\nA well componentized CSS file may have same media queries that can merge:\n\n```css\n.foo {\n  width: 240px;\n}\n\n@media screen and (min-width: 768px) {\n  .foo {\n    width: 576px;\n  }\n}\n\n.bar {\n  width: 160px;\n}\n\n@media screen and (min-width: 768px) {\n  .bar {\n    width: 384px;\n  }\n}\n```\n\nThis PostCSS plugin packs exactly same media queries:\n\n```css\n.foo {\n  width: 240px;\n}\n\n.bar {\n  width: 160px;\n}\n\n@media screen and (min-width: 768px) {\n  .foo {\n    width: 576px;\n  }\n  .bar {\n    width: 384px;\n  }\n}\n```\n\n\nINSTALL\n-------\n\n    $ npm install css-mqpacker\n\n\nUSAGE\n-----\n\nOf course, this package can be used as PostCSS plugin:\n\n```javascript\n#!/usr/bin/env node\n\n\"use strict\";\n\nconst fs = require(\"fs\");\nconst postcss = require(\"postcss\");\n\npostcss([\n  require(\"autoprefixer-core\")(),\n  require(\"css-mqpacker\")()\n]).process(fs.readFileSync(\"from.css\", \"utf8\")).then(function (result) {\n  console.log(result.css);\n});\n```\n\nIt is a recommended way to use this tool.\n\n\n### As standard Node.js package\n\nThis package is also a Node.js module. For example, you can read `from.css`,\nprocess its content, and output processed CSS to STDOUT:\n\n```javascript\n#!/usr/bin/env node\n\n\"use strict\";\n\nconst fs = require(\"fs\");\nconst mqpacker = require(\"css-mqpacker\");\n\nconsole.log(mqpacker.pack(fs.readFileSync(\"from.css\", \"utf8\"), {\n  from: \"from.css\",\n  map: {\n    inline: false\n  },\n  to: \"to.css\"\n}).css);\n```\n\n\n### As CLI Program\n\nThis package also installs a command line interface.\n\n    $ node ./node_modules/.bin/mqpacker --help\n    Usage: mqpacker [options] INPUT [OUTPUT]\n    \n    Description:\n      Pack same CSS media query rules into one using PostCSS\n    \n    Options:\n      -s, --sort       Sort “min-width” queries.\n          --sourcemap  Create source map file.\n      -h, --help       Show this message.\n          --version    Print version information.\n    \n    Use a single dash for INPUT to read CSS from standard input.\n    \n    Examples:\n      $ mqpacker fragmented.css\n      $ mqpacker fragmented.css > packed.css\n\nWhen PostCSS failed to parse INPUT, CLI shows a CSS parse error in GNU error\nformat instead of Node.js stack trace.\n\nThe `--sort` option does not currently support a custom function.\n\nIf you install this package in global, CLI will be available somewhere in the\n`$PATH`.\n\n\nOPTIONS\n-------\n\n### sort\n\nBy default, CSS MQPacker pack and order media queries as they are defined ([the\n“first win” algorithm][1]). If you want to sort media queries automatically,\npass `sort: true` to this module.\n\n```javascript\npostcss([\n  mqpacker({\n    sort: true\n  })\n]).process(css);\n```\n\nCurrently, this option only supports `min-width` queries with specific units\n(`ch`, `em`, `ex`, `px`, and `rem`). If you want to do more, you need to create\nyour own sorting function and pass it to this module like this:\n\n```javascript\npostcss([\n  mqpacker({\n    sort: function (a, b) {\n      return a.localeCompare(b);\n    }\n  })\n]).process(css);\n```\n\nIn this example, all your media queries will sort by A-Z order.\n\nThis sorting function is directly passed to `Array#sort()` method of an array of\nall your media queries.\n\n\nAPI\n---\n\n### pack(css, [options])\n\nPacks media queries in `css`.\n\nThe second argument is optional. The `options` are:\n\n- [options][2] mentioned above\n- the second argument of [PostCSS’s `process()` method][3]\n\nYou can specify both at the same time.\n\n```javascript\nconst fs = require(\"fs\");\nconst mqpacker = require(\"css-mqpacker\");\n\nconst result = mqpacker.pack(fs.readFileSync(\"from.css\", \"utf8\"), {\n  from: \"from.css\",\n  map: {\n    inline: false\n  },\n  sort: true,\n  to: \"to.css\"\n});\nfs.writeFileSync(\"to.css\", result.css);\nfs.writeFileSync(\"to.css.map\", result.map);\n```\n\n\nNOTES\n-----\n\nWith CSS MQPacker, the processed CSS is always valid CSS, but you and your\nwebsite user will get unexpected results. This section explains how CSS MQPacker\nworks and what you should keep in mind.\n\n\n### CSS Cascading Order\n\nCSS MQPacker changes rulesets’ order. This means the processed CSS will have an\nunexpected cascading order. For example:\n\n```css\n@media (min-width: 640px) {\n  .foo {\n    width: 300px;\n  }\n}\n\n.foo {\n  width: 400px;\n}\n```\n\nBecomes:\n\n```css\n.foo {\n  width: 400px;\n}\n\n@media (min-width: 640px) {\n  .foo {\n    width: 300px;\n  }\n}\n```\n\n`.foo` is always `400px` with original CSS. With processed CSS, however, `.foo`\nis `300px` if viewport is wider than `640px`.\n\nThis does not occur on small project. However, this could occur frequently on\nlarge project. For example, if you want to override a CSS framework (like\nBootstrap) component declaration, your whole CSS code will be something similar\nto above example. To avoid this problem, you should pack only CSS you write, and\nthen concatenate with a CSS framework.\n\n\n### The “First Win” Algorithm\n\nCSS MQPacker is implemented with the “first win” algorithm. This means:\n\n```css\n.foo {\n  width: 10px;\n}\n\n@media (min-width: 640px) {\n  .foo {\n    width: 150px;\n  }\n}\n\n.bar {\n  width: 20px;\n}\n\n@media (min-width: 320px) {\n  .bar {\n    width: 200px;\n  }\n}\n\n@media (min-width: 640px) {\n  .bar {\n    width: 300px;\n  }\n}\n```\n\nBecomes:\n\n```css\n.foo {\n  width: 10px;\n}\n\n.bar {\n  width: 20px;\n}\n\n@media (min-width: 640px) {\n  .foo {\n    width: 150px;\n  }\n  .bar {\n    width: 300px;\n  }\n}\n\n@media (min-width: 320px) {\n  .bar {\n    width: 200px;\n  }\n}\n```\n\nThis breaks cascading order of `.bar`, and `.bar` will be displayed in `200px`\ninstead of `300px` even if a viewport wider than `640px`.\n\nI suggest defining a query order on top of your CSS:\n\n```css\n@media (min-width: 320px) { /* Wider than 320px */ }\n@media (min-width: 640px) { /* Wider than 640px */ }\n```\n\nIf you use simple `min-width` queries only, [the `sort` option][4] can help.\n\n\n### Multiple Classes\n\nCSS MQPacker works only with CSS. This may break CSS applying order to an\nelements that have multiple classes. For example:\n\n```css\n@media (min-width: 320px) {\n  .foo {\n    width: 100px;\n  }\n}\n\n@media (min-width: 640px) {\n  .bar {\n    width: 200px;\n  }\n}\n\n@media (min-width: 320px) {\n  .baz {\n    width: 300px;\n  }\n}\n```\n\nBecomes:\n\n```css\n@media (min-width: 320px) {\n  .foo {\n    width: 100px;\n  }\n  .baz {\n    width: 300px;\n  }\n}\n\n@media (min-width: 640px) {\n  .bar {\n    width: 200px;\n  }\n}\n```\n\nThe result looks good. However, if an HTML element has `class=\"bar baz\"` and\nviewport width larger than `640px`, that element `width` incorrectly set to\n`200px` instead of `300px`. This problem cannot be resolved only with CSS, so be\ncareful!\n\n\nLICENSE\n-------\n\nMIT: http://hail2u.mit-license.org/2014\n\n\n[1]: #the-first-win-algorithm\n[2]: #options\n[3]: http://api.postcss.org/global.html#processOptions\n[4]: #sort\n",
	"readmeFilename": "README.md"
}