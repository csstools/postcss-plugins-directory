{
	"_id": "postcss-cherrypicker",
	"_rev": "2-13c5e3d3e1be0c7698ce86834f743dc4",
	"name": "postcss-cherrypicker",
	"dist-tags": {
		"latest": "0.1.0"
	},
	"versions": {
		"0.1.0": {
			"name": "postcss-cherrypicker",
			"version": "0.1.0",
			"description": "PostCSS plugin that removes unused CSS styles",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"cherrypicker"
			],
			"author": {
				"name": "MrBBot",
				"email": "me@mrbbot.co.uk"
			},
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "https://github.com/mrbbot/postcss-cherrypicker.git"
			},
			"bugs": {
				"url": "https://github.com/mrbbot/postcss-cherrypicker/issues"
			},
			"homepage": "https://github.com/mrbbot/postcss-cherrypicker",
			"dependencies": {
				"@babel/parser": "^7.0.0-beta.51",
				"asyncro": "^3.0.0",
				"cheerio": "^1.0.0-rc.2",
				"globby": "^8.0.1",
				"postcss": "^6.0.16"
			},
			"devDependencies": {
				"@types/cheerio": "^0.22.8",
				"eslint": "^4.18.2",
				"eslint-config-postcss": "^2.0.2",
				"jest": "^22.4.2"
			},
			"scripts": {
				"test": "jest && eslint **/*.js",
				"test:dev": "jest --watch"
			},
			"main": "src/index.js",
			"files": [
				"src"
			],
			"eslintConfig": {
				"extends": "eslint-config-postcss",
				"env": {
					"jest": true
				},
				"parserOptions": {
					"ecmaVersion": 2017,
					"ecmaFeatures": {
						"jsx": true
					}
				}
			},
			"jest": {
				"testEnvironment": "node"
			},
			"licenseText": "The MIT License (MIT)\n\nCopyright 2018 MrBBot <me@mrbbot.co.uk>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
			"_id": "postcss-cherrypicker@0.1.0",
			"dist": {
				"shasum": "6ad0a31d82a1fa4330ca2e94fdcc4e3e14ae5525",
				"tarball": "https://registry.npmjs.org/postcss-cherrypicker/-/postcss-cherrypicker-0.1.0.tgz",
				"fileCount": 13,
				"unpackedSize": 10613,
				"integrity": "sha512-zF/w05e+5MTxuU5nnbtp4pOUVoIp8nztW1vL1X9GicI4if/r4jOnyMWvy6s2jkScmNQKVrSXxKn9dLijpP4KlQ==",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEYCIQCRiEAyWuuMbH+gha8NGymrZtrFlzAvi6ruG1Q32XohwAIhANVv13W472oR98D0JNYq2A65Qk4itjaK1M0MV23Q7g/S"
					}
				]
			},
			"maintainers": [
				{
					"name": "mrbbot",
					"email": "mrbbot@gmail.com"
				}
			],
			"_npmUser": {
				"name": "mrbbot",
				"email": "mrbbot@gmail.com"
			},
			"directories": {},
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-cherrypicker_0.1.0_1530723764289_0.3263829604617614"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2018-07-04T17:02:44.288Z",
		"0.1.0": "2018-07-04T17:02:44.398Z",
		"modified": "2022-06-24T09:35:11.033Z"
	},
	"maintainers": [
		{
			"name": "mrbbot",
			"email": "mrbbot@gmail.com"
		}
	],
	"description": "PostCSS plugin that removes unused CSS styles",
	"homepage": "https://github.com/mrbbot/postcss-cherrypicker",
	"keywords": [
		"postcss",
		"css",
		"postcss-plugin",
		"cherrypicker"
	],
	"repository": {
		"type": "git",
		"url": "https://github.com/mrbbot/postcss-cherrypicker.git"
	},
	"author": {
		"name": "MrBBot",
		"email": "me@mrbbot.co.uk"
	},
	"bugs": {
		"url": "https://github.com/mrbbot/postcss-cherrypicker/issues"
	},
	"license": "MIT",
	"readme": "# PostCSS Cherrypicker [![Build Status][ci-img]][ci]\n\n[PostCSS] plugin to reduce the size of CSS files by removing unused styles from them.\n\n[PostCSS]: https://github.com/postcss/postcss\n[Globby]:  https://github.com/sindresorhus/globby\n[ci-img]:  https://travis-ci.org/mrbbot/postcss-cherrypicker.svg\n[ci]:      https://travis-ci.org/mrbbot/postcss-cherrypicker\n\n## Installation\n\nInstall it using npm or Yarn.\n\n```sh\nnpm install postcss-cherrypicker\n\nyarn add postcss-cherrypicker\n```\n\n## Usage\n\nCherrypicker works by checking every CSS selector against your markup and removing any that don't match\nanything.\n\nHere is an example configuration:\n\n```js\npostcss([\n    require('postcss-cherrypicker')(\n        {\n            files: [\n                \"src/index.html\",           // single file\n                \"src/pages/**/*.html\",      // glob with html files\n                \"src/more-pages\",           // directory\n                \"src/jsx/*.js\",             // glob with js files\n                \"src/vue/*.vue\",            // glob with vue files\n                {\n                    path: \"src/js/*.js\",    // glob\n                    contains: true          // in contains mode\n                }\n            ]\n        }\n    )\n])\n```\n\nSee [PostCSS] docs for examples on how to configure your environment.\n\nYou must provide an options object to the plugin containing a `files` array of all of the markup files you would like to\ncompare your CSS against. Internally, [Globby] is used so you can use files, directories, or globs. As shown above, you\ncan use a string or an object with a `path` field to represent a file set.\n\nThe file will be parsed differently depending on the extension.\n\n|Extension|Parsing|\n|-|-|\n|html|The entire file is parsed|\n|vue|The `template` section of the single file component is parsed|\n|js|The file is scanned for JSX which is then converted to HTML and parsed|\n\nIf you're using an object to specify a file path, and you set the `contains` field to true, Cherrypicker won't parse\nyour file and will instead check if it contains the class name, id, or tag name. This can be helpful when adding classes\nwith `element.classList.add(...)` or with frameworks that use a virtual DOM and require calls to `createElement` or `h`.\n",
	"readmeFilename": "README.md",
	"_downloads": 7
}