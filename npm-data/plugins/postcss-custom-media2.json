{
	"_id": "postcss-custom-media2",
	"_rev": "1-3f56aa52d8af8b6ef8719a257cfe3080",
	"name": "postcss-custom-media2",
	"dist-tags": {
		"latest": "8.0.1"
	},
	"versions": {
		"8.0.1": {
			"name": "postcss-custom-media2",
			"version": "8.0.1",
			"description": "Use Custom Media Queries in CSS",
			"author": {
				"name": "Jonathan Neal",
				"email": "jonathantneal@hotmail.com"
			},
			"contributors": [
				{
					"name": "Maxime Thirouin"
				}
			],
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/postcss/postcss-custom-media.git"
			},
			"homepage": "https://github.com/postcss/postcss-custom-media#readme",
			"bugs": {
				"url": "https://github.com/postcss/postcss-custom-media/issues"
			},
			"main": "index.cjs.js",
			"module": "index.es.mjs",
			"scripts": {
				"prepublishOnly": "npm test",
				"pretest": "rollup -c .rollup.js --silent",
				"test": "echo 'Running tests...'; npm run test:js && npm run test:tape",
				"test:js": "eslint *.js lib/*.js --cache --ignore-path .gitignore --quiet",
				"test:tape": "postcss-tape"
			},
			"engines": {
				"node": ">=10.0.0"
			},
			"peerDependencies": {
				"postcss": "^8.4.5"
			},
			"devDependencies": {
				"@babel/core": "^7.16.12",
				"@babel/plugin-syntax-dynamic-import": "^7.8.3",
				"@babel/preset-env": "^7.16.11",
				"@rollup/plugin-babel": "^5.3.0",
				"babel-eslint": "^10.1.0",
				"eslint": "^7.10.0",
				"postcss": "^8.4.5",
				"postcss-tape": "^6.0.1",
				"pre-commit": "^1.2.2",
				"rollup": "^2.66.1"
			},
			"eslintConfig": {
				"env": {
					"browser": true,
					"es6": true,
					"node": true
				},
				"extends": "eslint:recommended",
				"parser": "babel-eslint",
				"parserOptions": {
					"ecmaVersion": 2018,
					"impliedStrict": true,
					"sourceType": "module"
				}
			},
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"custom",
				"media",
				"query",
				"queries",
				"w3c",
				"csswg",
				"atrule",
				"at-rule",
				"specification"
			],
			"gitHead": "2df2291c8212dd340d6df6c485a7bf837151f242",
			"_id": "postcss-custom-media2@8.0.1",
			"_nodeVersion": "16.13.0",
			"_npmVersion": "8.1.3",
			"dist": {
				"integrity": "sha512-GcKJi43MMCHcFT8NXFvqGgKNh1NX1jSJZ1oFW4ok7+X+PvoHg2eWIf5gfl8phnlYUmg9LuBCvW3QSfnLQHzJ4g==",
				"shasum": "79c0dfecfc6a821ba3624b925a911ef74a9b287b",
				"tarball": "https://registry.npmjs.org/postcss-custom-media2/-/postcss-custom-media2-8.0.1.tgz",
				"fileCount": 5,
				"unpackedSize": 41175,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh9A1xCRA9TVsSAnZWagAA2YgP/jh8vPMG5cNLx9ipFihR\nZR3wXeSTTyqa1ZaG878mmzbLkmJVvsrtUiiEUH4GybUHwEA+gLbDwwc6smrY\nTNlaKYWLHOmJ48yrKZGMCE4qwTUU2+E8XyybwHL8O4V0J4Gd7+YZMxAe9Oba\nrVkkWIhs7gU1GnGE6kccJsGNcltwS8PTGVM41JjV7SUX6irsVbcm3U6ezxDs\n/r3U0Tlg51h5T2PTy1I6tyIqkmz35gc4Gz9fHyh+5cc7LVwzF4E1f41BbBzD\n083DX88d73sR/WlHPTsNA846OVmaho6xBmme0yTBAVBPC81i/znKDOOta18C\nQkMYN6dyblHybhOGfVZEvXZ61uJUhWga8UoEEfXq4afiDX44HZ/7+PmYlGBz\nkVzifLPJ8/I85uB9gJELCilW3eTjqsg7vhGPmKMEDTuiruJ/Vjs0hjrt1Iot\nzrRGU9eCEtj3ww/9UQb8JNWZ1rmvV3dpvY/OZBXrWWRw2xxDfWcyHHw8fQBO\nds3btzB5VNYxeEJSE0UGJICDXN8CoSeyoMs6FQeOKnrXZc5Iad2Ry2P8mYz9\nm0SrEiNfID8WC5Cx/CMS1CRMc1KJdd6sOTyXllO8f5mT29bxPAO+MgknuB32\nRurba5nizrTOoLiOxhKJwlAUSMa6ajQ4r7LyCPDGPdo/WXi8H8hUfuNl0Oxl\nTM3d\r\n=qhRc\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEYCIQDER3X5WUMUPA5YiScWiqtX83qWlcWZFgG78HM/oHP43QIhAOg2H3jvM/5cLk75uSqqtABxveOSUIhHmYeWlESDnrY/"
					}
				]
			},
			"_npmUser": {
				"name": "spacedawwwg",
				"email": "spacedawwwg@gmail.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "spacedawwwg",
					"email": "spacedawwwg@gmail.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-custom-media2_8.0.1_1643384177006_0.3292469997232732"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2022-01-28T15:36:17.005Z",
		"8.0.1": "2022-01-28T15:36:17.137Z",
		"modified": "2022-05-13T06:11:48.045Z"
	},
	"maintainers": [
		{
			"name": "spacedawwwg",
			"email": "spacedawwwg@gmail.com"
		}
	],
	"description": "Use Custom Media Queries in CSS",
	"homepage": "https://github.com/postcss/postcss-custom-media#readme",
	"keywords": [
		"postcss",
		"css",
		"postcss-plugin",
		"custom",
		"media",
		"query",
		"queries",
		"w3c",
		"csswg",
		"atrule",
		"at-rule",
		"specification"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/postcss/postcss-custom-media.git"
	},
	"contributors": [
		{
			"name": "Maxime Thirouin"
		}
	],
	"author": {
		"name": "Jonathan Neal",
		"email": "jonathantneal@hotmail.com"
	},
	"bugs": {
		"url": "https://github.com/postcss/postcss-custom-media/issues"
	},
	"license": "MIT",
	"readme": "# PostCSS Custom Media [<img src=\"https://postcss.github.io/postcss/logo.svg\" alt=\"PostCSS\" width=\"90\" height=\"90\" align=\"right\">][postcss]\n\n[![NPM Version][npm-img]][npm-url]\n[![CSS Standard Status][css-img]][css-url]\n[![Build Status][cli-img]][cli-url]\n[![Support Chat][git-img]][git-url]\n\n[PostCSS Custom Media] lets you use Custom Media Queries in CSS, following the\n[CSS Media Queries] specification.\n\n```pcss\n@custom-media --small-viewport (max-width: 30em);\n\n@media (--small-viewport) {\n  /* styles for small viewport */\n}\n\n/* becomes */\n\n@media (max-width: 30em) {\n  /* styles for small viewport */\n}\n```\n\n## Usage\n\nAdd [PostCSS Custom Media] to your project:\n\n```bash\nnpm install postcss-custom-media --save-dev\n```\n\nUse [PostCSS Custom Media] to process your CSS:\n\n```js\nconst postcssCustomMedia = require('postcss-custom-media');\n\npostcssCustomMedia.process(YOUR_CSS /*, processOptions, pluginOptions */);\n```\n\nOr use it as a [PostCSS] plugin:\n\n```js\nconst postcss = require('postcss');\nconst postcssCustomMedia = require('postcss-custom-media');\n\npostcss([\n  postcssCustomMedia(/* pluginOptions */)\n]).process(YOUR_CSS /*, processOptions */);\n```\n\n[PostCSS Custom Media] runs in all Node environments, with special instructions for:\n\n| [Node](INSTALL.md#node) | [PostCSS CLI](INSTALL.md#postcss-cli) | [Webpack](INSTALL.md#webpack) | [Create React App](INSTALL.md#create-react-app) | [Gulp](INSTALL.md#gulp) | [Grunt](INSTALL.md#grunt) |\n| --- | --- | --- | --- | --- | --- |\n\n## Options\n\n### preserve\n\nThe `preserve` option determines whether custom media and atrules using custom\nmedia should be preserved in their original form.\n\n```pcss\n@custom-media --small-viewport (max-width: 30em);\n\n@media (--small-viewport) {\n  /* styles for small viewport */\n}\n\n/* becomes */\n\n@custom-media --small-viewport (max-width: 30em);\n\n@media (max-width: 30em) {\n  /* styles for small viewport */\n}\n\n@media (--small-viewport) {\n  /* styles for small viewport */\n}\n```\n\n### importFrom\n\nThe `importFrom` option specifies sources where custom media can be imported\nfrom, which might be CSS, JS, and JSON files, functions, and directly passed\nobjects.\n\n```js\npostcssCustomMedia({\n  importFrom: 'path/to/file.css' // => @custom-selector --small-viewport (max-width: 30em);\n});\n```\n\n```pcss\n@media (max-width: 30em) {\n  /* styles for small viewport */\n}\n\n@media (--small-viewport) {\n  /* styles for small viewport */\n}\n```\n\nMultiple sources can be passed into this option, and they will be parsed in the\norder they are received. JavaScript files, JSON files, functions, and objects\nwill need to namespace custom media using the `customMedia` or\n`custom-media` key.\n\n```js\npostcssCustomMedia({\n  importFrom: [\n    'path/to/file.css',\n    'and/then/this.js',\n    'and/then/that.json',\n    {\n      customMedia: { '--small-viewport': '(max-width: 30em)' }\n    },\n    () => {\n      const customMedia = { '--small-viewport': '(max-width: 30em)' };\n\n      return { customMedia };\n    }\n  ]\n});\n```\n\n### exportTo\n\nThe `exportTo` option specifies destinations where custom media can be exported\nto, which might be CSS, JS, and JSON files, functions, and directly passed\nobjects.\n\n```js\npostcssCustomMedia({\n  exportTo: 'path/to/file.css' // @custom-media --small-viewport (max-width: 30em);\n});\n```\n\nMultiple destinations can be passed into this option, and they will be parsed\nin the order they are received. JavaScript files, JSON files, and objects will\nneed to namespace custom media using the `customMedia` or\n`custom-media` key.\n\n```js\nconst cachedObject = { customMedia: {} };\n\npostcssCustomMedia({\n  exportTo: [\n    'path/to/file.css',   // @custom-media --small-viewport (max-width: 30em);\n    'and/then/this.js',   // module.exports = { customMedia: { '--small-viewport': '(max-width: 30em)' } }\n    'and/then/this.mjs',  // export const customMedia = { '--small-viewport': '(max-width: 30em)' } }\n    'and/then/that.json', // { \"custom-media\": { \"--small-viewport\": \"(max-width: 30em)\" } }\n    cachedObject,\n    customMedia => {\n      customMedia    // { '--small-viewport': '(max-width: 30em)' }\n    }\n  ]\n});\n```\n\nSee example exports written to [CSS](test/export-media.css),\n[JS](test/export-media.js), [MJS](test/export-media.mjs), and\n[JSON](test/export-media.json).\n\n[cli-img]: https://img.shields.io/travis/postcss/postcss-custom-media/master.svg\n[cli-url]: https://travis-ci.org/postcss/postcss-custom-media\n[css-img]: https://cssdb.org/badge/custom-media-queries.svg\n[css-url]: https://cssdb.org/#custom-media-queries\n[git-img]: https://img.shields.io/badge/support-chat-blue.svg\n[git-url]: https://gitter.im/postcss/postcss\n[npm-img]: https://img.shields.io/npm/v/postcss-custom-media.svg\n[npm-url]: https://www.npmjs.com/package/postcss-custom-media\n\n[CSS Media Queries]: https://drafts.csswg.org/mediaqueries-5/#custom-mq\n[PostCSS]: https://github.com/postcss/postcss\n[PostCSS Custom Media]: https://github.com/postcss/postcss-custom-media\n",
	"readmeFilename": "README.md",
	"_downloads": 190
}