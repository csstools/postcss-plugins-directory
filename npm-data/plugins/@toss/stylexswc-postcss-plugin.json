{
	"_id": "@toss/stylexswc-postcss-plugin",
	"name": "@toss/stylexswc-postcss-plugin",
	"dist-tags": {
		"next": "0.11.1-rc.6",
		"latest": "0.11.1-rc.6"
	},
	"versions": {
		"0.11.1-rc.6": {
			"name": "@toss/stylexswc-postcss-plugin",
			"description": "StyleX PostCSS plugin with NAPI-RS compiler",
			"version": "0.11.1-rc.6",
			"private": false,
			"license": "MIT",
			"sideEffects": false,
			"publishConfig": {
				"registry": "https://registry.npmjs.org/",
				"access": "restricted"
			},
			"config": {
				"scripty": {
					"path": "../../scripts/packages"
				}
			},
			"dependencies": {
				"@stylexjs/babel-plugin": "^0.15.4",
				"@toss/stylexswc-rs-compiler": "0.11.1-rc.6",
				"fast-glob": "^3.3.3",
				"glob-parent": "^6.0.2",
				"is-glob": "^4.0.3",
				"postcss": "^8.5.6"
			},
			"devDependencies": {
				"@babel/types": "^7.28.2",
				"@toss/stylexswc-eslint-config": "0.11.1-rc.6",
				"@toss/stylexswc-typescript-config": "0.11.1-rc.6",
				"@types/babel__core": "^7.20.5",
				"@types/glob-parent": "^5.1.3",
				"@types/is-glob": "^4.0.4",
				"@types/jest": "^30.0.0",
				"@types/loader-utils": "^2.0.6",
				"@types/node": "^24.1.0",
				"jest": "^30.0.5",
				"jest-chain-transform": "^0.0.8",
				"ts-jest": "^29.4.0"
			},
			"keywords": [
				"postcss",
				"postcss-plugin",
				"stylex",
				"swc"
			],
			"main": "dist/index.js",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/Dwlad90/stylex-swc-plugin.git"
			},
			"scripts": {
				"build": "scripty --ts --flatten",
				"check:artifacts": "scripty",
				"clean": "del-cli dist",
				"lint": "eslint . --color",
				"lint:check": "eslint . --color --format json --output-file dist/eslint_report.json",
				"postbuild": "pnpm run check:artifacts",
				"precommit": "lint-staged",
				"prepush": "lint-prepush",
				"test": "jest",
				"typecheck": "scripty"
			},
			"_id": "@toss/stylexswc-postcss-plugin@0.11.1-rc.6",
			"types": "./dist/index.d.ts",
			"bugs": {
				"url": "https://github.com/Dwlad90/stylex-swc-plugin/issues"
			},
			"homepage": "https://github.com/Dwlad90/stylex-swc-plugin#readme",
			"_integrity": "sha512-vCznKMF1Zd0houiunUdDsfzrKAoX5L5cZWQa7BWJTv37vdOfRWt5BqKDKmwFBBDNRS960+ZnYYGD5wEoppS5Hw==",
			"_resolved": "/tmp/443f49bb54fa7611b43c093324b63aa6/toss-stylexswc-postcss-plugin-0.11.1-rc.6.tgz",
			"_from": "file:toss-stylexswc-postcss-plugin-0.11.1-rc.6.tgz",
			"_nodeVersion": "22.13.0",
			"_npmVersion": "10.9.2",
			"dist": {
				"integrity": "sha512-vCznKMF1Zd0houiunUdDsfzrKAoX5L5cZWQa7BWJTv37vdOfRWt5BqKDKmwFBBDNRS960+ZnYYGD5wEoppS5Hw==",
				"shasum": "094a3dde7cd3e70a4bf546fd02fee10f2883e423",
				"tarball": "https://registry.npmjs.org/@toss/stylexswc-postcss-plugin/-/stylexswc-postcss-plugin-0.11.1-rc.6.tgz",
				"fileCount": 19,
				"unpackedSize": 139010,
				"signatures": [
					{
						"keyid": "SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U",
						"sig": "MEUCIQDA9phUXZQQcJZlFnkYNHRtqTIhBcGpcYFXy7UssrEznAIgdZBjlizW/PFpJKDbdsVf+IEXNRnuDu4zSN6LmYQCXGs="
					}
				]
			},
			"_npmUser": {
				"name": "toss-build-bot",
				"email": "npm-admin@toss.im"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "toss-public",
					"email": "npm-public@toss.im"
				},
				{
					"name": "raon0211",
					"email": "raon0211@toss.im"
				},
				{
					"name": "whitekiwi",
					"email": "kiwi.jang@toss.im"
				},
				{
					"name": "toss-build-bot",
					"email": "npm-admin@toss.im"
				},
				{
					"name": "minsoo.web",
					"email": "minsoo.web@toss.im"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages-npm-production",
				"tmp": "tmp/stylexswc-postcss-plugin_0.11.1-rc.6_1759148473609_0.9391362249184714"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2025-09-29T12:21:13.515Z",
		"0.11.1-rc.6": "2025-09-29T12:21:13.804Z",
		"modified": "2025-09-29T12:21:14.299Z"
	},
	"maintainers": [
		{
			"name": "toss-public",
			"email": "npm-public@toss.im"
		},
		{
			"name": "raon0211",
			"email": "raon0211@toss.im"
		},
		{
			"name": "whitekiwi",
			"email": "kiwi.jang@toss.im"
		},
		{
			"name": "toss-build-bot",
			"email": "npm-admin@toss.im"
		},
		{
			"name": "minsoo.web",
			"email": "minsoo.web@toss.im"
		}
	],
	"description": "StyleX PostCSS plugin with NAPI-RS compiler",
	"homepage": "https://github.com/Dwlad90/stylex-swc-plugin#readme",
	"keywords": [
		"postcss",
		"postcss-plugin",
		"stylex",
		"swc"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/Dwlad90/stylex-swc-plugin.git"
	},
	"bugs": {
		"url": "https://github.com/Dwlad90/stylex-swc-plugin/issues"
	},
	"license": "MIT",
	"readme": "# PostCSS plugin with NAPI-RS StyleX compiler integration\n\n`PostCSS plugin` for an unofficial\n[`napi-rs`](https://github.com/dwlad90/stylex-swc-plugin/tree/develop/crates/stylex-rs-compiler)\ncompiler that includes the StyleX SWC code transformation under the hood.\n\n## Installation\n\nTo install the package, run the following command:\n\n```bash\nnpm install --save-dev @toss/stylexswc-postcss-plugin\n```\n\n## Usage\n\nModify `postcss.config.js`. For example:\n\n```js\nmodule.exports = {\n  plugins: {\n    '@stylexjs/postcss-plugin': {\n      include: ['src/**/*.{js,jsx,ts,tsx}'],\n    },\n    autoprefixer: {},\n  },\n};\n```\n\nUse on of the plugins to process JS/TS files with StyleX code. For example:\n\n```js\n/// next.config.js\nconst path = require('path');\nconst stylexPlugin = require('@toss/stylexswc-nextjs-plugin');\nconst rootDir = __dirname;\n\nmodule.exports = stylexPlugin({\n  // Add any StyleX options here\n  rsOptions: {\n    aliases: {\n      '@/*': [path.join(rootDir, '*')],\n    },\n    unstable_moduleResolution: {\n      type: 'commonJS',\n    },\n  },\n  // It's important to prevent creating a new CSS file with StyleX classes twice\n  extractCSS: false,\n})({\n  transpilePackages: ['@stylexjs/open-props'],\n  // Optionally, add any other Next.js config below\n});\n```\n\n> [!WARNING] Each plugin of `@stylexswc` namespace accepts an `extractCSS`\n> option to control CSS extraction. When using the `postcss` plugin, this option\n> should be set to `false` to avoid double generation of CSS files with StyleX\n> styles.\n\n&nbsp;\n\n> [!NOTE] This approach requires transpiling JS/TS files with StyleX code twice:\n> first the source code and then using the PostCSS plugin. To avoid this\n> behavior when using `NextJS`, use the regular `@toss/stylexswc-nextjs-plugin`\n> passing the `transformCss` parameter to transform the generated CSS if it's\n> possible, for example:\n>\n> ```js\n> /// next.config.js\n>\n> //...other code\n> transformCss: async css => {\n>   const postcss = require('postcss');\n>   const result = await postcss([require('autoprefixer')]).process(css);\n>   return result.css;\n> },\n> //...other code\n> ```\n\nAdd the following CSS file to your project:\n\n```css\n/*[fileName].css*/\n\n/**\n * The @stylex directive is used by the @stylexjs/postcss-plugin.\n * It is automatically replaced with generated CSS during builds.\n */\n@stylex;\n```\n\nAnd import it in your JS/TS files:\n\n```js\nimport '[fileName].css';\n```\n\n## Plugin Options\n\nThe plugin accepts the following configuration options:\n\n### `rsOptions`\n\n- Type: `StyleXOptions`\n- Optional\n- Default: `{}`\n- Description: StyleX compiler options passed to the StyleX compiler\n\n### `useCSSLayers`\n\n- Type: `boolean`\n- Optional\n- Default: `false`\n- Description: Whether to use CSS layers for better style isolation\n\n### `exclude`\n\n- Type: `string[]`\n- Optional\n- Description: Array of glob patterns to exclude from processing\n\n### `include`\n\n- Type: `string[]`\n- Optional\n- Description: Array of glob patterns to include for processing\n\n### `cwd`\n\n- Type: `string`\n- Optional\n- Default: `process.cwd()`\n- Description: Current working directory for resolving files\n\n### `isDev`\n\n- Type: `boolean`\n- Optional\n- Description: Whether the plugin is running in development mode\n",
	"readmeFilename": "README.md",
	"_rev": "1-96a4daf38e79998a3109b7d66ac5bbdf",
	"_downloads": 0
}