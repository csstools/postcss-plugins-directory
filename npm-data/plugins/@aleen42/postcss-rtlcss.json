{
	"_id": "@aleen42/postcss-rtlcss",
	"_rev": "3-682c4895555f5f4a505f637196908f04",
	"name": "@aleen42/postcss-rtlcss",
	"dist-tags": {
		"latest": "5.1.3-beta.3"
	},
	"versions": {
		"5.1.3-beta.0": {
			"name": "@aleen42/postcss-rtlcss",
			"version": "5.1.3-beta.0",
			"description": "PostCSS plugin to build Cascading Style Sheets (CSS) with Left-To-Right (LTR) and Right-To-Left (RTL) rules",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"rtl",
				"ltr",
				"right-to-left",
				"left-to-right",
				"postcss-rtlcss",
				"rtlcss"
			],
			"main": "index.js",
			"module": "esm/index.js",
			"types": "index.d.ts",
			"exports": {
				".": {
					"require": {
						"types": "./index.d.ts",
						"default": "./index.js"
					},
					"import": {
						"types": "./esm/index.d.ts",
						"default": "./esm/index.js"
					}
				},
				"./options": {
					"require": {
						"types": "./options.d.ts",
						"default": "./options.js"
					},
					"import": {
						"types": "./esm/options.d.ts",
						"default": "./esm/options.js"
					}
				}
			},
			"scripts": {
				"test": "jest --clearCache && jest --verbose",
				"lint": "eslint src/**/*.ts",
				"clean": "./scripts/clean.sh",
				"copy": "./scripts/copy.sh",
				"modify-dts": "replace-in-file --configFile=config.replace.js",
				"build": "pnpm clean && rollup --config rollup.config.js --bundleConfigAsCjs && pnpm copy && pnpm modify-dts",
				"prepare": "pnpm build",
				"prepublishOnly": "pnpm lint && pnpm test",
				"version": "git add .",
				"postversion": "git push && git push --tags"
			},
			"author": {
				"name": "ElChiniNet"
			},
			"license": "Apache-2.0",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/elchininet/postcss-rtlcss.git"
			},
			"dependencies": {
				"rtlcss": "4.1.1"
			},
			"devDependencies": {
				"@rollup/plugin-json": "^6.1.0",
				"@rollup/plugin-terser": "^0.4.4",
				"@types/eslint": "^8.56.9",
				"@types/jest": "^29.5.12",
				"@types/jest-specific-snapshot": "^0.5.9",
				"@types/node": "^20.12.8",
				"@types/rtlcss": "^3.5.4",
				"eslint": "^9.2.0",
				"eslint-plugin-jest": "^28.5.0",
				"globals": "^15.1.0",
				"jest": "^29.7.0",
				"jest-specific-snapshot": "^8.0.0",
				"postcss": "^8.4.26",
				"replace-in-file": "^7.1.0",
				"rimraf": "^5.0.5",
				"rollup": "^4.17.2",
				"rollup-plugin-ts": "^3.4.5",
				"ts-jest": "^29.1.2",
				"tslib": "^2.6.2",
				"typescript": "^5.4.5",
				"typescript-eslint": "^7.8.0"
			},
			"peerDependencies": {
				"postcss": "^8.4.21"
			},
			"engines": {
				"node": ">=18.0.0"
			},
			"_id": "@aleen42/postcss-rtlcss@5.1.3-beta.0",
			"gitHead": "cf5fb9f4a5cd8f0c2de917933e45f62b4a5cd91e",
			"bugs": {
				"url": "https://github.com/elchininet/postcss-rtlcss/issues"
			},
			"homepage": "https://github.com/elchininet/postcss-rtlcss#readme",
			"_nodeVersion": "20.10.0",
			"_npmVersion": "10.2.3",
			"dist": {
				"integrity": "sha512-5dzPKrYVP35MnGjm09pYPRjEx9aTawaF0itz6PaYvkHtyMPv1RGncoRGa1dEFP1ehVJmpgURUJ+SO/2ex3ir5w==",
				"shasum": "42c22bf45d43b56ea41fa13509a794da7220ab35",
				"tarball": "https://registry.npmjs.org/@aleen42/postcss-rtlcss/-/postcss-rtlcss-5.1.3-beta.0.tgz",
				"fileCount": 12,
				"unpackedSize": 106705,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIQC4gL8N4Xsu6PSlFkbk88jZs4xnix8yHsiM/pyZE9kWPQIgTSzPcqYrhxCvXSopT6bfoRZE/DCNM+GRFz2PzW/Pgmc="
					}
				]
			},
			"_npmUser": {
				"name": "aleen42",
				"email": "aleen42@vip.qq.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "aleen42",
					"email": "aleen42@vip.qq.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-rtlcss_5.1.3-beta.0_1715234967386_0.45107308614509134"
			},
			"_hasShrinkwrap": false
		},
		"5.1.3-beta.1": {
			"name": "@aleen42/postcss-rtlcss",
			"version": "5.1.3-beta.1",
			"description": "PostCSS plugin to build Cascading Style Sheets (CSS) with Left-To-Right (LTR) and Right-To-Left (RTL) rules",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"rtl",
				"ltr",
				"right-to-left",
				"left-to-right",
				"postcss-rtlcss",
				"rtlcss"
			],
			"main": "index.js",
			"module": "esm/index.js",
			"types": "index.d.ts",
			"exports": {
				".": {
					"require": {
						"types": "./index.d.ts",
						"default": "./index.js"
					},
					"import": {
						"types": "./esm/index.d.ts",
						"default": "./esm/index.js"
					}
				},
				"./options": {
					"require": {
						"types": "./options.d.ts",
						"default": "./options.js"
					},
					"import": {
						"types": "./esm/options.d.ts",
						"default": "./esm/options.js"
					}
				}
			},
			"scripts": {
				"test": "jest --clearCache && jest --verbose",
				"lint": "eslint src/**/*.ts",
				"clean": "./scripts/clean.sh",
				"copy": "./scripts/copy.sh",
				"modify-dts": "replace-in-file --configFile=config.replace.js",
				"build": "pnpm clean && rollup --config rollup.config.js --bundleConfigAsCjs && pnpm copy && pnpm modify-dts",
				"prepare": "pnpm build",
				"prepublishOnly": "pnpm lint && pnpm test",
				"version": "git add .",
				"postversion": "git push && git push --tags"
			},
			"author": {
				"name": "ElChiniNet"
			},
			"license": "Apache-2.0",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/elchininet/postcss-rtlcss.git"
			},
			"dependencies": {
				"rtlcss": "4.1.1"
			},
			"devDependencies": {
				"@rollup/plugin-json": "^6.1.0",
				"@rollup/plugin-terser": "^0.4.4",
				"@types/eslint": "^8.56.9",
				"@types/jest": "^29.5.12",
				"@types/jest-specific-snapshot": "^0.5.9",
				"@types/node": "^20.12.8",
				"@types/rtlcss": "^3.5.4",
				"eslint": "^9.2.0",
				"eslint-plugin-jest": "^28.5.0",
				"globals": "^15.1.0",
				"jest": "^29.7.0",
				"jest-specific-snapshot": "^8.0.0",
				"postcss": "^8.4.26",
				"replace-in-file": "^7.1.0",
				"rimraf": "^5.0.5",
				"rollup": "^4.17.2",
				"rollup-plugin-ts": "^3.4.5",
				"ts-jest": "^29.1.2",
				"tslib": "^2.6.2",
				"typescript": "^5.4.5",
				"typescript-eslint": "^7.8.0"
			},
			"peerDependencies": {
				"postcss": "^8.4.21"
			},
			"engines": {
				"node": ">=18.0.0"
			},
			"_id": "@aleen42/postcss-rtlcss@5.1.3-beta.1",
			"gitHead": "62f72970ee1f5fadce56761a0c916460e78a95ff",
			"bugs": {
				"url": "https://github.com/elchininet/postcss-rtlcss/issues"
			},
			"homepage": "https://github.com/elchininet/postcss-rtlcss#readme",
			"_nodeVersion": "20.10.0",
			"_npmVersion": "10.2.3",
			"dist": {
				"integrity": "sha512-M931u6rbpxvvgd/tRtr9jV8cdCYWlVgNQEXdpBJ/ojFsxfpwqD5YgbDxwVyNADqmCHAojDZe8bYrrh3Xc7f0Lw==",
				"shasum": "c03e55231e4558cb9dcc95344acff72072b71fe1",
				"tarball": "https://registry.npmjs.org/@aleen42/postcss-rtlcss/-/postcss-rtlcss-5.1.3-beta.1.tgz",
				"fileCount": 12,
				"unpackedSize": 107013,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEYCIQDfuo1q/92B2y0u2s3DLgT/TLabe5a6xAj6Ze6ZBYQDpwIhAO5EMxrJXnTSjsjdDcyYxFQ2CTZ/kVXVs1s4tFjFrPWn"
					}
				]
			},
			"_npmUser": {
				"name": "aleen42",
				"email": "aleen42@vip.qq.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "aleen42",
					"email": "aleen42@vip.qq.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-rtlcss_5.1.3-beta.1_1715236793770_0.3883642293743903"
			},
			"_hasShrinkwrap": false
		},
		"5.1.3-beta.2": {
			"name": "@aleen42/postcss-rtlcss",
			"version": "5.1.3-beta.2",
			"description": "PostCSS plugin to build Cascading Style Sheets (CSS) with Left-To-Right (LTR) and Right-To-Left (RTL) rules",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"rtl",
				"ltr",
				"right-to-left",
				"left-to-right",
				"postcss-rtlcss",
				"rtlcss"
			],
			"main": "index.js",
			"module": "esm/index.js",
			"types": "index.d.ts",
			"exports": {
				".": {
					"require": {
						"types": "./index.d.ts",
						"default": "./index.js"
					},
					"import": {
						"types": "./esm/index.d.ts",
						"default": "./esm/index.js"
					}
				},
				"./options": {
					"require": {
						"types": "./options.d.ts",
						"default": "./options.js"
					},
					"import": {
						"types": "./esm/options.d.ts",
						"default": "./esm/options.js"
					}
				}
			},
			"scripts": {
				"test": "jest --clearCache && jest --verbose",
				"lint": "eslint src/**/*.ts",
				"clean": "./scripts/clean.sh",
				"copy": "./scripts/copy.sh",
				"modify-dts": "replace-in-file --configFile=config.replace.js",
				"build": "pnpm clean && rollup --config rollup.config.js --bundleConfigAsCjs && pnpm copy && pnpm modify-dts",
				"prepare": "pnpm build",
				"prepublishOnly": "pnpm lint && pnpm test",
				"version": "git add .",
				"postversion": "git push && git push --tags"
			},
			"author": {
				"name": "ElChiniNet"
			},
			"license": "Apache-2.0",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/elchininet/postcss-rtlcss.git"
			},
			"dependencies": {
				"rtlcss": "4.1.1"
			},
			"devDependencies": {
				"@rollup/plugin-json": "^6.1.0",
				"@rollup/plugin-terser": "^0.4.4",
				"@types/eslint": "^8.56.9",
				"@types/jest": "^29.5.12",
				"@types/jest-specific-snapshot": "^0.5.9",
				"@types/node": "^20.12.8",
				"@types/rtlcss": "^3.5.4",
				"eslint": "^9.2.0",
				"eslint-plugin-jest": "^28.5.0",
				"globals": "^15.1.0",
				"jest": "^29.7.0",
				"jest-specific-snapshot": "^8.0.0",
				"postcss": "^8.4.26",
				"replace-in-file": "^7.1.0",
				"rimraf": "^5.0.5",
				"rollup": "^4.17.2",
				"rollup-plugin-ts": "^3.4.5",
				"ts-jest": "^29.1.2",
				"tslib": "^2.6.2",
				"typescript": "^5.4.5",
				"typescript-eslint": "^7.8.0"
			},
			"peerDependencies": {
				"postcss": "^8.4.21"
			},
			"engines": {
				"node": ">=18.0.0"
			},
			"_id": "@aleen42/postcss-rtlcss@5.1.3-beta.2",
			"gitHead": "49e38d224758a0ea7cb6d21cb761c55aec60aa66",
			"bugs": {
				"url": "https://github.com/elchininet/postcss-rtlcss/issues"
			},
			"homepage": "https://github.com/elchininet/postcss-rtlcss#readme",
			"_nodeVersion": "20.10.0",
			"_npmVersion": "10.2.3",
			"dist": {
				"integrity": "sha512-EHAOqW8C9NbaJ6MTyNCw7lKhszDqscfbCWeDBge83sFIt47y5wOyVFmV1esQRsFZ4Gx5HPMyYCGK4ogOxgtw0A==",
				"shasum": "7503474df54a4af8c1341bdbe2fbc4eb37aa8471",
				"tarball": "https://registry.npmjs.org/@aleen42/postcss-rtlcss/-/postcss-rtlcss-5.1.3-beta.2.tgz",
				"fileCount": 12,
				"unpackedSize": 107099,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIQDASXwWluyHLGszUSHQK4HkyB5RpSIen928+XDqvjz5TgIgdwpf6c7hJsUi3GuYCPyOYG5BNAPnT9xzTPLQ2x8odas="
					}
				]
			},
			"_npmUser": {
				"name": "aleen42",
				"email": "aleen42@vip.qq.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "aleen42",
					"email": "aleen42@vip.qq.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-rtlcss_5.1.3-beta.2_1715237747651_0.016920562001707662"
			},
			"_hasShrinkwrap": false
		},
		"5.1.3-beta.3": {
			"name": "@aleen42/postcss-rtlcss",
			"version": "5.1.3-beta.3",
			"description": "PostCSS plugin to build Cascading Style Sheets (CSS) with Left-To-Right (LTR) and Right-To-Left (RTL) rules",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"rtl",
				"ltr",
				"right-to-left",
				"left-to-right",
				"postcss-rtlcss",
				"rtlcss"
			],
			"main": "index.js",
			"module": "esm/index.js",
			"types": "index.d.ts",
			"exports": {
				".": {
					"require": {
						"types": "./index.d.ts",
						"default": "./index.js"
					},
					"import": {
						"types": "./esm/index.d.ts",
						"default": "./esm/index.js"
					}
				},
				"./options": {
					"require": {
						"types": "./options.d.ts",
						"default": "./options.js"
					},
					"import": {
						"types": "./esm/options.d.ts",
						"default": "./esm/options.js"
					}
				}
			},
			"scripts": {
				"test": "jest --clearCache && jest --verbose",
				"lint": "eslint src/**/*.ts",
				"clean": "./scripts/clean.sh",
				"copy": "./scripts/copy.sh",
				"modify-dts": "replace-in-file --configFile=config.replace.js",
				"build": "pnpm clean && rollup --config rollup.config.js --bundleConfigAsCjs && pnpm copy && pnpm modify-dts",
				"prepare": "pnpm build",
				"prepublishOnly": "pnpm lint && pnpm test",
				"version": "git add .",
				"postversion": "git push && git push --tags"
			},
			"author": {
				"name": "ElChiniNet"
			},
			"license": "Apache-2.0",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/elchininet/postcss-rtlcss.git"
			},
			"dependencies": {
				"rtlcss": "4.1.1"
			},
			"devDependencies": {
				"@rollup/plugin-json": "^6.1.0",
				"@rollup/plugin-terser": "^0.4.4",
				"@types/eslint": "^8.56.9",
				"@types/jest": "^29.5.12",
				"@types/jest-specific-snapshot": "^0.5.9",
				"@types/node": "^20.12.8",
				"@types/rtlcss": "^3.5.4",
				"eslint": "^9.2.0",
				"eslint-plugin-jest": "^28.5.0",
				"globals": "^15.1.0",
				"jest": "^29.7.0",
				"jest-specific-snapshot": "^8.0.0",
				"postcss": "^8.4.26",
				"replace-in-file": "^7.1.0",
				"rimraf": "^5.0.5",
				"rollup": "^4.17.2",
				"rollup-plugin-ts": "^3.4.5",
				"ts-jest": "^29.1.2",
				"tslib": "^2.6.2",
				"typescript": "^5.4.5",
				"typescript-eslint": "^7.8.0"
			},
			"peerDependencies": {
				"postcss": "^8.4.21"
			},
			"engines": {
				"node": ">=18.0.0"
			},
			"_id": "@aleen42/postcss-rtlcss@5.1.3-beta.3",
			"gitHead": "37df2aef0c67f86c99c7abf1792a6966f13b9ff1",
			"bugs": {
				"url": "https://github.com/elchininet/postcss-rtlcss/issues"
			},
			"homepage": "https://github.com/elchininet/postcss-rtlcss#readme",
			"_nodeVersion": "20.10.0",
			"_npmVersion": "10.2.3",
			"dist": {
				"integrity": "sha512-GV7uljGEIEKh1weaGT4BxQ527K5SnPBYydxAhqETMRdJT1foPDb2VksEA1q8mckWEEyh6vcg6C8OtWEYFk2Whg==",
				"shasum": "13bec6d7ca9580e195a2190c4ea2a8becea49540",
				"tarball": "https://registry.npmjs.org/@aleen42/postcss-rtlcss/-/postcss-rtlcss-5.1.3-beta.3.tgz",
				"fileCount": 12,
				"unpackedSize": 106660,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEQCIGfxR39kFEfkHcY2N/TUFkP8UR3kz7ehw6L64XZmjr/VAiBimOnD9LKhcKKVOiZlKktN9SXvNaqBcRvgJtR3LUb+cA=="
					}
				]
			},
			"_npmUser": {
				"name": "aleen42",
				"email": "aleen42@vip.qq.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "aleen42",
					"email": "aleen42@vip.qq.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-rtlcss_5.1.3-beta.3_1715312664755_0.7978426116817088"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2024-05-09T06:09:27.298Z",
		"5.1.3-beta.0": "2024-05-09T06:09:27.610Z",
		"modified": "2024-05-10T03:44:25.089Z",
		"5.1.3-beta.1": "2024-05-09T06:39:53.919Z",
		"5.1.3-beta.2": "2024-05-09T06:55:47.808Z",
		"5.1.3-beta.3": "2024-05-10T03:44:24.911Z"
	},
	"maintainers": [
		{
			"name": "aleen42",
			"email": "aleen42@vip.qq.com"
		}
	],
	"description": "PostCSS plugin to build Cascading Style Sheets (CSS) with Left-To-Right (LTR) and Right-To-Left (RTL) rules",
	"homepage": "https://github.com/elchininet/postcss-rtlcss#readme",
	"keywords": [
		"postcss",
		"css",
		"postcss-plugin",
		"rtl",
		"ltr",
		"right-to-left",
		"left-to-right",
		"postcss-rtlcss",
		"rtlcss"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/elchininet/postcss-rtlcss.git"
	},
	"author": {
		"name": "ElChiniNet"
	},
	"bugs": {
		"url": "https://github.com/elchininet/postcss-rtlcss/issues"
	},
	"license": "Apache-2.0",
	"readme": "# PostCSS RTLCSS\n\n[PostCSS] plugin to build Cascading Style Sheets (CSS) with Left-To-Right (LTR) and Right-To-Left (RTL) rules using [RTLCSS]. RTLCSS allows one to flip an entire CSS file with the intention of using the original CSS for one direction and the new generated one for the other. What PostCSS RTLCSS does, is to create a single CSS file with both directions or to create a minimal CSS file only with the flipped rules with the intention of overriding the main one.\n\n[![Deployment Status](https://github.com/elchininet/postcss-rtlcss/actions/workflows/deploy.yaml/badge.svg)](https://github.com/elchininet/postcss-rtlcss/actions/workflows/deploy.yaml)\n[![Test](https://github.com/elchininet/postcss-rtlcss/actions/workflows/test.yaml/badge.svg)](https://github.com/elchininet/postcss-rtlcss/actions/workflows/test.yaml)\n[![Coverage Status](https://coveralls.io/repos/github/elchininet/postcss-rtlcss/badge.svg?branch=master)](https://coveralls.io/github/elchininet/postcss-rtlcss?branch=master)\n[![npm version](https://badge.fury.io/js/postcss-rtlcss.svg)](https://badge.fury.io/js/postcss-rtlcss)\n[![downloads](https://img.shields.io/npm/dw/postcss-rtlcss)](https://www.npmjs.com/package/postcss-rtlcss)\n\n\n[PostCSS]: https://github.com/postcss/postcss\n[RTLCSS]: https://rtlcss.com/\n\nPlayground Demo\n---\n\nhttps://elchininet.github.io/postcss-rtlcss/\n\n\nInstall\n---\n\n#### npm\n\n```bash\n## Latest version (postcss@^8.0.0)\nnpm install postcss-rtlcss --save-dev\n\n## Latest legacy version (postcss@^7.0.0)\nnpm install postcss-rtlcss@legacy --save-dev\n```\n\n#### pnpm\n\n```bash\n## Latest version (postcss@^8.0.0)\npnpm add -D postcss-rtlcss\n\n## Latest legacy version (postcss@^7.0.0)\npnpm add -D postcss-rtlcss@legacy\n```\n\n#### yarn\n\n```bash\n## Latest version (postcss@^8.0.0)\nyarn add postcss-rtlcss -D\n\n## Latest legacy version (postcss@^7.0.0)\nyarn add postcss-rtlcss@legacy -D\n```\n\nBasic usage\n---\n\n#### Usage with commonJS\n\n```javascript\nconst postcss = require('postcss');\nconst postcssRTLCSS = require('postcss-rtlcss');\nconst { Mode, Source } = require('postcss-rtlcss/options');\n\nconst options = { ... available options ... };\nconst result = postcss([\n    postcssRTLCSS(options)\n]).process(cssInput);\n\nconst rtlCSS = result.css;\n```\n\n##### commonJS with the versions 1.x.x - 2.x.x\n```javascript\nconst { postcssRTLCSS, Mode, Source, Autorename } = require('postcss-rtlcss');\n```\n\n#### Usage with ES6 modules\n\n```javascript\nimport postcss from 'postcss';\nimport postcssRTLCSS from 'postcss-rtlcss';\nimport { Mode, Source } from 'postcss-rtlcss/options';\n\nconst options = { ... available options ... };\nconst result = postcss([\n    postcssRTLCSS(options)\n]).process(cssInput);\n\nconst rtlCSS = result.css;\n```\n\n##### ES6 modules with the versions 1.x.x - 2.x.x\n\n```javascript\nimport { postcssRTLCSS, Mode, Source, Autorename } from 'postcss-rtlcss';\n```\n\n#### Usage in Webpack with postcss-loader\n\n```javascript\nrules: [\n    {\n        test: /\\.css$/,\n        use: [\n            { loader: 'style-loader' },\n            { loader: 'css-loader' },\n            {\n                loader: 'postcss-loader',\n                options: {\n                    postcssOptions: {\n                        plugins: [\n                            postcssRTLCSS(options)\n                        ]\n                    }\n                }\n            }\n        ]\n    }\n]\n```\n\nExamples\n---\n\n#### Input\n\n```css\n.test1, .test2 {\n    background-color: #FFF;\n    background-position: 10px 20px;\n    border-radius: 0 2px 0 8px;\n    color: #666;\n    padding-right: 20px;\n    text-align: left;\n    transform: translate(-50%, 50%);\n    width: 100%;\n}\n\n.test3 {\n    direction: ltr;\n    margin: 1px 2px 3px;\n    padding: 10px 20px;\n    text-align: center;\n}\n```\n\n#### Output using the combined mode (default)\n\nThis is the recommended method, it will generate more CSS code but each direction will have their specific CSS declarations and there is no need of overriding properties.\n\n```css\n.test1, .test2 {\n    background-color: #FFF;\n    background-position: 10px 20px;\n    color: #666;\n    width: 100%;\n}\n\n[dir=\"ltr\"] .test1, [dir=\"ltr\"] .test2 {\n    border-radius: 0 2px 0 8px;\n    padding-right: 20px;\n    text-align: left;\n    transform: translate(-50%, 50%);\n}\n\n[dir=\"rtl\"] .test1, [dir=\"rtl\"] .test2 {\n    border-radius: 2px 0 8px 0;\n    padding-left: 20px;\n    text-align: right;\n    transform: translate(50%, 50%);\n}\n\n.test3 {\n    margin: 1px 2px 3px;\n    padding: 10px 20px;\n    text-align: center;\n}\n\n[dir=\"ltr\"] .test3 {\n    direction: ltr;\n}\n\n[dir=\"rtl\"] .test3 {\n    direction: rtl;\n}\n```\n\n#### Output using the override mode\n\nThis is one of the alternative methods to override. It will generate less code because it lets the main rule intact most of the time and generates shorter specific rules to override the properties that are affected by the direction of the text.\n\n```css\n.test1, .test2 {\n    background-color: #FFF;\n    background-position: 10px 20px;\n    border-radius: 0 2px 0 8px;\n    color: #666;\n    padding-right: 20px;\n    text-align: left;\n    transform: translate(-50%, 50%);\n    width: 100%;\n}\n\n[dir=\"rtl\"] .test1, [dir=\"rtl\"] .test2 {\n    border-radius: 2px 0 8px 0;\n    padding-right: 0;\n    padding-left: 20px;\n    text-align: right;\n    transform: translate(50%, 50%);\n}\n\n.test3 {\n    direction: ltr;\n    margin: 1px 2px 3px;\n    padding: 10px 20px;\n    text-align: center;\n}\n\n[dir=\"rtl\"] .test3 {\n    direction: rtl;\n}\n```\n\n#### Output using the diff mode\n\nThis is the second alternative method to override. It generates the minimum amount of code because it only outputs the rules that have been flipped and without prefixing them. The intention of this method is to generate a separate stylesheet file that will be loaded on top of the original one to override those rules that need to be flipped in certain direction.\n\n```css\n.test1, .test2 {\n    border-radius: 2px 0 8px 0;\n    padding-right: 0;\n    padding-left: 20px;\n    text-align: right;\n    transform: translate(50%, 50%);\n}\n\n.test3 {\n    direction: rtl;\n}\n```\n\nBut the two methods to override have a disadvantage:\n\n<details><summary>Disadvantage of the override methods</summary>\n<p>\n\nUse these methods carefully. They can override a property that is coming from another class if multiple classes are used at the same time. Take a look at the next `HTML` and `CSS` codes:\n\n```html\n<div class=\"test1 test2\">\n    This is an example\n</div>    \n```\n\n```css\n.test1 {\n    background: #666;\n    color: #FFF;\n    padding: 20px;\n}\n\n.test2 {\n    padding-right: 10px;\n}\n```\n\nUsing the `combined` method, the generated code will be the next one:\n\n```css\n.test1 {\n    background: #666;\n    color: #FFF;\n    padding: 20px;\n}\n\n[dir=\"ltr\"] .test2 {\n    padding-right: 10px;\n}\n\n[dir=\"rtl\"] .test2 {\n    padding-left: 10px;\n}\n```\n\nSo, the `div` will have a padding of `20px 10px 20px 20px` in `LTR` and `20px 20px 20px 10px` in `RTL`. Everything will work as expected here.\n\nHowever, using the `override` method the generated code will be the next one:\n\n```css\n.test1 {\n    background: #666;\n    color: #FFF;\n    padding: 20px;\n}\n\n.test2 {\n    padding-right: 10px;\n}\n\n[dir=\"rtl\"] .test2 {\n    padding-right: 0;\n    padding-left: 10px;\n}\n```\n\nAnd using the `diff` method the generated code will be the next one:\n\n```css\n.test2 {\n    padding-right: 0;\n    padding-left: 10px;\n}\n```\n\nNow the `div` has a padding of `20px 10px 20px 20px` in `LTR` and `20px 0 20px 10px` in `RTL`, because when the class `test2` is overriden, it is not taken into account that it could be used with `test1` having the same properties. The solution, in this case, is to provide the property that has been inherited:\n\n```css\n.test1 {\n    background: #666;\n    color: #FFF;\n    padding: 20px;\n}\n\n.test2 {\n    padding-left: 20px;\n    padding-right: 10px;\n}\n```\n\nSo, using the `override` method the generated code will be:\n\n```css\n.test1 {\n    background: #666;\n    color: #FFF;\n    padding: 20px;\n}\n\n.test2 {\n    padding-left: 20px;\n    padding-right: 10px;\n}\n\n[dir=\"rtl\"] .test2 {\n    padding-right: 20px;\n    padding-left: 10px;\n}\n```\n\nAnd using the `diff` method the generated code will be:\n\n```css\n.test2 {\n    padding-right: 20px;\n    padding-left: 10px;\n}\n```\n\n</p>\n</details>\n\nOptions\n---\n\nAll the options are optional, and a default value will be used if any of them is omitted or the type or format of them is wrong\n\n| Option             | Type                      | Default         | Description                                                  |\n| ------------------ | ------------------------- | --------------- | ------------------------------------------------------------ |\n| mode               | `Mode (string)`           | `Mode.combined` | Mode of generating the final CSS rules                       |\n| ltrPrefix          | `string` or `string[]`    | `[dir=\"ltr\"]`   | Prefix to use in the left-to-right CSS rules                 |\n| rtlPrefix          | `string` or `string[]`    | `[dir=\"rtl\"]`   | Prefix to use in the right-to-left CSS rules                 |\n| bothPrefix         | `string` or `string[]`    | `[dir]`         | Prefix to create a new rule that affects both directions when the specificity of the ltr or rtl rules will override its declarations |\n| prefixSelectorTransformer | `function` | `null` | Transform function to have more control over the selectors prefixing logic |\n| safeBothPrefix     | `boolean`                 | `false`         | Add the `bothPrefix` to those declarations that can be affected by the direction to avoid them being overridden by specificity |\n| ignorePrefixedRules| `boolean`                 | true            | Ignores rules that have been prefixed with some of the prefixes contained in `ltrPrefix`, `rtlPrefix`, or `bothPrefix` |\n| source             | `Source (string)`         | `Source.ltr`    | The direction from which the final CSS will be generated     |\n| processUrls        | `boolean`                 | `false`         | Change the strings in URLs using the string map         |\n| processRuleNames   | `boolean`                 | `false`         | Swap two rules containing no directional properties if they match any entry in `stringMap` when the direction changes |\n| processKeyFrames   | `boolean`                 | `false`         | Flip keyframe animations                                     |\n| processEnv         | `boolean`                 | `true`          | When processEnv is false, it prevents flipping agent-defined environment variables (`safe-area-inset-left` and `safe-area-inset-right`) |\n| useCalc            | `boolean`                 | `false`         | Flips `background-position-x` and `transform-origin` properties if they are expressed in length units using [calc](https://developer.mozilla.org/en-US/docs/Web/CSS/calc) |\n| stringMap          | `PluginStringMap[]`       | Check below     | An array of strings maps that will be used to make the replacements of the declarations' URLs and to match the names of the rules if `processRuleNames` is `true` |\n| greedy             | `boolean`                 | `false`         | When greedy is `true`, the matches of `stringMap` will not take into account word boundaries |\n| aliases            | `Record<string, string>`  | `{}`            | A strings map to treat some declarations as others |\n| processDeclarationPlugins | `Array<{name: string, priority: number, processors: []}>` | `[]` | Plugins applied when processing CSS declarations |\n\n---\n\n#### mode\n\n<details><summary>Expand</summary>\n<p>\n\nThe mode option has been explained in the [Output using the combined mode](#output-using-the-combined-mode-default), the [Output using the override mode](#output-using-the-override-mode), and the [Output using the diff mode](#output-using-the-diff-mode) sections. To avoid using magic strings, the package exposes an object with these values, but it is possible to use strings values anyway:\n\n```javascript\nimport postcss from 'postcss';\nimport postcssRTLCSS from 'postcss-rtlcss';\nimport { Mode } from 'postcss-rtlcss/options';\n\nconst input = '... css code ...';\nconst optionsCombined = { mode: Mode.combined }; // This is the default value\nconst optionsOverride = { mode: Mode.override };\nconst optionsDiff = { mode: Mode.diff };\n\nconst outputCombined = postcss([\n    postcssRTLCSS(optionsCombined)\n]).process(input);\n\nconst outputOverride = postcss([\n    postcssRTLCSS(optionsOverride)\n]).process(input);\n\nconst outputDiff = postcss([\n    postcssRTLCSS(optionsDiff)\n]).process(input);\n```\n\n</p>\n\n</details>\n\n---\n\n#### ltrPrefix and rtlPrefix\n\n<details><summary>Expand</summary>\n<p>\n\nThese two options manage the prefix strings for each direction. They can be strings or arrays of strings:\n\n##### input\n\n```css\n.test1, .test2 {\n    left: 10px;\n}\n\n.test3,\n.test4 {\n    text-align: left;\n}\n```\n\n##### Using strings\n\n```javascript\nconst options = {\n    ltrPrefix: '.ltr',\n    rtlPrefix: '.rtl'\n};\n```\n\n##### output\n\n```css\n.ltr .test1, .ltr .test2 {\n    left: 10px;\n}\n\n.rtl .test1, .rtl .test2 {\n    right: 10px;\n}\n\n.ltr .test3,\n.ltr .test4 {\n    text-align: left;\n}\n\n.rtl .test3,\n.rtl .test4 {\n    text-align: right;\n}\n```\n\n##### Using arrays of strings\n\n```javascript\nconst options = {\n    ltrPrefix: ['[dir=\"ltr\"]', '.ltr'],\n    rtlPrefix: ['[dir=\"rtl\"]', '.rtl']\n};\n```\n\n##### output\n\n```css\n[dir=\"ltr\"] .test1, .ltr .test1, [dir=\"ltr\"] .test2, .ltr .test2 {\n    left: 10px;\n}\n\n[dir=\"rtl\"] .test1, .rtl .test1, [dir=\"rtl\"] .test2, .rtl .test2 {\n    right: 10px;\n}\n\n[dir=\"ltr\"] .test3,\n.ltr .test3,\n[dir=\"ltr\"] .test4,\n.ltr .test4 {\n    text-align: left;\n}\n\n[dir=\"rtl\"] .test3,\n.rtl .test3,\n[dir=\"rtl\"] .test4,\n.rtl .test4 {\n    text-align: right;\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### bothPrefix\n\n<details><summary>Expand</summary>\n<p>\n\nThis prefix will be used in some specific cases in which a ltr or rtl rule will override declarations located in the main rule due to [specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity). Consider the next example using the option `processUrls` as `true`:\n\n```css\n.test1 {\n    background: url('icons/ltr/arrow.png');\n    background-size: 10px 20px;\n    width: 10px;\n}\n```\n\nThe generated CSS would be:\n\n```css\n.test1 {\n    background-size: 10px 20px;\n    width: 10px;\n}\n\n[dir=\"ltr\"] .test1 {\n    background: url('icons/ltr/arrow.png');\n}\n\n[dir=\"rtl\"] .test1 {\n    background: url('icons/rtl/arrow.png');\n}\n```\n\nIn the previous case, the `background-size` property has been overridden by the `background` one. Even if we change the order of the rules, the last ones have a higher specificity, so they will rule over the first one.\n\nTo solve this, another rule will be created at the end using the `bothPrefix` parameter:\n\n```css\n.test1 {\n    width: 10px;\n}\n\n[dir=\"ltr\"] .test1 {\n    background: url('icons/ltr/arrow.png');\n}\n\n[dir=\"rtl\"] .test1 {\n    background: url('icons/rtl/arrow.png');\n}\n\n[dir] {\n    background-size: 10px 20px;\n}\n```\n\nAnd no matter the direction, the `background-size` property is respected.\n\n</p>\n\n</details>\n\n---\n\n#### prefixSelectorTransformer\n\n<details><summary>Expand</summary>\n<p>\n\nThis function will be used to transform the selectors and prefixing them at our will. The first parameter will be the prefix that will be used and the second the current selector:\n\n>Notes:\n>* If the function doesn‘t return a string, the default prefixing logic will be used.\n>* If this function is used, be aware that rules using `html` or `:root` will follow the custom prefixing logic. You should cover these cases.\n\n##### input\n\n```css\n.test1 {\n    left: 10px;\n    padding-right: 5px;\n    padding-inline-end: 20px;\n}\n```\n\nIf the `prefixSelectorTransformer` is not sent (default):\n\n##### output \n\n```css\n[dir=\"ltr\"] .test1 {\n    left: 10px;\n    padding-right: 5px;\n}\n\n[dir=\"rtl\"] .test1 {\n    right: 10px;\n    padding-left: 5px;\n}\n\n[dir] .test1 {\n    padding-inline-end: 20px;\n}\n```\n\nSetting a `prefixSelectorTransformer` function\n\n```javascript\nconst options = {\n    prefixSelectorTransformer: function (prefix, selector) {\n        if (prefix === '[dir]') {\n            return `.container > ${prefix} > ${selector}`;\n        }\n        return `${selector}${prefix}`;\n    }\n};\n```\n\n##### output \n\n```css\n.test1[dir=\"ltr\"] {\n    left: 10px;\n    padding-right: 5px;\n}\n\n.test1[dir=\"rtl\"] {\n    right: 10px;\n    padding-left: 5px;\n}\n\n.container > [dir] > .test1 {\n    padding-inline-end: 20px;\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### safeBothPrefix\n\n<details><summary>Expand</summary>\n<p>\n\nThis option will add the `boxPrefix` option to those declarations that can be flipped, no matter if they are not overridden in the same rule. This avoids them being overridden by [specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) of other flipped declarations contained in other rules. For example, let's consider that we have a `div` element with the next rules:\n\n```html\n<div class=\"test1 test2\">\n    This is an example\n</div> \n```\n\n```css\n.test1 {\n    color: #FFF;\n    padding: 4px 10px 4px 20px;\n    width: 100%;\n}\n\n.test2 {\n    padding: 0;\n}\n```\n\nThe expecting result is that the `padding` of the element becomes `0` as it has been reset by `test2`. With `safeBothPrefix` in `false`, the generated CSS will be:\n\n```css\n.test1 {\n    color: #FFF;\n    width: 100%;\n}\n\n[dir=\"ltr\"] .test1 {\n    padding: 4px 10px 4px 20px;\n}\n\n[dir=\"rtl\"] .test1 {\n    padding: 4px 20px 4px 10px;\n}\n\n.test2 {\n    padding: 0;\n}\n```\n\nThe result is that the `padding` properties of `test1` have more specificity than the same property in `tes2`, so it is not reset if both rules are applied at the same time. Let's check the result if `safeBothPrefix` is `true`: \n\n```css\n.test1 {\n    color: #FFF;\n    width: 100%;\n}\n\n[dir=\"ltr\"] .test1 {\n    padding: 4px 10px 4px 20px;\n}\n\n[dir=\"rtl\"] .test1 {\n    padding: 4px 20px 4px 10px;\n}\n\n[dir] .test2 {\n    padding: 0;\n}\n```\n\nAs `test2` has the same level of specificity as `test1`, now the result is that the `padding` is reset if both rules are used at the same time.\n\n</p>\n\n</details>\n\n---\n\n#### ignorePrefixedRules\n\n<details><summary>Expand</summary>\n<p>\n\nThis option is to ignore the rules that have been prefixed with one of the prefixes contained in `ltrPrefix`, `rtlPrefix`, or `bothPrefix`:\n\n##### input\n\n```css\n[dir=\"ltr\"] test {\n    left: 10px;\n}\n\n[dir=\"rtl\"] test {\n    right: 10px;\n}\n```\n\n##### ignorePrefixedRules true\n\n```javascript\nconst options = { ignorePrefixedRules: true }; // This is the default value\n```\n\n##### output\n\n```css\n[dir=\"ltr\"] test {\n    left: 10px;\n}\n\n[dir=\"rtl\"] test {\n    right: 10px;\n}\n```\n\n##### ignorePrefixedRules false\n\n```javascript\nconst options = { ignorePrefixedRules: false };\n```\n\n##### output\n\n```css\n[dir=\"ltr\"] [dir=\"ltr\"] test {\n    left: 10px;\n}\n\n[dir=\"rtl\"] [dir=\"ltr\"] test {\n    right: 10px;\n}\n\n[dir=\"ltr\"] [dir=\"rtl\"] test {\n    right: 10px;\n}\n\n[dir=\"rtl\"] [dir=\"rtl\"] test {\n    left: 10px;\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### source\n\n<details><summary>Expand</summary>\n<p>\n\nThis option manages if the conversion will be from `LTR` to `RTL` or vice versa.\n\n##### input\n\n```css\n.test1, .test2 {\n    left: 10px;\n}\n```\n\n##### Using Source.ltr in combined mode\n\n```javascript\nimport { Mode, Source } from 'postcss-rtlcss/options';\n\nconst options = {\n    mode: Mode.combined,\n    source: Source.ltr // This is the default value\n};\n```\n\n##### output\n\n```css\n[dir=\"ltr\"] .test1, [dir=\"ltr\"] .test2 {\n    left: 10px;\n}\n\n[dir=\"rtl\"] .test1, [dir=\"rtl\"] .test2 {\n    right: 10px;\n}\n```\n\n##### Using Source.rtl in override mode\n\n```javascript\nimport { Mode, Source } from 'postcss-rtlcss/options';\n\nconst options = {\n    mode: Mode.override,\n    source: Source.rtl\n};\n```\n\n##### output\n\n```css\n.test1, .test2 {\n    left: 10px;\n}\n\n[dir=\"ltr\"] .test1, [dir=\"ltr\"] .test2 {\n    left: auto;\n    right: 10px;\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### processUrls\n\n<details><summary>Expand</summary>\n<p>\n\nThis options manages if the strings of the URLs should be flipped taken into account the string map:\n\n##### input\n\n```css\n.test1, .test2 {\n    background-image: url(\"./folder/subfolder/icons/ltr/chevron-left.png\");\n    left: 10px;\n}\n```\n\n##### processUrls false\n\n```javascript\nconst options = { processUrls: false }; // This is the default value\n```\n\n##### output\n\n```css\n.test1, .test2 {\n    background-image: url(\"./folder/subfolder/icons/ltr/chevron-left.png\");\n}\n\n[dir=\"ltr\"] .test1, [dir=\"ltr\"] .test2 {\n    left: 10px;\n}\n\n[dir=\"rtl\"] .test1, [dir=\"rtl\"] .test2 {\n    right: 10px;\n}\n```\n\n##### processUrls true\n\n```javascript\nconst options = { processUrls: true };\n```\n\n##### output\n\n```css\n[dir=\"ltr\"] .test1, [dir=\"ltr\"] .test2 {\n    background-image: url(\"./folder/subfolder/icons/ltr/chevron-left.png\");\n    left: 10px;\n}\n\n[dir=\"rtl\"] .test1, [dir=\"rtl\"] .test2 {\n    background-image: url(\"./folder/subfolder/icons/rtl/chevron-right.png\");\n    right: 10px;\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### processRuleNames\n\n<details><summary>Expand</summary>\n<p>\n\nIf it is `true`, it swaps two rules containing no directional properties if they match any entry in `stringMap` when the direction changes\n\n>Note that this option will not prefix those rules that have been processed already because they had directional properties.\n\n##### input\n\n```css\n.test1-ltr {\n    color: #FFF;\n}\n\n.test2-left::before {\n    content: \"\\f007\";\n}\n\n.test2-right::before {\n    content: \"\\f010\";\n}\n```\n\n##### processRuleNames true\n\n```javascript\nconst options = {\n    processRuleNames: true\n};\n```\n\n##### output\n\n```css\n/* This selector will not be processed because it doesn't have a counterpart */\n.test1-ltr {\n    color: #FFF;\n}\n\n[dir=\"ltr\"] .test2-left::before {\n    content: \"\\f007\";\n}\n\n[dir=\"rtl\"] .test2-left::before {\n    content: \"\\f010\";\n}\n\n[dir=\"ltr\"] .test2-right::before {\n    content: \"\\f010\";\n}\n\n[dir=\"rtl\"] .test2-right::before {\n    content: \"\\f007\";\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### processKeyFrames\n\n<details><summary>Expand</summary>\n<p>\n\nThis option manages if the @keyframes animation rules should be flipped:\n\n##### input\n\n```css\n.test1 {\n    animation: 5s flip 1s ease-in-out;\n    color: #FFF;\n}\n\n@keyframes flip {\n    from {\n        transform: translateX(100px);\n    }\n    to {\n        transform: translateX(0);\n    }\n}\n```\n\n##### processKeyFrames false\n\n```javascript\nconst options = { processKeyFrames: false }; // This is the default value\n```\n\n##### output\n\n```css\n.test1 {\n    animation: 5s flip 1s ease-in-out;\n    color: #FFF;\n}\n\n@keyframes flip {\n    from {\n        transform: translateX(100px);\n    }\n    to {\n        transform: translateX(0);\n    }\n}\n```\n\n##### processKeyFrames true\n\n```javascript\nconst options = { processKeyFrames: true };\n```\n\n##### output\n\n```css\n.test1 {\n    color: #FFF;\n}\n\n[dir=\"ltr\"] .test1 {\n    animation: 5s flip-ltr 1s ease-in-out;\n}\n\n[dir=\"rtl\"] .test1 {\n    animation: 5s flip-rtl 1s ease-in-out;\n}\n\n@keyframes flip-ltr {\n    from {\n        transform: translateX(100px);\n    }\n    to {\n        transform: translateX(0);\n    }\n}\n\n@keyframes flip-rtl {\n    from {\n        transform: translateX(-100px);\n    }\n    to {\n        transform: translateX(0);\n    }\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### processEnv\n\n<details><summary>Expand</summary>\n<p>\n\nThis options manages if the agent-defined environment variables should be flipped:\n\n##### input\n\n```css\nbody {\n    padding:\n        env(safe-area-inset-top, 10px)\n        env(safe-area-inset-right, 20px)\n        env(safe-area-inset-bottom, 30px)\n        env(safe-area-inset-left, 40px)\n    ;\n}\n\n.test1 {\n    margin-right: env(safe-area-inset-right, 10px);\n    margin-left: env(safe-area-inset-left, 20px);\n}\n```\n\n##### processEnv true\n\n```javascript\nconst options = { processEnv: true }; // This is the default value\n```\n\n##### output\n\n```css\n[dir=\\\\\"ltr\\\\\"] body {\n    padding:\n        env(safe-area-inset-top, 10px)\n        env(safe-area-inset-right, 20px)\n        env(safe-area-inset-bottom, 30px)\n        env(safe-area-inset-left, 40px)\n    ;\n}\n\n[dir=\\\\\"rtl\\\\\"] body {\n    padding:\n        env(safe-area-inset-top, 10px)\n        env(safe-area-inset-right, 40px)\n        env(safe-area-inset-bottom, 30px)\n        env(safe-area-inset-left, 20px);\n}\n\n[dir=\\\\\"ltr\\\\\"] .test1 {\n    margin-right: env(safe-area-inset-right, 10px);\n    margin-left: env(safe-area-inset-left, 20px);\n}\n\n[dir=\\\\\"rtl\\\\\"] .test1 {\n    margin-left: env(safe-area-inset-left, 10px);\n    margin-right: env(safe-area-inset-right, 20px);\n}\n```\n\n##### processEnv false\n\n```javascript\nconst options = { processEnv: false };\n```\n\n##### output\n\n```css\n[dir=\\\\\"ltr\\\\\"] body {\n    padding:\n        env(safe-area-inset-top, 10px)\n        env(safe-area-inset-right, 20px)\n        env(safe-area-inset-bottom, 30px)\n        env(safe-area-inset-left, 40px)\n    ;\n}\n\n[dir=\\\\\"rtl\\\\\"] body {\n    padding:\n        env(safe-area-inset-top, 10px)\n        env(safe-area-inset-left, 40px)\n        env(safe-area-inset-bottom, 30px)\n        env(safe-area-inset-right, 20px);\n}\n\n[dir=\\\\\"ltr\\\\\"] .test1 {\n    margin-right: env(safe-area-inset-right, 10px);\n    margin-left: env(safe-area-inset-left, 20px);\n}\n\n[dir=\\\\\"rtl\\\\\"] .test1 {\n    margin-left: env(safe-area-inset-right, 10px);\n    margin-right: env(safe-area-inset-left, 20px);\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### useCalc\n\n<details><summary>Expand</summary>\n<p>\n\nWhen this option is enabled, it flips `background-position-x` and `transform-origin` properties if they are expressed in length units using [calc](https://developer.mozilla.org/en-US/docs/Web/CSS/calc):\n\n##### input\n\n```css\n.test {\n    background-image: url(\"./folder/subfolder/icons/ltr/chevron-left.png\");\n    background-position-x: 5px;\n    left: 10px;\n    transform-origin: 10px 20px;\n    transform: scale(0.5, 0.5);\n}\n```\n\n##### useCalc false\n\n```javascript\nconst options = { useCalc: false }; // This is the default value\n```\n\n##### output\n\n```css\n.test {\n    background-image: url(\"./folder/subfolder/icons/ltr/chevron-left.png\");\n    background-position-x: 5px;\n    transform-origin: 10px 20px;\n    transform: scale(0.5, 0.5);\n}\n\n[dir=\"ltr\"] .test {\n    left: 10px;\n}\n\n[dir=\"rtl\"] .test {\n    right: 10px;\n}\n```\n\n##### useCalc true\n\n```javascript\nconst options = { useCalc: true };\n```\n\n##### output\n\n```css\n.test {\n    background-image: url(\"./folder/subfolder/icons/ltr/chevron-left.png\");\n    transform: scale(0.5, 0.5);\n}\n\n[dir=\"ltr\"] .test {\n    background-position-x: 5px;\n    left: 10px;\n    transform-origin: 10px 20px;\n}\n\n[dir=\"rtl\"] .test {\n    background-position-x: calc(100% - 5px);\n    right: 10px;\n    transform-origin: calc(100% - 10px) 20px;\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### stringMap\n\n<details><summary>Expand</summary>\n<p>\n\nAn array of strings maps that will be used to make the replacements of the declarations' URLs and to match rules selectors names if the `processRuleNames` option is `true`. The name parameter is optional, but if you want to override any of the default string maps, just add your own using the same name.\n\n```javascript\n// This is the default string map object\nconst options = {\n    stringMap: [\n        {\n            name: 'left-right',\n            search : ['left', 'Left', 'LEFT'],\n            replace : ['right', 'Right', 'RIGHT']\n        },\n        {\n            name: 'ltr-rtl',\n            search  : ['ltr', 'Ltr', 'LTR'],\n            replace : ['rtl', 'Rtl', 'RTL'],\n        }\n    ]\n};\n```\n\n</p>\n\n</details>\n\n---\n\n#### greedy\n\n<details><summary>Expand</summary>\n<p>\n\nWhen `greedy` is `true`, the matches of the `stringMap` will not take into account word boundaries.\n\n##### input\n\n```css\n.test1 {\n    background: url(\"icon-left.png\");\n}\n\n.test2 {\n    background: url(\"icon-ultra.png\");\n}\n```\n\n##### greedy false\n\n```javascript\nconst options = {\n    processUrls: true,\n    greedy: false // This is the default value\n};\n```\n\n##### output\n\n```css\n[dir=\"ltr\"] .test1 {\n    background: url(\"icon-left.png\");\n}\n\n[dir=\"rtl\"] .test1 {\n    background: url(\"icon-right.png\");\n}\n\n.test2 {\n    background: url(\"icon-ultra.png\");\n}\n```\n\n##### greedy true\n\n```javascript\nconst options = {\n    processUrls: true,\n    greedy: true\n};\n```\n\n##### output\n\n```css\n[dir=\"ltr\"] .test1 {\n    background: url(\"icon-left.png\");\n}\n\n[dir=\"rtl\"] .test1 {\n    background: url(\"icon-right.png\");\n}\n\n[dir=\"ltr\"] .test2 {\n    background: url(\"icon-ultra.png\");\n}\n\n[dir=\"rtl\"] .test2 {\n    background: url(\"icon-urtla.png\");\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### aliases\n\n<details><summary>Expand</summary>\n<p>\n\nThis property consists of a string map to treat some declarations as others, very useful to flip the values of [CSS variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties).\n\n>Note: This property is not available in the legacy version of the package\n\n##### input\n\n```css\n:root {\n    --my-padding: 1rem 1rem 1.5rem 1.5rem;\n}\n\n.test {\n    padding: var(--my-padding);\n}\n```\n\n##### No aliases string map (default)\n\n##### output\n\n```css\n:root {\n    --my-padding: 1rem 1rem 1.5rem 1.5rem;\n}\n\n.test {\n    padding: var(--my-padding);\n}\n```\n\n##### Set an aliases string map\n\n```javascript\nconst options = {\n    aliases: {\n        '--my-padding': 'padding'\n    }\n};\n```\n\n##### output\n\n```css\n[dir=\"ltr\"]:root {\n    --my-padding: 1rem 1rem 1.5rem 1.5rem;\n}\n\n[dir=\"rtl\"]:root {\n    --my-padding: 1rem 1.5rem 1.5rem 1rem;\n}\n\n.test {\n    padding: var(--my-padding);\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### processDeclarationPlugins\n\n<details><summary>Expand</summary>\n<p>\n\nSometimes, we can register some plugins when processing CSS declarations via the `processDeclarationPlugins` options, which is helpful when we need to avoid unexpected flipping situations like `background-position`.\n\n##### input\n\n```css\n.test {\n    background-position: 0 100%;\n}\n```\n\n##### Convert `0` to `100%` (default)\n\n##### output\n\n```css\n.test {\n    background-position: 100% 100%;\n}\n```\n\n##### Set a plugin to avoid flipping\n\n```javascript\nconst options = {\n\tprocessDeclarationPlugins: [\n        {\n            name: 'avoid-flipping-background',\n            priority: 99, // above the core RTLCSS plugin which has a priority value of 100\n            processors: [{\n                expr: /(background|object)(-position(-x)?|-image)?$/i,\n                action: (prop, value) => ({prop, value})}\n            ]\n        }\n    ]\n};\n```\n\n##### output\n\n```css\n.test {\n    background-position: 0 100%;\n}\n```\n\n</p>\n\n</details>\n\n---\n\nControl Directives\n---\n\nControl directives are placed between rules or declarations. They can target a single node or a set of nodes.\n\n>Note: block directives (the ones that start with `begin` and end with `end`) should be placed outside rules to apply the directive to multiple rules or inside a rule to apply the directive to multiple declarations. You should not place the begin of a directive outside a rule and the end inside one (or vice versa) or you will get undesired results.\n\n| Directive                | Description                                                                                                                                    |\n| ------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| `/*rtl:ignore*/`         | Ignores processing of the following rule or declaration                                                           |\n| `/*rtl:begin:ignore*/`   | Starts an ignoring block                                                                                          |\n| `/*rtl:end:ignore*/`     | Ends an ignoring block                                                                                            |\n| `/*rtl:urls*/`           | This directive set the `processUrls` option to `true` in the next declaration or in the declarations of the next rule no mattering the value of the global `processUrls` option  |\n| `/*rtl:begin:urls*/`     | Starts a `processUrls` block block                                                                                           |\n| `/*rtl:end:urls*/`       | Ends a `processUrls` block block                                                                                             |\n| `/*rtl:rules*/`          | This directive set the `processRuleNames` option to `true` in the next rule no mattering the value of the global `processRuleNames` option  |\n| `/*rtl:begin:rules*/`    | Starts a `processRuleNames` block block |\n| `/*rtl:end:rules*/`      | Ends a `processRuleNames` block block   | \n| `/*rtl:source:{source}*/`| Set the source of a rule or a declaration no mattering the value of the `source` property                         |\n| `/*rtl:begin:source:{source}*/` | Starts a source block                                                                                      |\n| `/*rtl:end:source*/`     | Ends a source block                                                                                               |\n| `/*rtl:raw:{CSS}*/`      | Parses the `CSS` parameter and inserts it in its place. Depending on the `source` parameter the parsed `CSS` will be treated as `rtl` or `ltr` |\n\n---\n\n#### `/*rtl:ignore*/`\n\n<details><summary>Expand</summary>\n<p>\n\nThis directive ignores processing of the following rule or declaration. In the next block the whole declaration will be ignored.\n\n##### input\n\n```css\n/*rtl:ignore*/\n.test1, .test2 {\n    text-align: left;\n    left: 10px;\n}\n```\n\n##### output\n\n```css\n.test1, .test2 {\n    text-align: left;\n    left: 10px;\n}\n```\n\nIn the next block only the `left` property will be ignored:\n\n##### input\n\n```css\n.test3, .test4 {\n    text-align: left;\n    /*rtl:ignore*/\n    left: 10px;\n}\n```\n\n##### output\n\n```css\n.test3, .test4 {\n    left: 10px;\n}\n\n[dir=\"ltr\"] .test3, [dir=\"ltr\"] .test4 {\n    text-align: left;\n}\n\n[dir=\"rtl\"] .test3, [dir=\"rtl\"] .test4 {\n    text-align: right;\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### `/*rtl:begin:ignore*/` and `/*rtl:end:ignore*/`\n\n<details><summary>Expand</summary>\n<p>\n\nThese directives should be used together, they will provide the beginning and the end for ignoring rules or declarations.\n\n>**Note:** The directives inserted between these blocks will be ignored and maintained in the final output.\n\nIgnoring multiple rules:\n\n##### input\n\n```css\n/*rtl:begin:ignore*/\n.test1, .test2 {\n    left: 10px;\n    text-align: left;\n}\n\n.test3 {\n    padding: 1px 2px 3px 4px;\n}\n/*rtl:end:ignore*/\n```\n\n##### output\n\n```css\n.test1, .test2 {\n    left: 10px;\n    text-align: left;\n}\n\n.test3 {\n    padding: 1px 2px 3px 4px;\n}\n```\n\nIgnoring multiple declarations:\n\n##### input\n\n```css\n.test1, .test2 {\n    left: 10px;\n    /*rtl:begin:ignore*/\n    margin-left: 4em;\n    padding: 1px 2px 3px 4px;\n    /*rtl:end:ignore*/\n    text-align: left;\n}\n```\n\n##### output\n\n```css\n.test1, .test2 {\n    margin-left: 4em;\n    padding: 1px 2px 3px 4px;\n}\n\n[dir=\"ltr\"] .test1, [dir=\"ltr\"] .test2 {\n    left: 10px;\n    text-align: left;\n}\n\n[dir=\"rtl\"] .test1, [dir=\"rtl\"] .test2 {\n    right: 10px;\n    text-align: right;\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### `/*rtl:urls*/`\n\n<details><summary>Expand</summary>\n<p>\n\nThis directive set the `processUrls` option to `true` in the next declaration or in the declarations of the next rule no mattering the value of the global `processUrls` option:\n\n##### input\n\n```css\n/*rtl:urls*/\n.test1 {\n    background-image: url(\"/buttons/button-ltr.png\");\n}\n\n.test2 {\n    /*rtl:urls*/\n    background-image: url(\"/icons/icon-left.png\");\n}\n```\n\n##### output\n\n```css\n[dir=\"ltr\"] .test1 {\n    background-image: url(\"/buttons/button-ltr.png\");\n}\n\n[dir=\"rtl\"] .test1 {\n    background-image: url(\"/buttons/button-rtl.png\");\n}\n\n[dir=\"ltr\"] .test2 {\n    background-image: url(\"/icons/icon-left.png\");\n}\n\n[dir=\"rtl\"] .test2 {\n    background-image: url(\"/icons/icon-right.png\");\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### `/*rtl:begin:urls*/` and `/*rtl:end:urls*/`\n\n<details><summary>Expand</summary>\n<p>\n\nThese directives should be used together, they will provide the beginning and the end for `processUrls` blocks.\n\n##### input\n\n```css\n/*rtl:begin:urls*/\n.test1 {\n    background-image: url(\"/buttons/button-ltr.png\");\n}\n\n.test2 {\n    background-image: url(\"/icons/icon-left.png\");\n}\n/*rtl:end:urls*/\n\n.test3 {\n    /*rtl:begin:urls*/\n    background-image: url(\"/images/background-left.png\");\n    cursor: url(\"/images/cursor-ltr.png\");\n    /*rtl:end:urls*/\n}\n```\n\n##### output\n\n```css\n[dir=\"ltr\"] .test1 {\n    background-image: url(\"/buttons/button-ltr.png\");\n}\n\n[dir=\"rtl\"] .test1 {\n    background-image: url(\"/buttons/button-rtl.png\");\n}\n\n[dir=\"ltr\"] .test2 {\n    background-image: url(\"/icons/icon-left.png\");\n}\n\n[dir=\"rtl\"] .test2 {\n    background-image: url(\"/icons/icon-right.png\");\n}\n\n[dir=\"ltr\"] .test3 {\n    background-image: url(\"/images/background-left.png\");\n    cursor: url(\"/images/cursor-ltr.png\");\n}\n\n[dir=\"rtl\"] .test3 {\n    background-image: url(\"/images/background-right.png\");\n    cursor: url(\"/images/cursor-rtl.png\");\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### `/*rtl:rules*/`\n\n<details><summary>Expand</summary>\n<p>\n\nThis directive set the `processRuleNames` option to `true` in the next rule no mattering the value of the global `processRuleNames` option:\n\n##### input\n\n```css\n/*rtl:rules*/\n.test1-ltr {\n    background-image: url('/images/test1-l.png');\n}\n\n/*rtl:rules*/\n.test1-rtl {\n    background-image: url('/images/test1-r.png');\n}\n\n/*rtl:rules*/\n.test2-left::before {\n    content: \"\\f007\";\n}\n\n.test2-right::before {\n    content: \"\\f010\";\n}\n```\n\n##### output\n\n```css\n[dir=\"ltr\"] .test1-ltr {\n    background-image: url('/images/test1-l.png');\n}\n\n[dir=\"rtl\"] .test1-ltr {\n    background-image: url('/images/test1-r.png');\n}\n\n[dir=\"ltr\"] .test1-rtl {\n    background-image: url('/images/test1-r.png');\n}\n\n[dir=\"rtl\"] .test1-rtl {\n    background-image: url('/images/test1-l.png');\n}\n\n/* These selectors will not be processed because only one of them has the rtl:rules directive */\n.test2-left::before {\n    content: \"\\f007\";\n}\n\n.test2-right::before {\n    content: \"\\f010\";\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### `/*rtl:begin:rules*/` and `/*rtl:end:rules*/`\n\n<details><summary>Expand</summary>\n<p>\n\nThese directives should be used together, they will provide the beginning and the end for `processRuleNames` blocks.\n\n##### input\n\n```css\n.test1-ltr {\n    background-image: url('/images/test1-l.png');\n}\n\n.test1-rtl {\n    background-image: url('/images/test1-r.png');\n}\n\n/*rtl:begin:rules*/\n.test2-left::before {\n    content: \"\\f007\";\n}\n\n.test2-right::before {\n    content: \"\\f010\";\n}\n/*rtl:begin:rules*/\n```\n\n##### output\n\n```css\n.test1-ltr {\n    background-image: url('/images/test1-l.png');\n}\n\n.test1-rtl {\n    background-image: url('/images/test1-r.png');\n}\n\n[dir=\"ltr\"] .test2-left::before {\n    content: \"\\f007\";\n}\n\n[dir=\"rtl\"] .test2-left::before {\n    content: \"\\f010\";\n}\n\n[dir=\"ltr\"] .test2-right::before {\n    content: \"\\f010\";\n}\n\n[dir=\"rtl\"] .test2-right::before {\n    content: \"\\f007\";\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### `/*rtl:source:{source}*/`\n\n<details><summary>Expand</summary>\n<p>\n\nThis directive sets the source of a rule or a directive ignoring the value of the `source` property:\n\n##### input\n\n```css\n/*rtl:source:rtl*/\n.test {\n    color: #FFF;\n    border-left: 1px solid #666;\n    padding: 10px 5px 10px 20px;\n    text-align: left;\n    width: 100%;\n}\n```\n\n##### output\n\n```css\n.test {\n    color: #FFF;\n    width: 100%;\n}\n\n[dir=\"ltr\"] .test {\n    border-right: 1px solid #666;\n    padding: 10px 20px 10px 5px;\n    text-align: right;\n}\n\n[dir=\"rtl\"] .test {\n    border-left: 1px solid #666;\n    padding: 10px 5px 10px 20px;\n    text-align: left;\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### `/*rtl:begin:source:{source}*/` and `/*rtl:end:source*/`\n\n<details><summary>Expand</summary>\n<p>\n\nThese directives should be used together, they will provide the beginning and the end of source blocks for rules or declarations:\n\n##### input\n\n```css\n.test {\n    color: #FFF;\n    border-left: 1px solid #666;\n    /*rtl:begin:source:rtl*/\n    padding: 10px 5px 10px 20px;\n    text-align: left;\n    /*rtl:end:source*/\n    width: 100%;\n}\n```\n\n##### output\n\n```css\n.test {\n    color: #FFF;\n    width: 100%;\n}\n\n[dir=\"ltr\"] .test {\n    border-left: 1px solid #666;\n    padding: 10px 20px 10px 5px;\n    text-align: right;\n}\n\n[dir=\"rtl\"] .test {\n    border-right: 1px solid #666;\n    padding: 10px 5px 10px 20px;\n    text-align: left;\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### `/*rtl:raw:{CSS}*/`\n\n<details><summary>Expand</summary>\n<p>\n\nParses the `CSS` parameter and inserts it in its place. Depending on the `source` parameter the parsed CSS will be treated as `rtl` or `ltr`:\n\n##### input\n\n```css\n.test1 {\n    color: #EFEFEF;\n    left: 10px;\n    /*rtl:raw:\n    height: 50px;\n    width: 100px;*/\n}\n\n/*rtl:raw:.test2 {\n    color: #EFEFEF;\n    left: 10px;\n    width: 100%;    \n}\n\n.test3 {\n    transform: translate(10px, 20px);\n}\n*/\n```\n\n##### output\n\n```css\n.test1 {\n    color: #EFEFEF;\n}\n\n[dir=\"ltr\"] .test1 {\n    left: 10px;\n}\n\n[dir=\"rtl\"] .test1 {\n    right: 10px;\n    height: 50px;\n    width: 100px;\n}\n\n[dir=\"rtl\"] .test2 {\n    color: #EFEFEF;\n    left: 10px;\n    width: 100%;    \n}\n\n[dir=\"rtl\"] .test3 {\n    transform: translate(10px, 20px);\n}\n```\n\n</p>\n\n</details>\n\n---\n\nValue Directives\n---\n\nValue directives are placed anywhere inside the declaration value. They target the containing declaration node.\n\n| Directive                | Description                                                                      |\n| ------------------------ | -------------------------------------------------------------------------------- |\n| `/*rtl:ignore*/`         | Ignores processing of the declaration                                            |\n| `/*rtl:append{value}*/`  | Appends `{value}` to the end of the declaration value                            |\n| `/*rtl:insert:{value}*/` | Inserts `{value}` to where the directive is located inside the declaration value |\n| `/*rtl:prepend:{value}*/`| Prepends `{value}` to the begining of the declaration value                      |\n| `/*rtl:{value}*/`        | Replaces the declaration value with `{value}`                                    |\n\n---\n\n#### `/*rtl:ignore*/`\n\n<details><summary>Expand</summary>\n<p>\n\nThis directive ignores processing of the current declaration:\n\n##### input\n\n```css\n.test1, .test2 {\n    text-align: left /*rtl:ignore*/;\n    left: 10px;\n}\n```\n\n##### output\n\n```css\n.test1, .test2 {\n    text-align: left;\n}\n\n[dir=\"ltr\"] .test1, [dir=\"ltr\"] .test2 {\n    left: 10px;\n}\n\n[dir=\"rtl\"] .test1, [dir=\"rtl\"] .test2 {\n    right: 10px;\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### `/*rtl:append{value}*/`\n\n<details><summary>Expand</summary>\n<p>\n\nThis directive appends `{value}` to the end of the declaration value:\n\n##### input\n\n```css\n.test1, .test2 {\n    padding: 10px /*rtl:append20px*/;\n    left: 10px;\n}\n```\n\n##### output\n\n```css\n[dir=\"ltr\"] .test1, [dir=\"ltr\"] .test2 {\n    padding: 10px;\n    left: 10px;\n}\n\n[dir=\"rtl\"] .test1, [dir=\"rtl\"] .test2 {\n    padding: 10px 20px;\n    right: 10px;\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### `/*rtl:insert:{value}*/`\n\n<details><summary>Expand</summary>\n<p>\n\nThis directive inserts `{value}` to where the directive is located inside the declaration value:\n\n##### input\n\n```css\n.test1, .test2 {\n    padding: 10px/*rtl:insert 20px*/ 5px;\n    left: 10px;\n}\n```\n\n##### output\n\n```css\n[dir=\"ltr\"] .test1, [dir=\"ltr\"] .test2 {\n    padding: 10px 5px;\n    left: 10px;\n}\n\n[dir=\"rtl\"] .test1, [dir=\"rtl\"] .test2 {\n    padding: 10px 20px 5px;\n    right: 10px;\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### `/*rtl:prepend:{value}*/`\n\n<details><summary>Expand</summary>\n<p>\n\nThis directive prepends `{value}` to the begining of the declaration value:\n\n##### input\n\n```css\n.test1, .test2 {\n    font-family: Arial, Helvetica/*rtl:prepend:\"Droid Arabic Kufi\", */;\n    left: 10px;\n}\n```\n\n##### output\n\n```css\n[dir=\"ltr\"] .test1, [dir=\"ltr\"] .test2 {\n    font-family: Arial, Helvetica;\n    left: 10px;\n}\n\n[dir=\"rtl\"] .test1, [dir=\"rtl\"] .test2 {\n    font-family: \"Droid Arabic Kufi\", Arial, Helvetica;\n    right: 10px;\n}\n```\n\n</p>\n\n</details>\n\n---\n\n#### `/*rtl:{value}*/`\n\n<details><summary>Expand</summary>\n<p>\n\nThis directive replaces the declaration value with `{value}`:\n\n##### input\n\n```css\n.test1, .test2 {\n    font-family: Arial, Helvetica/*rtl:\"Droid Arabic Kufi\"*/;\n    left: 10px;\n}\n```\n\n##### output\n\n```css\n[dir=\"ltr\"] .test1, [dir=\"ltr\"] .test2 {\n    font-family: Arial, Helvetica;\n    left: 10px;\n}\n\n[dir=\"rtl\"] .test1, [dir=\"rtl\"] .test2 {\n    font-family: \"Droid Arabic Kufi\";\n    right: 10px;\n}\n```\n\n</p>\n\n</details>\n\n---\n\nIf you do not use PostCSS, add it according to [official docs]\nand set this plugin in settings.\n\n[official docs]: https://github.com/postcss/postcss#usage\n",
	"readmeFilename": "README.md",
	"_downloads": 5
}