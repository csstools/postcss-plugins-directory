{
	"_id": "postcss-change-dir",
	"_rev": "1-f0eece0c08d556952c5f810ee2f74a20",
	"name": "postcss-change-dir",
	"dist-tags": {
		"latest": "0.1.1"
	},
	"versions": {
		"0.1.0": {
			"name": "postcss-change-dir",
			"version": "0.1.0",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"postcss plugin",
				"rtl",
				"ltr",
				"right to left",
				"left to right"
			],
			"author": {
				"name": "ame"
			},
			"license": "MIT",
			"_id": "postcss-change-dir@0.1.0",
			"maintainers": [
				{
					"name": "true-ame",
					"email": "1456723200@qq.com"
				}
			],
			"dist": {
				"shasum": "fa3dadc841f0d4e927ae69c91d07b72c89c5ab1e",
				"tarball": "https://registry.npmjs.org/postcss-change-dir/-/postcss-change-dir-0.1.0.tgz",
				"fileCount": 21,
				"integrity": "sha512-VqZBTCthmDl0DjOJ0bSVS692fJD9DSrSkljxx0j3Oy75Hg6pl8LBHgOP2hn+CHYWFCJHWkDTMm3k0/sq5O3oVw==",
				"signatures": [
					{
						"sig": "MEUCIENlHbG9ID0MCq7h6UVShFd2HtYR8Da6nYmNHl+Wf8IBAiEAvHE+0fXWj+fDrAXqSlRaLE2Qlpq49hgl194q22HLbmc=",
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"
					}
				],
				"unpackedSize": 56350
			},
			"main": "lib/index.js",
			"engines": {
				"node": ">=14.0.0"
			},
			"gitHead": "eb99e483063bb2578cc19b1c26ccdff50965d08e",
			"scripts": {
				"lint": "eslint ./src",
				"test": "jest",
				"build": "babel ./src --out-dir ./lib --ignore '**/__tests__/*'",
				"start": "jest --watch",
				"prepare": "npm run lint && npm run build && npm test"
			},
			"_npmUser": {
				"name": "true-ame",
				"email": "1456723200@qq.com"
			},
			"_npmVersion": "10.7.0",
			"description": "PostCSS plugin for RTL-optimizations",
			"directories": {},
			"_nodeVersion": "18.20.4",
			"dependencies": {
				"rtlcss": "4.0.0"
			},
			"_hasShrinkwrap": false,
			"devDependencies": {
				"jest": "^29.3.1",
				"eslint": "^7.0.0",
				"@babel/cli": "^7.19.3",
				"babel-eslint": "^10.0.3",
				"postcss-import": "^12.0.1",
				"@babel/preset-env": "^7.20.2",
				"eslint-plugin-import": "^2.20.1",
				"eslint-config-airbnb-base": "^14.0.0"
			},
			"peerDependencies": {
				"postcss": "^8.0.0"
			},
			"_npmOperationalInternal": {
				"tmp": "tmp/postcss-change-dir_0.1.0_1735637375566_0.8674909892925771",
				"host": "s3://npm-registry-packages-npm-production"
			}
		},
		"0.1.1": {
			"name": "postcss-change-dir",
			"version": "0.1.1",
			"description": "PostCSS plugin to build Cascading Style Sheets (CSS) with Left-To-Right (LTR) and Right-To-Left (RTL) rules",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"rtl",
				"ltr",
				"right-to-left",
				"left-to-right",
				"postcss-change-dir",
				"rtlcss"
			],
			"main": "index.js",
			"module": "esm/index.js",
			"types": "index.d.ts",
			"exports": {
				".": {
					"require": {
						"types": "./index.d.ts",
						"default": "./index.js"
					},
					"import": {
						"types": "./esm/index.d.ts",
						"default": "./esm/index.js"
					}
				},
				"./options": {
					"require": {
						"types": "./options.d.ts",
						"default": "./options.js"
					},
					"import": {
						"types": "./esm/options.d.ts",
						"default": "./esm/options.js"
					}
				}
			},
			"scripts": {
				"test": "jest --clearCache && jest --verbose",
				"lint": "eslint \"src/**/*.ts\" \"playground/src/**/*.tsx\" \"tests/**/*.ts\"",
				"clean": "./scripts/clean.sh",
				"copy": "./scripts/copy.sh",
				"modify-dts": "replace-in-file --configFile=config.replace.json",
				"build": "pnpm clean && rollup --config rollup.config.js --bundleConfigAsCjs && pnpm copy && pnpm modify-dts",
				"prepare": "pnpm build",
				"prepublishOnly": "pnpm lint && pnpm test",
				"version": "git add .",
				"postversion": "git push && git push --tags"
			},
			"dependencies": {
				"rtlcss": "4.3.0"
			},
			"devDependencies": {
				"@rollup/plugin-json": "^6.1.0",
				"@rollup/plugin-terser": "^0.4.4",
				"@types/eslint": "^9.6.1",
				"@types/jest": "^29.5.14",
				"@types/jest-specific-snapshot": "^0.5.9",
				"@types/node": "^22.10.2",
				"@types/rtlcss": "^3.5.4",
				"eslint": "^9.17.0",
				"eslint-plugin-jest": "^28.10.0",
				"globals": "^15.14.0",
				"jest": "^29.7.0",
				"jest-specific-snapshot": "^8.0.0",
				"postcss": "^8.4.26",
				"replace-in-file": "^8.3.0",
				"rimraf": "^6.0.1",
				"rollup": "^4.29.1",
				"rollup-plugin-ts": "^3.4.5",
				"ts-jest": "^29.2.5",
				"tslib": "^2.8.1",
				"typescript": "^5.7.2",
				"typescript-eslint": "^8.18.2"
			},
			"engines": {
				"node": ">=18.0.0"
			},
			"_id": "postcss-change-dir@0.1.1",
			"gitHead": "ea2c24e07987885abf678e7f4eeb63b85b483954",
			"_nodeVersion": "18.20.4",
			"_npmVersion": "10.7.0",
			"dist": {
				"integrity": "sha512-tu/So7vS4oxDdwW3l1RbKbaZ09a64sKG0I3SXsyexsnENm8AeO+vVEiqYKmXx1pkRgxk+y/K66fETsRmrOZqrw==",
				"shasum": "002fdfdaef7ba958abe5abe1090c1bf6f697fdd3",
				"tarball": "https://registry.npmjs.org/postcss-change-dir/-/postcss-change-dir-0.1.1.tgz",
				"fileCount": 11,
				"unpackedSize": 100504,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIQD0RfiNuccqwii2e8k2j9bEy8yIlB84yiaMo2WD/Iik6wIgT6nmH2IT2gtTXI75QAj2wBukR1cwTGVr91nbzu92oTI="
					}
				]
			},
			"_npmUser": {
				"name": "true-ame",
				"email": "1456723200@qq.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "true-ame",
					"email": "1456723200@qq.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages-npm-production",
				"tmp": "tmp/postcss-change-dir_0.1.1_1736733247191_0.8618840854875525"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2024-12-31T09:29:35.565Z",
		"modified": "2025-01-13T01:54:07.588Z",
		"0.1.0": "2024-12-31T09:29:35.796Z",
		"0.1.1": "2025-01-13T01:54:07.402Z"
	},
	"keywords": [
		"postcss",
		"css",
		"postcss-plugin",
		"rtl",
		"ltr",
		"right-to-left",
		"left-to-right",
		"postcss-change-dir",
		"rtlcss"
	],
	"description": "PostCSS plugin to build Cascading Style Sheets (CSS) with Left-To-Right (LTR) and Right-To-Left (RTL) rules",
	"maintainers": [
		{
			"name": "true-ame",
			"email": "1456723200@qq.com"
		}
	],
	"readme": "PostCSS RTLCSS 是一个 [PostCSS] 插件，用于构建包含左到右（LTR）和右到左（RTL）规则的层叠样式表（CSS）。RTLCSS 允许用户翻转整个 CSS 文件，目的是使用原始 CSS 用于一个方向，而新生成的 CSS 用于另一个方向。PostCSS RTLCSS 的作用是创建一个包含两个方向的单一 CSS 文件，或者创建一个仅包含翻转规则的最小 CSS 文件，目的是覆盖主文件。\n\n## 安装\n\n#### npm\n\n```bash\nnpm install postcss-change-dir --save-dev\n```\n\n#### pnpm\n\n```bash\npnpm add -D postcss-change-dir\n```\n\n#### yarn\n\n```bash\nyarn add postcss-change-dir -D\n```\n\n## 基本用法\n\n#### 与 CommonJS 一起使用\n\n```javascript\nconst postcss = require('postcss');\nconst postcssRTLCSS = require('postcss-change-dir');\nconst { Mode, Source } = require('postcss-change-dir/options');\n\nconst options = { ...可用选项... };\nconst result = postcss([\n    postcssRTLCSS(options)\n]).process(cssInput);\n\nconst rtlCSS = result.css;\n```\n\n#### 与 ES6 模块一起使用\n\n```javascript\nimport postcss from 'postcss';\nimport postcssRTLCSS from 'postcss-change-dir';\nimport { Mode, Source } from 'postcss-change-dir/options';\n\nconst options = { ...可用选项... };\nconst result = postcss([\n    postcssRTLCSS(options)\n]).process(cssInput);\n\nconst rtlCSS = result.css;\n```\n\n#### 在 Webpack 中与 postcss-loader 一起使用\n\n```javascript\nrules: [\n  {\n    test: /\\.css$/,\n    use: [\n      { loader: 'style-loader' },\n      { loader: 'css-loader' },\n      {\n        loader: 'postcss-loader',\n        options: {\n          postcssOptions: {\n            plugins: [postcssRTLCSS(options)]\n          }\n        }\n      }\n    ]\n  }\n]\n```\n\n## 示例\n\n#### 输入\n\n```css\n.test1,\n.test2 {\n  background-color: #fff;\n  background-position: 10px 20px;\n  border-radius: 0 2px 0 8px;\n  color: #666;\n  padding-right: 20px;\n  text-align: left;\n  transform: translate(-50%, 50%);\n  width: 100%;\n}\n\n.test3 {\n  direction: ltr;\n  margin: 1px 2px 3px;\n  padding: 10px 20px;\n  text-align: center;\n}\n```\n\n#### 使用组合模式（默认推荐）\n\n这是推荐的方法，它将生成更多的 CSS 代码，因为每个方向都将具有其特定的前缀规则，但这是最安全的选择。\n\n```css\n.test1,\n.test2 {\n  background-color: #fff;\n  background-position: 10px 20px;\n  color: #666;\n  width: 100%;\n}\n\n[dir='ltr'] .test1,\n[dir='ltr'] .test2 {\n  border-radius: 0 2px 0 8px;\n  padding-right: 20px;\n  text-align: left;\n  transform: translate(-50%, 50%);\n}\n\n[dir='rtl'] .test1,\n[dir='rtl'] .test2 {\n  border-radius: 2px 0 8px 0;\n  padding-left: 20px;\n  text-align: right;\n  transform: translate(50%, 50%);\n}\n\n.test3 {\n  margin: 1px 2px 3px;\n  padding: 10px 20px;\n  text-align: center;\n}\n\n[dir='ltr'] .test3 {\n  direction: ltr;\n}\n\n[dir='rtl'] .test3 {\n  direction: rtl;\n}\n```\n\n#### 使用覆盖模式输出\n\n> [!重要]\n> 不推荐使用此方法，[查看下面的原因](#两种覆盖方法的缺点)\n\n这是覆盖的另一种替代方法。它将生成较少的代码，因为它让主规则保持不变，并且生成较短的特定规则来覆盖受文本方向影响的属性。\n\n```css\n.test1,\n.test2 {\n  background-color: #fff;\n  background-position: 10px 20px;\n  border-radius: 0 2px 0 8px;\n  color: #666;\n  padding-right: 20px;\n  text-align: left;\n  transform: translate(-50%, 50%);\n  width: 100%;\n}\n\n[dir='rtl'] .test1,\n[dir='rtl'] .test2 {\n  border-radius: 2px 0 8px 0;\n  padding-right: 0;\n  padding-left: 20px;\n  text-align: right;\n  transform: translate(50%, 50%);\n}\n\n.test3 {\n  direction: ltr;\n  margin: 1px 2px 3px;\n  padding: 10px 20px;\n  text-align: center;\n}\n\n[dir='rtl'] .test3 {\n  direction: rtl;\n}\n```\n\n#### 使用差异模式输出\n\n> [!重要]\n> 不推荐使用此方法，[查看下面的原因](#两种覆盖方法的缺点)\n\n这是第二种替代的覆盖方法。它生成的代码量最少，因为它只输出被翻转的规则，而不加前缀。这种方法的目的是生成一个单独的样式表文件，该文件将被加载在原始文件之上，以覆盖需要在特定方向翻转的规则。\n\n```css\n.test1,\n.test2 {\n  border-radius: 2px 0 8px 0;\n  padding-right: 0;\n  padding-left: 20px;\n  text-align: right;\n  transform: translate(50%, 50%);\n}\n\n.test3 {\n  direction: rtl;\n}\n```\n\n#### 两种覆盖方法的缺点\n\n1. 一些指令如 `/*rtl:freeze*/`, `/*rtl:begin:freeze*/` 和 `/*rtl:end:freeze*/` 在这些方法中不起作用。\n2. 它们可能会覆盖来自另一个类的属性，如果同时使用多个类。查看下一个 `HTML` 和 `CSS` 代码：\n\n```html\n<div class=\"test1 test2\">这是一个示例</div>\n```\n\n```css\n.test1 {\n  background: #666;\n  color: #fff;\n  padding: 20px;\n}\n\n.test2 {\n  padding-right: 10px;\n}\n```\n\n使用 `combined` 方法，生成的代码将是下一个：\n\n```css\n.test1 {\n  background: #666;\n  color: #fff;\n  padding: 20px;\n}\n\n[dir='ltr'] .test2 {\n  padding-right: 10px;\n}\n\n[dir='rtl'] .test2 {\n  padding-left: 10px;\n}\n```\n\n所以，`div` 在 `LTR` 中的 padding 将是 `20px 10px 20px 20px`，在 `RTL` 中将是 `20px 20px 20px 10px`。这里一切都按预期工作。\n\n然而，使用 `override` 方法，生成的代码将是下一个：\n\n```css\n.test1 {\n  background: #666;\n  color: #fff;\n  padding: 20px;\n}\n\n.test2 {\n  padding-right: 10px;\n}\n\n[dir='rtl'] .test2 {\n  padding-right: 0;\n  padding-left: 10px;\n}\n```\n\n使用 `diff` 方法，生成的代码将是下一个：\n\n```css\n.test2 {\n  padding-right: 0;\n  padding-left: 10px;\n}\n```\n\n现在 `div` 在 `LTR` 中的 padding 将是 `20px 10px 20px 20px`，在 `RTL` 中将是 `20px 0 20px 10px`，因为当类 `test2` 被覆盖时，没有考虑到它可能与 `test1` 一起使用，具有相同的属性。在这种情况下的解决方案是提供被继承的属性：\n\n```css\n.test1 {\n  background: #666;\n  color: #fff;\n  padding: 20px;\n}\n\n.test2 {\n  padding-left: 20px;\n  padding-right: 10px;\n}\n```\n\n所以，使用 `override` 方法，生成的代码将是：\n\n```css\n.test1 {\n  background: #666;\n  color: #fff;\n  padding: 20px;\n}\n\n.test2 {\n  padding-left: 20px;\n  padding-right: 10px;\n}\n\n[dir='rtl'] .test2 {\n  padding-right: 20px;\n  padding-left: 10px;\n}\n```\n\n使用 `diff` 方法，生成的代码将是：\n\n```css\n.test2 {\n  padding-right: 20px;\n  padding-left: 10px;\n}\n```\n\n## 插件选项\n\n所有选项都是可选的，如果省略了任何一个选项或者它们的类型或格式错误，将使用默认值\n\n| 选项                                                    | 类型                     | 默认值                 | 描述                                                                                                                                               |\n| ------------------------------------------------------- | ------------------------ | ---------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [mode](#mode)                                           | `Mode (string)`          | `Mode.combined`        | 生成最终 CSS 规则的模式                                                                                                                            |\n| [ltrPrefix](#ltrprefix-and-rtlprefix)                   | `string` or `string[]`   | `[dir=\"ltr\"]`          | 左到右 CSS 规则中使用的前缀                                                                                                                        |\n| [rtlPrefix](#ltrprefix-and-rtlprefix)                   | `string` or `string[]`   | `[dir=\"rtl\"]`          | 右到左 CSS 规则中使用的前缀                                                                                                                        |\n| [bothPrefix](#bothprefix)                               | `string` or `string[]`   | `[dir]`                | 创建一个新规则，当 ltr 或 rtl 规则的特异性覆盖其声明时，影响两个方向                                                                               |\n| [prefixSelectorTransformer](#prefixselectortransformer) | `function`               | `null`                 | 转换函数，以更控制选择器前缀逻辑                                                                                                                   |\n| [safeBothPrefix](#safebothprefix)                       | `boolean`                | `false`                | 将 `bothPrefix` 添加到可能受方向影响的声明中，以避免被特异性覆盖                                                                                   |\n| [ignorePrefixedRules](#ignoreprefixedrules)             | `boolean`                | `true`                 | 忽略已经被 `ltrPrefix`, `rtlPrefix`, 或 `bothPrefix` 中的一些前缀标记的规则                                                                        |\n| [source](#source)                                       | `Source (string)`        | `Source.ltr`           | 从哪个方向生成最终 CSS                                                                                                                             |\n| [processUrls](#processurls)                             | `boolean`                | `false`                | 使用字符串映射更改 URL 中的字符串                                                                                                                  |\n| [processRuleNames](#processrulenames)                   | `boolean`                | `false`                | 如果它们与 `stringMap` 中的任何条目匹配，则在方向变化时交换两个规则，即使它们不包含方向属性                                                        |\n| [processKeyFrames](#processkeyframes)                   | `boolean`                | `false`                | 翻转关键帧动画                                                                                                                                     |\n| [processEnv](#processenv)                               | `boolean`                | `true`                 | 当 processEnv 为 false 时，防止翻转代理定义的环境变量（`safe-area-inset-left` 和 `safe-area-inset-right`）                                         |\n| [useCalc](#usecalc)                                     | `boolean`                | `false`                | 如果它们使用 [calc](https://developer.mozilla.org/en-US/docs/Web/CSS/calc) 表示长度单位，则翻转 `background-position-x` 和 `transform-origin` 属性 |\n| [stringMap](#stringmap)                                 | `PluginStringMap[]`      | [查看下面](#stringmap) | 用于替换声明的 URL 和匹配规则选择器名称的字符串映射数组，如果 `processRuleNames` 为 `true`                                                         |\n| [greedy](#greedy)                                       | `boolean`                | `false`                | 当 greedy 为 `true` 时，`stringMap` 的匹配不考虑单词边界                                                                                           |\n| [aliases](#aliases)                                     | `Record<string, string>` | `{}`                   | 字符串映射，将一些声明视为其他声明                                                                                                                 |\n| [processDeclarationPlugins](#processdeclarationplugins) | `DeclarationPlugin[]`    | `[]`                   | 处理 CSS 声明时应用的插件                                                                                                                          |\n\n---\n\n## mode\n\nmode 选项已在 [使用组合模式输出](#使用组合模式输出-默认), [使用覆盖模式输出](#使用覆盖模式输出), 和 [使用差异模式输出](#使用差异模式输出) 部分中解释。为了避免使用魔术字符串，该包暴露了一个具有这些值的对象，但无论如何都可以使用字符串值：\n\n```javascript\nimport postcss from 'postcss'\nimport postcssRTLCSS from 'postcss-change-dir'\nimport { Mode } from 'postcss-change-dir/options'\n\nconst input = '... css 代码 ...'\nconst optionsCombined = { mode: Mode.combined } // 这是默认值\nconst optionsOverride = { mode: Mode.override }\nconst optionsDiff = { mode: Mode.diff }\n\nconst outputCombined = postcss([postcssRTLCSS(optionsCombined)]).process(input)\n\nconst outputOverride = postcss([postcssRTLCSS(optionsOverride)]).process(input)\n\nconst outputDiff = postcss([postcssRTLCSS(optionsDiff)]).process(input)\n```\n\n---\n\n## ltrPrefix 和 rtlPrefix\n\n这两个选项管理每个方向的前缀字符串。它们可以是字符串或字符串数组：\n\n##### 输入\n\n```css\n.test1,\n.test2 {\n  left: 10px;\n}\n\n.test3,\n.test4 {\n  text-align: left;\n}\n```\n\n##### 使用字符串\n\n```javascript\nconst options = {\n  ltrPrefix: '.ltr',\n  rtlPrefix: '.rtl'\n}\n```\n\n##### 输出\n\n```css\n.ltr .test1,\n.ltr .test2 {\n  left: 10px;\n}\n\n.rtl .test1,\n.rtl .test2 {\n  right: 10px;\n}\n\n.ltr .test3,\n.ltr .test4 {\n  text-align: left;\n}\n\n.rtl .test3,\n.rtl .test4 {\n  text-align: right;\n}\n```\n\n##### 使用字符串数组\n\n```javascript\nconst options = {\n  ltrPrefix: ['[dir=\"ltr\"]', '.ltr'],\n  rtlPrefix: ['[dir=\"rtl\"]', '.rtl']\n}\n```\n\n##### 输出\n\n```css\n[dir='ltr'] .test1,\n.ltr .test1,\n[dir='ltr'] .test2,\n.ltr .test2 {\n  left: 10px;\n}\n\n[dir='rtl'] .test1,\n.rtl .test1,\n[dir='rtl'] .test2,\n.rtl .test2 {\n  right: 10px;\n}\n\n[dir='ltr'] .test3,\n.ltr .test3,\n[dir='ltr'] .test4,\n.ltr .test4 {\n  text-align: left;\n}\n\n[dir='rtl'] .test3,\n.rtl .test3,\n[dir='rtl'] .test4,\n.rtl .test4 {\n  text-align: right;\n}\n```\n\n---\n\n## bothPrefix\n\n这个前缀将在一些特定情况下使用，其中一个 ltr 或 rtl 规则将由于[特异性](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity)覆盖主规则中位于的声明。考虑使用 `processUrls` 选项作为 `true` 的下一个示例：\n\n```css\n.test1 {\n  background: url('icons/ltr/arrow.png');\n  background-size: 10px 20px;\n  width: 10px;\n}\n```\n\n生成的 CSS 将是：\n\n```css\n.test1 {\n  background-size: 10px 20px;\n  width: 10px;\n}\n\n[dir='ltr'] .test1 {\n  background: url('icons/ltr/arrow.png');\n}\n\n[dir='rtl'] .test1 {\n  background: url('icons/rtl/arrow.png');\n}\n```\n\n在之前的案例中，`background-size` 属性被 `background` 属性覆盖。即使我们改变规则的顺序，最后一组规则具有更高的特异性，因此它们将覆盖第一组规则。\n\n为了解决这个问题，最后将使用 `bothPrefix` 参数创建另一个规则：\n\n```css\n.test1 {\n  width: 10px;\n}\n\n[dir='ltr'] .test1 {\n  background: url('icons/ltr/arrow.png');\n}\n\n[dir='rtl'] .test1 {\n  background: url('icons/rtl/arrow.png');\n}\n\n[dir] {\n  background-size: 10px 20px;\n}\n```\n\n不管怎样的方向，`background-size` 属性都受到尊重。\n\n---\n\n## prefixSelectorTransformer\n\n这个函数将用于转换选择器，并根据我们的意愿前缀它们。第一个参数将是使用的前缀，第二个是当前选择器：\n\n> [!注意]\n>\n> - 如果该函数不返回字符串，则将使用默认的前缀逻辑。\n> - 如果使用这个函数，请确保 `html`, `:root`\n>   或 `::view-transition` 使用自定义前缀逻辑。您应该涵盖这些情况。\n\n##### 输入\n\n```css\n.test1 {\n  left: 10px;\n  padding-right: 5px;\n  padding-inline-end: 20px;\n}\n```\n\n如果 `prefixSelectorTransformer` 没有发送（默认）：\n\n##### 输出\n\n```css\n[dir='ltr'] .test1 {\n  left: 10px;\n  padding-right: 5px;\n}\n\n[dir='rtl'] .test1 {\n  right: 10px;\n  padding-left: 5px;\n}\n\n[dir] .test1 {\n  padding-inline-end: 20px;\n}\n```\n\n设置 `prefixSelectorTransformer` 函数\n\n```javascript\nconst options = {\n  prefixSelectorTransformer: function (prefix, selector) {\n    if (prefix === '[dir]') {\n      return `.container > ${prefix} > ${selector}`\n    }\n    return `${selector}${prefix}`\n  }\n}\n```\n\n##### 输出\n\n```css\n.test1[dir='ltr'] {\n  left: 10px;\n  padding-right: 5px;\n}\n\n.test1[dir='rtl'] {\n  right: 10px;\n  padding-left: 5px;\n}\n\n.container > [dir] > .test1 {\n  padding-inline-end: 20px;\n}\n```\n\n---\n\n## safeBothPrefix\n\n这个选项将 `boxPrefix` 选项添加到可以翻转的声明中，不管它们是否在同一规则中被覆盖。这避免了它们被其他规则中包含的翻转声明的[特异性](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity)覆盖。例如，让我们考虑一个 `div` 元素具有以下规则：\n\n```html\n<div class=\"test1 test2\">这是一个示例</div>\n```\n\n```css\n.test1 {\n  color: #fff;\n  padding: 4px 10px 4px 20px;\n  width: 100%;\n}\n\n.test2 {\n  padding: 0;\n}\n```\n\n预期的结果是元素的 `padding` 变为 `0`，因为它被 `test2` 重置了。使用 `safeBothPrefix` 为 `false` 时，生成的 CSS 将是：\n\n```css\n.test1 {\n  color: #fff;\n  width: 100%;\n}\n\n[dir='ltr'] .test1 {\n  padding: 4px 10px 4px 20px;\n}\n\n[dir='rtl'] .test1 {\n  padding: 4px 20px 4px 10px;\n}\n\n.test2 {\n  padding: 0;\n}\n```\n\n结果是 `test1` 的 `padding` 属性的特异性高于 `test2` 中的同一属性，所以如果同时应用两个规则，则不会被重置。让我们检查如果 `safeBothPrefix` 是 `true` 的结果：\n\n```css\n.test1 {\n  color: #fff;\n  width: 100%;\n}\n\n[dir='ltr'] .test1 {\n  padding: 4px 10px 4px 20px;\n}\n\n[dir='rtl'] .test1 {\n  padding: 4px 20px 4px 10px;\n}\n\n[dir] .test2 {\n  padding: 0;\n}\n```\n\n由于 `test2` 具有与 `test1` 相同的特异性水平，现在结果是如果同时使用两个规则，则 `padding` 将被重置。\n\n---\n\n## ignorePrefixedRules\n\n这个选项用于忽略已经被 `ltrPrefix`, `rtlPrefix`, 或 `bothPrefix` 中的一些前缀标记的规则：\n\n##### 输入\n\n```css\n[dir='ltr'] test {\n  left: 10px;\n}\n\n[dir='rtl'] test {\n  right: 10px;\n}\n```\n\n##### ignorePrefixedRules 为 true\n\n```javascript\nconst options = { ignorePrefixedRules: true } // 这是默认值\n```\n\n##### 输出\n\n```css\n[dir='ltr'] test {\n  left: 10px;\n}\n\n[dir='rtl'] test {\n  right: 10px;\n}\n```\n\n##### ignorePrefixedRules 为 false\n\n```javascript\nconst options = { ignorePrefixedRules: false }\n```\n\n##### 输出\n\n```css\n[dir='ltr'] [dir='ltr'] test {\n  left: 10px;\n}\n\n[dir='rtl'] [dir='ltr'] test {\n  right: 10px;\n}\n\n[dir='ltr'] [dir='rtl'] test {\n  right: 10px;\n}\n\n[dir='rtl'] [dir='rtl'] test {\n  left: 10px;\n}\n```\n\n---\n\n## source\n\n这个选项管理转换是从 `LTR` 到 `RTL` 还是反之。\n\n##### 输入\n\n```css\n.test1,\n.test2 {\n  left: 10px;\n}\n```\n\n##### 使用 Source.ltr 在组合模式\n\n```javascript\nimport { Mode, Source } from 'postcss-change-dir/options'\n\nconst options = {\n  mode: Mode.combined,\n  source: Source.ltr // 这是默认值\n}\n```\n\n##### 输出\n\n```css\n[dir='ltr'] .test1,\n[dir='ltr'] .test2 {\n  left: 10px;\n}\n\n[dir='rtl'] .test1,\n[dir='rtl'] .test2 {\n  right: 10px;\n}\n```\n\n##### 使用 Source.rtl 在覆盖模式\n\n```javascript\nimport { Mode, Source } from 'postcss-change-dir/options'\n\nconst options = {\n  mode: Mode.override,\n  source: Source.rtl\n}\n```\n\n##### 输出\n\n```css\n.test1,\n.test2 {\n  left: 10px;\n}\n\n[dir='ltr'] .test1,\n[dir='ltr'] .test2 {\n  left: auto;\n  right: 10px;\n}\n```\n\n---\n\n## processUrls\n\n这个选项管理是否应该翻转 URL 中的字符串，考虑到字符串映射：\n\n##### 输入\n\n```css\n.test1,\n.test2 {\n  background-image: url('./folder/subfolder/icons/ltr/chevron-left.png');\n  left: 10px;\n}\n```\n\n##### processUrls 为 false\n\n```javascript\nconst options = { processUrls: false } // 这是默认值\n```\n\n##### 输出\n\n```css\n.test1,\n.test2 {\n  background-image: url('./folder/subfolder/icons/ltr/chevron-left.png');\n}\n\n[dir='ltr'] .test1,\n[dir='ltr'] .test2 {\n  left: 10px;\n}\n\n[dir='rtl'] .test1,\n[dir='rtl'] .test2 {\n  right: 10px;\n}\n```\n\n##### processUrls 为 true\n\n```javascript\nconst options = { processUrls: true }\n```\n\n##### 输出\n\n```css\n[dir='ltr'] .test1,\n[dir='ltr'] .test2 {\n  background-image: url('./folder/subfolder/icons/ltr/chevron-left.png');\n  left: 10px;\n}\n\n[dir='rtl'] .test1,\n[dir='rtl'] .test2 {\n  background-image: url('./folder/subfolder/icons/rtl/chevron-right.png');\n  right: 10px;\n}\n```\n\n---\n\n## processRuleNames\n\n如果为 `true`，则在方向变化时，如果它们与 `stringMap` 中的任何条目匹配，则交换两个不包含方向属性的规则\n\n> [!重要]\n> 这个选项不会前缀已经被处理过的规则，因为它们具有方向属性。\n\n##### 输入\n\n```css\n.test1-ltr {\n  color: #fff;\n}\n\n.test2-left::before {\n  content: '\\f007';\n}\n\n.test2-right::before {\n  content: '\\f010';\n}\n```\n\n##### processRuleNames 为 true\n\n```javascript\nconst options = {\n  processRuleNames: true\n}\n```\n\n##### 输出\n\n```css\n/* 这个选择器将不会被处理，因为它没有对应的 */\n.test1-ltr {\n  color: #fff;\n}\n\n[dir='ltr'] .test2-left::before {\n  content: '\\f007';\n}\n\n[dir='rtl'] .test2-left::before {\n  content: '\\f010';\n}\n\n[dir='ltr'] .test2-right::before {\n  content: '\\f010';\n}\n\n[dir='rtl'] .test2-right::before {\n  content: '\\f007';\n}\n```\n\n---\n\n## processKeyFrames\n\n这个选项管理是否应该翻转 @keyframes 动画规则：\n\n##### 输入\n\n```css\n.test1 {\n  animation: 5s flip 1s ease-in-out;\n  color: #fff;\n}\n\n@keyframes flip {\n  from {\n    transform: translateX(100px);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\n```\n\n##### processKeyFrames 为 false\n\n```javascript\nconst options = { processKeyFrames: false } // 这是默认值\n```\n\n##### 输出\n\n```css\n.test1 {\n  animation: 5s flip 1s ease-in-out;\n  color: #fff;\n}\n\n@keyframes flip {\n  from {\n    transform: translateX(100px);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\n```\n\n##### processKeyFrames 为 true\n\n```javascript\nconst options = { processKeyFrames: true }\n```\n\n##### 输出\n\n```css\n.test1 {\n  color: #fff;\n}\n\n[dir='ltr'] .test1 {\n  animation: 5s flip-ltr 1s ease-in-out;\n}\n\n[dir='rtl'] .test1 {\n  animation: 5s flip-rtl 1s ease-in-out;\n}\n\n@keyframes flip-ltr {\n  from {\n    transform: translateX(100px);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\n\n@keyframes flip-rtl {\n  from {\n    transform: translateX(-100px);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\n```\n\n---\n\n## processEnv\n\n这个选项管理是否应该翻转代理定义的环境变量：\n\n##### 输入\n\n```css\nbody {\n  padding: env(safe-area-inset-top, 10px) env(safe-area-inset-right, 20px) env(safe-area-inset-bottom, 30px) env(\n      safe-area-inset-left,\n      40px\n    );\n}\n\n.test1 {\n  margin-right: env(safe-area-inset-right, 10px);\n  margin-left: env(safe-area-inset-left, 20px);\n}\n```\n\n##### processEnv 为 true\n\n```javascript\nconst options = { processEnv: true } // 这是默认值\n```\n\n##### 输出\n\n```css\n[dir='ltr'] body {\n  padding: env(safe-area-inset-top, 10px) env(safe-area-inset-right, 20px) env(safe-area-inset-bottom, 30px) env(\n      safe-area-inset-left,\n      40px\n    );\n}\n\n[dir='rtl'] body {\n  padding: env(safe-area-inset-top, 10px) env(safe-area-inset-right, 40px) env(safe-area-inset-bottom, 30px) env(\n      safe-area-inset-left,\n      20px\n    );\n}\n\n[dir='ltr'] .test1 {\n  margin-right: env(safe-area-inset-right, 10px);\n  margin-left: env(safe-area-inset-left, 20px);\n}\n\n[dir='rtl'] .test1 {\n  margin-left: env(safe-area-inset-left, 10px);\n  margin-right: env(safe-area-inset-right, 20px);\n}\n```\n\n##### processEnv 为 false\n\n```javascript\nconst options = { processEnv: false }\n```\n\n##### 输出\n\n```css\n[dir='ltr'] body {\n  padding: env(safe-area-inset-top, 10px) env(safe-area-inset-right, 20px) env(safe-area-inset-bottom, 30px) env(\n      safe-area-inset-left,\n      40px\n    );\n}\n\n[dir='rtl'] body {\n  padding: env(safe-area-inset-top, 10px) env(safe-area-inset-left, 40px) env(safe-area-inset-bottom, 30px) env(\n      safe-area-inset-right,\n      20px\n    );\n}\n\n[dir='ltr'] .test1 {\n  margin-right: env(safe-area-inset-right, 10px);\n  margin-left: env(safe-area-inset-left, 20px);\n}\n\n[dir='rtl'] .test1 {\n  margin-left: env(safe-area-inset-right, 10px);\n  margin-right: env(safe-area-inset-left, 20px);\n}\n```\n\n---\n\n## useCalc\n\n当这个选项启用时，如果它们使用 [calc](https://developer.mozilla.org/en-US/docs/Web/CSS/calc) 表示长度单位，则翻转 `background-position-x` 和 `transform-origin` 属性：\n\n##### 输入\n\n```css\n.test {\n  background-image: url('./folder/subfolder/icons/ltr/chevron-left.png');\n  background-position-x: 5px;\n  left: 10px;\n  transform-origin: 10px 20px;\n  transform: scale(0.5, 0.5);\n}\n```\n\n##### useCalc 为 false\n\n```javascript\nconst options = { useCalc: false } // 这是默认值\n```\n\n##### 输出\n\n```css\n.test {\n  background-image: url('./folder/subfolder/icons/ltr/chevron-left.png');\n  background-position-x: 5px;\n  transform-origin: 10px 20px;\n  transform: scale(0.5, 0.5);\n}\n\n[dir='ltr'] .test {\n  left: 10px;\n}\n\n[dir='rtl'] .test {\n  right: 10px;\n}\n```\n\n##### useCalc 为 true\n\n```javascript\nconst options = { useCalc: true }\n```\n\n##### 输出\n\n```css\n.test {\n  background-image: url('./folder/subfolder/icons/ltr/chevron-left.png');\n  transform: scale(0.5, 0.5);\n}\n\n[dir='ltr'] .test {\n  background-position-x: 5px;\n  left: 10px;\n  transform-origin: 10px 20px;\n}\n\n[dir='rtl'] .test {\n  background-position-x: calc(100% - 5px);\n  right: 10px;\n  transform-origin: calc(100% - 10px) 20px;\n}\n```\n\n---\n\n## stringMap\n\n一个字符串映射数组，用于替换声明的 URL 和匹配规则选择器名称，如果 `processRuleNames` 选项为 `true`。名称参数是可选的，但如果您想覆盖任何默认字符串映射，只需使用相同的名称添加您自己的。\n\n```javascript\n// 这是默认的字符串映射对象\nconst options = {\n  stringMap: [\n    {\n      name: 'left-right',\n      search: ['left', 'Left', 'LEFT'],\n      replace: ['right', 'Right', 'RIGHT']\n    },\n    {\n      name: 'ltr-rtl',\n      search: ['ltr', 'Ltr', 'LTR'],\n      replace: ['rtl', 'Rtl', 'RTL']\n    }\n  ]\n}\n```\n\n---\n\n## greedy\n\n当 `greedy` 为 `true` 时，`stringMap` 的匹配不考虑单词边界。\n\n##### 输入\n\n```css\n.test1 {\n  background: url('icon-left.png');\n}\n\n.test2 {\n  background: url('icon-ultra.png');\n}\n```\n\n##### greedy 为 false\n\n```javascript\nconst options = {\n  processUrls: true,\n  greedy: false // 这是默认值\n}\n```\n\n##### 输出\n\n```css\n[dir='ltr'] .test1 {\n  background: url('icon-left.png');\n}\n\n[dir='rtl'] .test1 {\n  background: url('icon-right.png');\n}\n\n.test2 {\n  background: url('icon-ultra.png');\n}\n```\n\n##### greedy 为 true\n\n```javascript\nconst options = {\n  processUrls: true,\n  greedy: true\n}\n```\n\n##### 输出\n\n```css\n[dir='ltr'] .test1 {\n  background: url('icon-left.png');\n}\n\n[dir='rtl'] .test1 {\n  background: url('icon-right.png');\n}\n\n[dir='ltr'] .test2 {\n  background: url('icon-ultra.png');\n}\n\n[dir='rtl'] .test2 {\n  background: url('icon-urtla.png');\n}\n```\n\n---\n\n## aliases\n\n这个属性由字符串映射组成，将一些声明视为其他声明，这对于翻转 [CSS 变量](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties) 的值非常有用。\n\n##### 输入\n\n```css\n:root {\n  --my-padding: 1rem 1rem 1.5rem 1.5rem;\n}\n\n.test {\n  padding: var(--my-padding);\n}\n```\n\n##### 没有别名字符串映射（默认）\n\n##### 输出\n\n```css\n:root {\n  --my-padding: 1rem 1rem 1.5rem 1.5rem;\n}\n\n.test {\n  padding: var(--my-padding);\n}\n```\n\n##### 设置别名字符串映射\n\n```javascript\nconst options = {\n  aliases: {\n    '--my-padding': 'padding'\n  }\n}\n```\n\n##### 输出\n\n```css\n[dir='ltr']:root {\n  --my-padding: 1rem 1rem 1.5rem 1.5rem;\n}\n\n[dir='rtl']:root {\n  --my-padding: 1rem 1.5rem 1.5rem 1rem;\n}\n\n.test {\n  padding: var(--my-padding);\n}\n```\n\n---\n\n## processDeclarationPlugins\n\nprocessDeclarationPlugins 选项的目的是处理声明，以扩展或覆盖 RTLCSS 功能。例如，我们可以避免自动翻转 `background-position`。\n\n##### 输入\n\n```css\n.test {\n  background-position: 0 100%;\n}\n```\n\n##### 将 `0` 转换为 `100%`（默认）\n\n##### 输出\n\n```css\n.test {\n  background-position: 100% 100%;\n}\n```\n\n##### 设置插件以避免翻转\n\n```javascript\nconst options = {\n  processDeclarationPlugins: [\n    {\n      name: 'avoid-flipping-background',\n      priority: 99, // 高于核心 RTLCSS 插件的优先值 100\n      processors: [\n        {\n          expr: /(background|object)(-position(-x)?|-image)?$/i,\n          action: (prop, value) => ({ prop, value })\n        }\n      ]\n    }\n  ]\n}\n```\n\n##### 输出\n\n```css\n.test {\n  background-position: 0 100%;\n}\n```\n\n---\n\n## 控制指令\n\n控制指令放置在规则或声明之间。它们可以针对单个节点或一组节点。\n\n> [!重要]\n> 块指令（以 `begin` 开始和以 `end` 结束的那些）应该放置在规则外部以应用到多个规则，或放置在规则内部以应用到多个声明。您不应将指令的开始放置在规则外部，将结束放置在内部（或反之），否则将得到不期望的结果。\n\n| 指令                                                                      | 描述                                                                                                          |\n| ------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| [/\\*rtl:ignore\\*/](#rtlignore)                                            | 忽略处理以下规则或声明                                                                                        |\n| [/\\*rtl:begin:ignore\\*/](#rtlbeginignore-and-rtlendignore)                | 开始忽略块                                                                                                    |\n| [/\\*rtl:end:ignore\\*/](#rtlbeginignore-and-rtlendignore)                  | 结束忽略块                                                                                                    |\n| [/\\*rtl:freeze\\*/](#rtlfreeze)                                            | 在当前方向冻结规则或声明                                                                                      |\n| [/\\*rtl:begin:freeze\\*/](#rtlbeginfreeze-and-rtlendfreeze)                | 开始冻结块                                                                                                    |\n| [/\\*rtl:end:freeze\\*/](#rtlbeginfreeze-and-rtlendfreeze)                  | 结束冻结块                                                                                                    |\n| [/\\*rtl:urls\\*/](#rtlurls)                                                | 此指令在下一个声明或下一个规则的声明中将 `processUrls` 选项设置为 `true`，不管全局 `processUrls` 选项的值如何 |\n| [/\\*rtl:begin:urls\\*/](#rtlbeginrules-and-rtlendrules)                    | 开始 `processUrls` 块                                                                                         |\n| [/\\*rtl:end:urls\\*/](#rtlbeginrules-and-rtlendrules)                      | 结束 `processUrls` 块                                                                                         |\n| [/\\*rtl:rules\\*/](#rtlrules)                                              | 此指令在下一个规则中将 `processRuleNames` 选项设置为 `true`，不管全局 `processRuleNames` 选项的值如何         |\n| [/\\*rtl:begin:rules\\*/](#rtlbeginrules-and-rtlendrules)                   | 开始 `processRuleNames` 块                                                                                    |\n| [/\\*rtl:end:rules\\*/](#rtlbeginrules-and-rtlendrules)                     | 结束 `processRuleNames` 块                                                                                    |\n| [/\\*rtl:source:{source}\\*/](#rtlsourcesource)                             | 设置规则或声明的源，不管 `source` 属性的值如何                                                                |\n| [/\\*rtl:begin:source:{source}\\*/](#rtlbeginsourcesource-and-rtlendsource) | 开始源块                                                                                                      |\n| [/\\*rtl:end:source\\*/](#rtlbeginsourcesource-and-rtlendsource)            | 结束源块                                                                                                      |\n| [/\\*rtl:raw:{CSS}\\*/](#rtlrawcss)                                         | 解析 `CSS` 参数并插入到其位置。根据 `source` 参数，解析的 `CSS` 将被视为 `rtl` 或 `ltr`                       |\n\n---\n\n## /\\*rtl:ignore\\*/\n\n这个指令忽略了对以下规则或声明的处理。在下一个块中，整个声明将被忽略。\n\n##### 输入\n\n```css\n/*rtl:ignore*/\n.test1,\n.test2 {\n  text-align: left;\n  left: 10px;\n}\n```\n\n##### 输出\n\n```css\n.test1,\n.test2 {\n  text-align: left;\n  left: 10px;\n}\n```\n\n在下一个块中，只有 `left` 属性将被忽略：\n\n##### 输入\n\n```css\n.test3,\n.test4 {\n  text-align: left;\n  /*rtl:ignore*/\n  left: 10px;\n}\n```\n\n##### 输出\n\n```css\n.test3,\n.test4 {\n  left: 10px;\n}\n\n[dir='ltr'] .test3,\n[dir='ltr'] .test4 {\n  text-align: left;\n}\n\n[dir='rtl'] .test3,\n[dir='rtl'] .test4 {\n  text-align: right;\n}\n```\n\n---\n\n## /\\*rtl:begin:ignore\\*/ 和 /\\*rtl:end:ignore\\*/\n\n这两个指令应该一起使用，它们将提供忽略规则或声明的开始和结束。\n\n> [!注意]\n> 插入在这些块之间的指令将被忽略，并保留在最终输出中。\n\n忽略多个规则：\n\n##### 输入\n\n```css\n/*rtl:begin:ignore*/\n.test1,\n.test2 {\n  left: 10px;\n  text-align: left;\n}\n\n.test3 {\n  padding: 1px 2px 3px 4px;\n}\n/*rtl:end:ignore*/\n```\n\n##### 输出\n\n```css\n.test1,\n.test2 {\n  left: 10px;\n  text-align: left;\n}\n\n.test3 {\n  padding: 1px 2px 3px 4px;\n}\n```\n\n忽略多个声明：\n\n##### 输入\n\n```css\n.test1,\n.test2 {\n  left: 10px;\n  /*rtl:begin:ignore*/\n  margin-left: 4em;\n  padding: 1px 2px 3px 4px;\n  /*rtl:end:ignore*/\n  text-align: left;\n}\n```\n\n##### 输出\n\n```css\n.test1,\n.test2 {\n  margin-left: 4em;\n  padding: 1px 2px 3px 4px;\n}\n\n[dir='ltr'] .test1,\n[dir='ltr'] .test2 {\n  left: 10px;\n  text-align: left;\n}\n\n[dir='rtl'] .test1,\n[dir='rtl'] .test2 {\n  right: 10px;\n  text-align: right;\n}\n```\n\n---\n\n## /\\*rtl:freeze\\*/\n\n> [!重要]\n> 此指令仅在 `combined` 模式下工作。如果您在 `override` 或 `diff` 模式下使用它，它将被忽略。\n\n这个指令在当前方向冻结规则或声明，但对 counterpart direction 如果有可翻转声明则不采取任何操作。当用于规则时，即使它不包含可翻转声明，也会在当前方向冻结它。当它用于声明时，即使它不可翻转，也会在当前方向冻结该声明。\n\n##### 输入\n\n```css\n/*rtl:freeze*/\n.test1,\n.test2 {\n  color: red;\n  text-align: left;\n  left: 10px;\n}\n\n.test3 {\n  /*rtl:freeze*/\n  text-align: center;\n  /*rtl:freeze*/\n  padding: 10px 20px 30px 40px;\n  margin: 1px 2px 3px 4px;\n}\n```\n\n##### 输出\n\n```css\n[dir='ltr'] .test1,\n[dir='ltr'] .test2 {\n  color: red;\n  text-align: left;\n  left: 10px;\n}\n\n[dir='ltr'] .test3 {\n  text-align: center;\n  padding: 10px 40px 30px 20px;\n  margin: 1px 4px 3px 2px;\n}\n\n[dir='rtl'] .test3 {\n  margin: 1px 4px 3px 2px;\n}\n```\n\n---\n\n## /\\*rtl:begin:freeze\\*/ 和 /\\*rtl:end:freeze\\*/\n\n> [!重要]\n> 此指令仅在 `combined` 模式下工作。如果您在 `override` 或 `diff` 模式下使用它，它将被忽略。\n\n这两个指令应该一起使用，它们将提供冻结规则或声明的开始和结束。这些块之间的规则或声明，将即使没有涉及可翻转声明，也会在当前方向冻结。\n\n冻结多个规则：\n\n##### 输入\n\n```css\n/*rtl:begin:freeze*/\n.test1,\n.test2 {\n  color: #fff;\n  left: 10px;\n  text-align: left;\n}\n\n.test3 {\n  padding: 1px 2px 3px 4px;\n}\n/*rtl:end:freeze*/\n```\n\n##### 输出\n\n```css\n[dir='ltr'] .test1,\n[dir='ltr'] .test2 {\n  color: #fff;\n  left: 10px;\n  text-align: left;\n}\n\n[dir='ltr'] .test3 {\n  padding: 1px 2px 3px 4px;\n}\n```\n\n冻结多个声明：\n\n##### 输入\n\n```css\n.test1,\n.test2 {\n  color: red;\n  left: 10px;\n  /*rtl:begin:freeze*/\n  margin-left: 4em;\n  padding: 1px 2px 3px 4px;\n  /*rtl:end:freeze*/\n  text-align: left;\n}\n```\n\n##### 输出\n\n```css\n.test1,\n.test2 {\n  color: red;\n}\n\n[dir='ltr'] .test1,\n[dir='ltr'] .test2 {\n  left: 10px;\n  margin-left: 4em;\n  padding: 1px 2px 3px 4px;\n  text-align: left;\n}\n\n[dir='rtl'] .test1,\n[dir='rtl'] .test2 {\n  right: 10px;\n  text-align: right;\n}\n```\n\n---\n\n## /\\*rtl:urls\\*/\n\n这个指令在下一个声明或下一个规则的声明中将 `processUrls` 选项设置为 `true`，不管全局 `processUrls` 选项的值如何：\n\n##### 输入\n\n```css\n/*rtl:urls*/\n.test1 {\n  background-image: url('/buttons/button-ltr.png');\n}\n\n.test2 {\n  /*rtl:urls*/\n  background-image: url('/icons/icon-left.png');\n}\n```\n\n##### 输出\n\n```css\n[dir='ltr'] .test1 {\n  background-image: url('/buttons/button-ltr.png');\n}\n\n[dir='rtl'] .test1 {\n  background-image: url('/buttons/button-rtl.png');\n}\n\n[dir='ltr'] .test2 {\n  background-image: url('/icons/icon-left.png');\n}\n\n[dir='rtl'] .test2 {\n  background-image: url('/icons/icon-right.png');\n}\n```\n\n---\n\n## /\\*rtl:begin:urls\\*/ 和 /\\*rtl:end:urls\\*/\n\n这两个指令应该一起使用，它们将提供 `processUrls` 块的开始和结束。\n\n##### 输入\n\n```css\n/*rtl:begin:urls*/\n.test1 {\n  background-image: url('/buttons/button-ltr.png');\n}\n\n.test2 {\n  background-image: url('/icons/icon-left.png');\n}\n/*rtl:end:urls*/\n\n.test3 {\n  /*rtl:begin:urls*/\n  background-image: url('/images/background-left.png');\n  cursor: url('/images/cursor-ltr.png');\n  /*rtl:end:urls*/\n}\n```\n\n##### 输出\n\n```css\n[dir='ltr'] .test1 {\n  background-image: url('/buttons/button-ltr.png');\n}\n\n[dir='rtl'] .test1 {\n  background-image: url('/buttons/button-rtl.png');\n}\n\n[dir='ltr'] .test2 {\n  background-image: url('/icons/icon-left.png');\n}\n\n[dir='rtl'] .test2 {\n  background-image: url('/icons/icon-right.png');\n}\n\n[dir='ltr'] .test3 {\n  background-image: url('/images/background-left.png');\n  cursor: url('/images/cursor-ltr.png');\n}\n\n[dir='rtl'] .test3 {\n  background-image: url('/images/background-right.png');\n  cursor: url('/images/cursor-rtl.png');\n}\n```\n\n---\n\n## /\\*rtl:rules\\*/\n\n这个指令在下一个规则中将 `processRuleNames` 选项设置为 `true`，不管全局 `processRuleNames` 选项的值如何：\n\n##### 输入\n\n```css\n/*rtl:rules*/\n.test1-ltr {\n  background-image: url('/images/test1-l.png');\n}\n\n/*rtl:rules*/\n.test1-rtl {\n  background-image: url('/images/test1-r.png');\n}\n\n/*rtl:rules*/\n.test2-left::before {\n  content: '\\f007';\n}\n\n.test2-right::before {\n  content: '\\f010';\n}\n```\n\n##### 输出\n\n```css\n[dir='ltr'] .test1-ltr {\n  background-image: url('/images/test1-l.png');\n}\n\n[dir='rtl'] .test1-ltr {\n  background-image: url('/images/test1-r.png');\n}\n\n[dir='ltr'] .test1-rtl {\n  background-image: url('/images/test1-r.png');\n}\n\n[dir='rtl'] .test1-rtl {\n  background-image: url('/images/test1-l.png');\n}\n\n/* 这些选择器将不会被处理，因为只有其中一个有 rtl:rules 指令 */\n.test2-left::before {\n  content: '\\f007';\n}\n\n.test2-right::before {\n  content: '\\f010';\n}\n```\n\n---\n\n## /\\*rtl:begin:rules\\*/ 和 /\\*rtl:end:rules\\*/\n\n这两个指令应该一起使用，它们将提供 `processRuleNames` 块的开始和结束。\n\n##### 输入\n\n```css\n.test1-ltr {\n  background-image: url('/images/test1-l.png');\n}\n\n.test1-rtl {\n  background-image: url('/images/test1-r.png');\n}\n\n/*rtl:begin:rules*/\n.test2-left::before {\n  content: '\\f007';\n}\n\n.test2-right::before {\n  content: '\\f010';\n}\n/*rtl:end:rules*/\n```\n\n##### 输出\n\n```css\n.test1-ltr {\n  background-image: url('/images/test1-l.png');\n}\n\n.test1-rtl {\n  background-image: url('/images/test1-r.png');\n}\n\n[dir='ltr'] .test2-left::before {\n  content: '\\f007';\n}\n\n[dir='rtl'] .test2-left::before {\n  content: '\\f010';\n}\n\n[dir='ltr'] .test2-right::before {\n  content: '\\f010';\n}\n\n[dir='rtl'] .test2-right::before {\n  content: '\\f007';\n}\n```\n\n---\n\n## /\\*rtl:source:{source}\\*/\n\n这个指令设置规则或指令的源，忽略 `source` 属性的值：\n\n##### 输入\n\n```css\n/*rtl:source:rtl*/\n.test {\n  color: #fff;\n  border-left: 1px solid #666;\n  padding: 10px 5px 10px 20px;\n  text-align: left;\n  width: 100%;\n}\n```\n\n##### 输出\n\n```css\n.test {\n  color: #fff;\n  width: 100%;\n}\n\n[dir='ltr'] .test {\n  border-right: 1px solid #666;\n  padding: 10px 20px 10px 5px;\n  text-align: right;\n}\n\n[dir='rtl'] .test {\n  border-left: 1px solid #666;\n  padding: 10px 5px 10px 20px;\n  text-align: left;\n}\n```\n\n---\n\n## /\\*rtl:begin:source:{source}\\*/ 和 /\\*rtl:end:source\\*/\n\n这两个指令应该一起使用，它们将提供规则或声明的源块的开始和结束：\n\n##### 输入\n\n```css\n.test {\n  color: #fff;\n  border-left: 1px solid #666;\n  /*rtl:begin:source:rtl*/\n  padding: 10px 5px 10px 20px;\n  text-align: left;\n  /*rtl:end:source*/\n  width: 100%;\n}\n```\n\n##### 输出\n\n```css\n.test {\n  color: #fff;\n  width: 100%;\n}\n\n[dir='ltr'] .test {\n  border-left: 1px solid #666;\n  padding: 10px 20px 10px 5px;\n  text-align: right;\n}\n\n[dir='rtl'] .test {\n  border-right: 1px solid #666;\n  padding: 10px 5px 10px 20px;\n  text-align: left;\n}\n```\n\n---\n\n## /\\*rtl:raw:{CSS}\\*/\n\n解析 `CSS` 参数并插入到其位置。根据 `source` 参数，解析的 CSS 将被视为 `rtl` 或 `ltr`：\n\n##### 输入\n\n```css\n.test1 {\n  color: #efefef;\n  left: 10px;\n  /*rtl:raw:\n    height: 50px;\n    width: 100px;*/\n}\n\n/*rtl:raw:.test2 {\n    color: #EFEFEF;\n    left: 10px;\n    width: 100%;\n}\n\n.test3 {\n    transform: translate(10px, 20px);\n}\n*/\n```\n\n##### 输出\n\n```css\n.test1 {\n  color: #efefef;\n}\n\n[dir='ltr'] .test1 {\n  left: 10px;\n}\n\n[dir='rtl'] .test1 {\n  right: 10px;\n  height: 50px;\n  width: 100px;\n}\n\n[dir='rtl'] .test2 {\n  color: #efefef;\n  left: 10px;\n  width: 100%;\n}\n\n[dir='rtl'] .test3 {\n  transform: translate(10px, 20px);\n}\n```\n\n---\n\n## 值指令\n\n值指令放置在声明值内的任何位置。它们针对包含的声明节点。\n\n| 指令                                          | 描述                            |\n| --------------------------------------------- | ------------------------------- |\n| [/\\*rtl:ignore\\*/](#rtlignore-1)              | 忽略处理当前声明                |\n| [/\\*rtl:append{value}\\*/](#rtlappendvalue)    | 将 `{value}` 追加到声明值的末尾 |\n| [/\\*rtl:insert:{value}\\*/](#rtlinsertvalue)   | 将 `{value}` 插入到指令所在位置 |\n| [/\\*rtl:prepend:{value}\\*/](#rtlprependvalue) | 将 `{value}` 预置到声明值的开头 |\n| [/\\*rtl:{value}\\*/](#rtlvalue)                | 用 `{value}` 替换声明值         |\n\n---\n\n## /\\*rtl:ignore\\*/\n\n这个指令忽略了对当前声明的处理：\n\n##### 输入\n\n```css\n.test1,\n.test2 {\n  text-align: left /*rtl:ignore*/;\n  left: 10px;\n}\n```\n\n##### 输出\n\n```css\n.test1,\n.test2 {\n  text-align: left;\n}\n\n[dir='ltr'] .test1,\n[dir='ltr'] .test2 {\n  left: 10px;\n}\n\n[dir='rtl'] .test1,\n[dir='rtl'] .test2 {\n  right: 10px;\n}\n```\n\n---\n\n## /\\*rtl:append{value}\\*/\n\n这个指令将 `{value}` 追加到声明值的末尾：\n\n##### 输入\n\n```css\n.test1,\n.test2 {\n  padding: 10px /*rtl:append20px*/;\n  left: 10px;\n}\n```\n\n##### 输出\n\n```css\n[dir='ltr'] .test1,\n[dir='ltr'] .test2 {\n  padding: 10px;\n  left: 10px;\n}\n\n[dir='rtl'] .test1,\n[dir='rtl'] .test2 {\n  padding: 10px 20px;\n  right: 10px;\n}\n```\n\n---\n\n## /\\*rtl:insert:{value}\\*/\n\n这个指令将 `{value}` 插入到指令所在位置的声明值内：\n\n##### 输入\n\n```css\n.test1,\n.test2 {\n  padding: 10px /*rtl:insert 20px*/ 5px;\n  left: 10px;\n}\n```\n\n##### 输出\n\n```css\n[dir='ltr'] .test1,\n[dir='ltr'] .test2 {\n  padding: 10px 5px;\n  left: 10px;\n}\n\n[dir='rtl'] .test1,\n[dir='rtl'] .test2 {\n  padding: 10px 20px 5px;\n  right: 10px;\n}\n```\n\n---\n\n## /\\*rtl:prepend:{value}\\*/\n\n这个指令将 `{value}` 预置到声明值的开头：\n\n##### 输入\n\n```css\n.test1,\n.test2 {\n  font-family:\n    Arial,\n    Helvetica /*rtl:prepend:\"Droid Arabic Kufi\", */;\n  left: 10px;\n}\n```\n\n##### 输出\n\n```css\n[dir='ltr'] .test1,\n[dir='ltr'] .test2 {\n  font-family: Arial, Helvetica;\n  left: 10px;\n}\n\n[dir='rtl'] .test1,\n[dir='rtl'] .test2 {\n  font-family: 'Droid Arabic Kufi', Arial, Helvetica;\n  right: 10px;\n}\n```\n\n---\n\n## /\\*rtl:{value}\\*/\n\n这个指令用 `{value}` 替换声明值：\n\n##### 输入\n\n```css\n.test1,\n.test2 {\n  font-family:\n    Arial,\n    Helvetica /*rtl:\"Droid Arabic Kufi\"*/;\n  left: 10px;\n}\n```\n\n##### 输出\n\n```css\n[dir='ltr'] .test1,\n[dir='ltr'] .test2 {\n  font-family: Arial, Helvetica;\n  left: 10px;\n}\n\n[dir='rtl'] .test1,\n[dir='rtl'] .test2 {\n  font-family: 'Droid Arabic Kufi';\n  right: 10px;\n}\n```\n\n---\n\n如果您不使用 PostCSS，请根据[官方文档](https://github.com/postcss/postcss#usage)添加它并在此设置中配置此插件。\n",
	"readmeFilename": "README.md",
	"_downloads": 12
}