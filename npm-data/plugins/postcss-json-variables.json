{
	"_id": "postcss-json-variables",
	"_rev": "1-3d43f89204c07cf81a40e2e5f6037675",
	"name": "postcss-json-variables",
	"dist-tags": {
		"latest": "1.0.1"
	},
	"versions": {
		"1.0.0": {
			"name": "postcss-json-variables",
			"version": "1.0.0",
			"keywords": [
				"postcss",
				"json",
				"css",
				"variables",
				"postcss-plugin"
			],
			"author": {
				"name": "James Hobden"
			},
			"license": "MIT",
			"_id": "postcss-json-variables@1.0.0",
			"maintainers": [
				{
					"name": "jhobden600",
					"email": "james@jhobden.com"
				}
			],
			"dist": {
				"shasum": "faeec07cd8623338a12668d3ac71ee567e641f3e",
				"tarball": "https://registry.npmjs.org/postcss-json-variables/-/postcss-json-variables-1.0.0.tgz",
				"fileCount": 3,
				"integrity": "sha512-TnjTjoYDigXmy4MZYx8R1FdA4JjD0uWtkuY7kXYP8x5PiWxECBGpAOImV8qX3mfyqfOP2rCeIIi5UpnV4N8UWQ==",
				"signatures": [
					{
						"sig": "MEUCIACB+rNiHhLO77dNd2w/dhk59Tlpaa+yW0y903jYXoVgAiEArojVcUwU26gc6cTDpmMaB9jinV5dfgoUdg57VlHLK88=",
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"
					}
				],
				"unpackedSize": 5046
			},
			"main": "index.js",
			"gitHead": "c0e9554faacb968b28043329ac711bf0787fdab9",
			"_npmUser": {
				"name": "jhobden600",
				"email": "james@jhobden.com"
			},
			"_npmVersion": "10.8.2",
			"description": "A PostCSS plugin that allows you to inject values from a JSON file into your CSS using a custom `json()` function. This plugin enables you to dynamically manage CSS variables by referencing JSON data, making it easier to maintain consistency across your s",
			"directories": {},
			"_nodeVersion": "20.17.0",
			"dependencies": {
				"postcss": "^8.4.47"
			},
			"_hasShrinkwrap": false,
			"_npmOperationalInternal": {
				"tmp": "tmp/postcss-json-variables_1.0.0_1728036795844_0.45135928910425727",
				"host": "s3://npm-registry-packages"
			}
		},
		"1.0.1": {
			"name": "postcss-json-variables",
			"version": "1.0.1",
			"main": "index.js",
			"keywords": [
				"postcss",
				"json",
				"css",
				"variables",
				"postcss-plugin"
			],
			"author": {
				"name": "James Hobden"
			},
			"license": "MIT",
			"description": "A PostCSS plugin that allows you to inject values from a JSON file into your CSS using a custom `json()` function. This plugin enables you to dynamically manage CSS variables by referencing JSON data, making it easier to maintain consistency across your s",
			"dependencies": {
				"postcss": "^8.4.47"
			},
			"_id": "postcss-json-variables@1.0.1",
			"gitHead": "4ef2d853e59c11fbbb268df7edddda1d6ed2b690",
			"_nodeVersion": "20.17.0",
			"_npmVersion": "10.8.2",
			"dist": {
				"integrity": "sha512-kVYKdb53dUPBcb1zvPSW/+frHcvJzxsbZoD/I34fFajwcvEyPq2piDNNJtWkdyDZ19c4QFSkQycS49ni9EBcyA==",
				"shasum": "8bbf1f3666501ad84e843b96d2493341c6ffdd66",
				"tarball": "https://registry.npmjs.org/postcss-json-variables/-/postcss-json-variables-1.0.1.tgz",
				"fileCount": 3,
				"unpackedSize": 5046,
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEUCIF42iaSx18p+FNibtwX7uM6at/CMW9mnF3wQ4pY8SvD4AiEAtdzJoNA6ooQXQOAcH/ZSpkNk6Z2b1Qp3YpRDqVrRV8Q="
					}
				]
			},
			"_npmUser": {
				"name": "jhobden600",
				"email": "james@jhobden.com"
			},
			"directories": {},
			"maintainers": [
				{
					"name": "jhobden600",
					"email": "james@jhobden.com"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-json-variables_1.0.1_1728037901946_0.5883748406292957"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2024-10-04T10:13:15.843Z",
		"modified": "2024-10-04T10:31:42.336Z",
		"1.0.0": "2024-10-04T10:13:16.013Z",
		"1.0.1": "2024-10-04T10:31:42.162Z"
	},
	"author": {
		"name": "James Hobden"
	},
	"license": "MIT",
	"keywords": [
		"postcss",
		"json",
		"css",
		"variables",
		"postcss-plugin"
	],
	"description": "A PostCSS plugin that allows you to inject values from a JSON file into your CSS using a custom `json()` function. This plugin enables you to dynamically manage CSS variables by referencing JSON data, making it easier to maintain consistency across your s",
	"maintainers": [
		{
			"name": "jhobden600",
			"email": "james@jhobden.com"
		}
	],
	"readme": "# postcss-json-variables\n\nA PostCSS plugin that allows you to inject values from a JSON file into your CSS using a custom `json()` function. This plugin enables you to dynamically manage CSS variables by referencing JSON data, making it easier to maintain consistency across your stylesheets.\n\n## Installation\n\nTo install the plugin, use npm:\n\n```bash\nnpm install postcss-json-variables --save-dev\n```\n\n## Usage\n\nYou can use this plugin in your PostCSS configuration file. Here's an example of how to set it up:\n\n### postcss.config.js\n\n```javascript\nmodule.exports = {\n    plugins: [\n        require('postcss-json-variables')({\n            path: 'variables.json'\n        }),\n        // other PostCSS plugins\n    ]\n};\n```\n\n### Example JSON File\n\nCreate a JSON file (e.g., `variables.json`) with your variables:\n\n```json\n{\n    \"body\": {\n        \"header\": {\n            \"font-family\": \"Arial, sans-serif\",\n            \"font-size\": \"16px\"\n        }\n    }\n}\n```\n\n### Example CSS\n\nYou can now use the `json()` function in your CSS:\n\n```css\nbody {\n    font-family: json(body[header][font-family]);\n    font-size: json(body[header][font-size]);\n}\n```\n\n## API\n\n### Plugin Options\n\n- `path` (String): The path to your JSON file. If not specified, it defaults to `./variables.json`.\n\n### Functions\n\n#### `getJsonValue(jsonObject, reference)`\n\nSafely evaluates a nested JSON reference (e.g., `'body[header][font-family]'`) to retrieve the corresponding value from the JSON object.\n\n- **Parameters:**\n  - `jsonObject` (Object): The parsed JSON object containing variables.\n  - `reference` (String): The direct string reference to the JSON value.\n  \n- **Returns:** The value from the JSON object, or `undefined` if the reference is invalid.\n\n## Error Handling\n\nIf the plugin fails to load or parse the specified JSON file, it will throw an error with a descriptive message. Additionally, if a referenced variable does not exist in the JSON file, the plugin will log a warning and remove the corresponding CSS declaration.\n\n## Contributing\n\nContributions are welcome! Please submit issues and pull requests for any enhancements or bug fixes.\n",
	"readmeFilename": "README.md",
	"_downloads": 130
}