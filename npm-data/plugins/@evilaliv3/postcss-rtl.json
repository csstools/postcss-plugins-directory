{
	"_id": "@evilaliv3/postcss-rtl",
	"_rev": "7-c1ecd30a9f65bb90350824108f740ac9",
	"time": {
		"1.7.4": "2020-05-17T19:27:56.396Z",
		"created": "2020-05-17T19:30:55.517Z",
		"1.7.5": "2020-05-17T19:30:55.681Z",
		"modified": "2022-04-05T09:05:54.591Z"
	},
	"name": "@evilaliv3/postcss-rtl",
	"dist-tags": {
		"latest": "1.7.5"
	},
	"versions": {
		"1.7.5": {
			"name": "@evilaliv3/postcss-rtl",
			"version": "1.7.5",
			"description": "PostCSS plugin for RTL-optimizations",
			"keywords": [
				"postcss",
				"css",
				"postcss-plugin",
				"postcss plugin",
				"rtl",
				"ltr",
				"right to left",
				"left to right"
			],
			"author": {
				"name": "Vladimir Kalinichev",
				"email": "wrumly@gmail.com"
			},
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/vkalinichev/postcss-rtl.git"
			},
			"bugs": {
				"url": "https://github.com/vkalinichev/postcss-rtl/issues"
			},
			"homepage": "https://github.com/vkalinichev/postcss-rtl",
			"main": "lib/index.js",
			"dependencies": {
				"rtlcss": "2.5.0"
			},
			"devDependencies": {
				"@babel/cli": "^7.8.4",
				"@babel/preset-env": "^7.8.4",
				"ava": "^2.4.0",
				"babel-eslint": "^10.0.3",
				"eslint": "^6.8.0",
				"eslint-config-airbnb-base": "^13.2.0",
				"eslint-plugin-import": "^2.20.1",
				"postcss": "^7.0.27",
				"postcss-import": "^12.0.1"
			},
			"scripts": {
				"build": "babel ./src --out-dir ./lib",
				"lint": "eslint ./src",
				"prepare": "npm run lint && npm run build && npm test",
				"start": "ava --watch ./src/test.js",
				"test": "ava ./src/test.js"
			},
			"engines": {
				"node": ">=0.12"
			},
			"directories": {
				"lib": "lib"
			},
			"gitHead": "b582f06413d988146c4c1e569b2758319b98975a",
			"_id": "@evilaliv3/postcss-rtl@1.7.5",
			"_nodeVersion": "10.20.1",
			"_npmVersion": "6.14.4",
			"dist": {
				"integrity": "sha512-yJtjkO5LMqdaO4QKoMLjPK1B0bwzpVoU8IkF0Vro1EoyD+luyuMCaMn5GzpFn3o1y3ZIfW1aq4IGH7WwCubuQw==",
				"shasum": "22e396992267b3bddb000530c290f7011ff0ba16",
				"tarball": "https://registry.npmjs.org/@evilaliv3/postcss-rtl/-/postcss-rtl-1.7.5.tgz",
				"fileCount": 23,
				"unpackedSize": 70784,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJewZDwCRA9TVsSAnZWagAAooMP/3z30jJX8WKYgMXl4/yP\nYpE7K3vGmRWPbF3x51PUbzWUj0Ld4Zc7oLKi8Mbpb5IROqfhgn+TSCgq1aUT\nRPFSaNaFfQBRTT46Py3hdN39Wk/upHqxKSFgZlViwBMo0nDLcob/+arI+k6J\n5+fdKsCIXdQNRJhqa7jbkCo9MHGdh8MYEWCFMzzr9AAnl7XPR2tVua6WEEfm\n5T5VxQu5/9xvi9JSd3PKZUXrgBMAhnhVzYf0nI3aGJykertGKXp2gqjog/Po\nFb588vp0AQmzBZZ2ozKd/jC9dfZaAXJhGSmWiIT20dLUoF9IyWZ31n2OyYTq\nxFcT/joqurWnVZX7u1t3hF9QB7sFf+oC+0V5JWa2DZ3s2sO2AkmDIyYMTAvl\nU04rjKCGulBT5M6kktIZetgfxcN/RmdFdMpOWYlpRxgxadIMo8gY6rX+cQn0\nWPKolrrxgKPfoq7b8DDMtoRlKDPjqKd/X1f2t3VN+8tdTDSPH7BN+mNgX+7q\n/JXlmhcaf8RNqdQIQmkVgMQvDKTo6oUU+Tnfgk1xJU9cRMf/nTR4OLvIJhnD\n+2T36V2Y9wOO0vRZoSRDiJhaazDEYBy64sl3k1oe02ukK9WK+JIuMmkSgZ+v\nhVFAt4uJCR6CNatz8k7L62j2z2sK42l06fwOa4QDnWZ6UupOeVWvjtjb8Um3\nuRnK\r\n=6ob2\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEQCIAjEM06a4UdQRbTWMYswEwO7es1/Gfk0dYymlz8m+QnDAiBL9Tiqs0V9fLSrrcKLu8sOrMV1NTHJqNBEnOlwVQL76w=="
					}
				]
			},
			"maintainers": [
				{
					"name": "evilaliv3",
					"email": "giovanni.pellerano@evilaliv3.org"
				}
			],
			"_npmUser": {
				"name": "evilaliv3",
				"email": "giovanni.pellerano@evilaliv3.org"
			},
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-rtl_1.7.5_1589743855551_0.2309351638938042"
			},
			"_hasShrinkwrap": false
		}
	},
	"maintainers": [
		{
			"name": "evilaliv3",
			"email": "giovanni.pellerano@evilaliv3.org"
		}
	],
	"description": "PostCSS plugin for RTL-optimizations",
	"homepage": "https://github.com/vkalinichev/postcss-rtl",
	"keywords": [
		"postcss",
		"css",
		"postcss-plugin",
		"postcss plugin",
		"rtl",
		"ltr",
		"right to left",
		"left to right"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/vkalinichev/postcss-rtl.git"
	},
	"author": {
		"name": "Vladimir Kalinichev",
		"email": "wrumly@gmail.com"
	},
	"bugs": {
		"url": "https://github.com/vkalinichev/postcss-rtl/issues"
	},
	"license": "MIT",
	"readme": "# PostCSS-RTL\n\n[![npm][npm-img]][npm]\n[![Build Status][ci-img]][ci]\n[![npm][npm-dwnlds-img]][npm]\n[![Package Quality][quality-img]][quality]\n[![license][lic-img]][lic]\n\n[ci-img]:  https://img.shields.io/travis/vkalinichev/postcss-rtl.svg\n[ci]:      https://travis-ci.org/vkalinichev/postcss-rtl\n\n[npm-img]: https://img.shields.io/npm/v/postcss-rtl.svg\n[npm]:     https://npmjs.org/package/postcss-rtl\n\n[quality-img]: http://npm.packagequality.com/shield/postcss-rtl.svg\n[quality]: http://packagequality.com/#?package=postcss-rtl\n\n[lic-img]: https://img.shields.io/github/license/vkalinichev/postcss-rtl.svg\n[lic]:     https://github.com/vkalinichev/postcss-rtl/blob/master/License\n\n[npm-dwnlds-img]: https://img.shields.io/npm/dt/postcss-rtl.svg\n\n[PostCSS]-plugin for RTL-adaptivity\n\nGenerates RTL rules with flipped properties.\nUse one file for both directions!\n\n* [Examples](#examples)\n    * [Simple properties](#simple-properties)\n    * [Animations](#animations)\n    * [Value directives](#value-directives)\n    * [Property directives](#property-directives)\n    * [Ignoring specific declarations](#ignoring-specific-declarations)\n* [Usage](#usage)\n    * [With Webpack](#with-webpack)\n    * [With Gulp](#with-gulp)\n    * [Options](#options)\n* [Thanks](#thanks)\n\n## Examples\n\n### Simple properties\n\nIn most cases all you need is flip property name or value\nfrom `left` to `right` or change values order in full-valued shorthand\nfrom `top-right-bottom-left` to `top-left-bottom-right`.\n\nLTR input:\n```css\n.foo {\n    float: right;\n    margin-left: 13px;\n    text-align: right;\n    font-size: 13px;\n    border-color: lightgray;\n    border-width: 2px 0 2px 2px;\n    border-style: solid dashed solid solid\n}\n\n.foo {\n    text-align: center;\n}\n```\n\nLTR+RTL output:\n```css\n.foo {\n    font-size: 13px\n}\n\n[dir] .foo {\n    border-color: lightgray\n}\n\n[dir=\"ltr\"] .foo {\n    float: right;\n    margin-left: 13px;\n    text-align: right;\n    border-width: 2px 0 2px 2px;\n    border-style: solid dashed solid solid\n}\n\n[dir=\"rtl\"] .foo {\n    float: left;\n    margin-right: 13px;\n    text-align: left;\n    border-width: 2px 2px 2px 0;\n    border-style: solid solid solid dashed\n}\n\n[dir] .foo {\n    text-align: center\n}\n```\n\n### Animations\nFlippable keyframes-animations will be splitted to two\ndirection-based rules with `-ltr` or `-rtl` suffixes\n\nLTR input:\n```css\n.foo {\n    animation: 1s slide 0s ease-in-out\n}\n\n@keyframes slide {\n    from {\n        transform: translate( -1000px )\n    }\n    to {\n        transform: translate( 0 )\n    }\n}\n```\n\nLTR+RTL output:\n```css\n[dir=\"ltr\"] .foo {\n    animation: 1s slide-ltr 0s ease-in-out\n}\n\n[dir=\"rtl\"] .foo {\n    animation: 1s slide-rtl 0s ease-in-out\n}\n\n@keyframes slide-ltr {\n    from {\n        transform: translate( -1000px )\n    }\n    to {\n        transform: translate( 0 )\n    }\n}\n\n@keyframes slide-rtl {\n    from {\n        transform: translate( 1000px )\n    }\n    to {\n        transform: translate( 0 )\n    }\n}\n```\n\n### Value directives\n\nTo transform declaration values use value directives:\n\n* `/* rtl:prepend:{value} */` - to prepend the {value} before the current value\n* `/* rtl:append:{value} */` - to append the {value} after the current value\n* `/* rtl:{value} */` - to replace the current value with the supplied value\n\n**Source**\n\n```css\n.foo {\n    font-weight: bold;\n    font-family: \"Droid Sans\", \"Helvetica Neue\", Arial, sans-serif/*rtl:prepend:\"Droid Arabic Kufi\",*/;\n    transform: rotate(45deg)/* rtl:append: scaleX(-1) */;\n    flex-direction: row/* rtl: row-reverse */;\n}\n```\n\n**Result**\n\n```css\n.foo {\n    font-weight: bold;\n}\n\n[dir=ltr] .foo {\n    font-family: \"Droid Sans\", \"Helvetica Neue\", Arial, sans-serif/*rtl:prepend:\"Droid Arabic Kufi\",*/;\n    transform: rotate(45deg)/* rtl:append: scaleX(-1) */;\n    flex-direction: row/* rtl: row-reverse */;\n}\n\n[dir=rtl] .foo {\n    font-family: \"Droid Arabic Kufi\", \"Droid Sans\", \"Helvetica Neue\", Arial, sans-serif;\n    transform: rotate(45deg) scaleX(-1);\n    flex-direction: row-reverse;\n}\n```\n\n### Property directives\n\nTo transform declaration property name use property directives:\n\n* `/* rtl:as:{prop} */` - to process the property as {prop}. Usable for custom properties\n\n**Source**\n\n```css\n:root {\n    --padding /* rtl:as:padding */: 1rem 2rem 3rem 4rem;\n}\n```\n\n**Result**\n\n```css\n[dir=ltr]:root {\n    --padding /* rtl:as:padding */: 1rem 2rem 3rem 4rem;\n}\n\n[dir=rtl]:root {\n    --padding /* rtl:as:padding */: 1rem 4rem 3rem 2rem;\n}\n```\n\n### Ignoring specific declarations\nTo skip flipping specific declarations use some of supported directives:\n\n* `/* rtl:ignore */` - to ignore the following rule *or* the containing declaration\n* `/* rtl:begin:ignore */` and `/* rtl:end:ignore */` - to ignore rules within scope\n\nIgnore one rule:\n```css\n/* rtl:ignore */\n.foo {\n    padding-left: 0\n}\n```\n\nBlock-syntax to ignore rules within scope:\n```css\n/* rtl:begin:ignore */\n.foo {\n    padding-left: 0\n}\n.bar {\n    direction: ltr\n}\n/* rtl:end:ignore */\n```\n\nValue-syntax to ignore a single CSS declaration:\n```css\n.foo {\n    margin-left: 20px;\n    padding-right: 20px /* rtl:ignore */;\n}\n```\n\n`/*!` notation will work too:\n```css\n/*! rtl:ignore */\n.foo {\n    padding-left: 0\n}\n```\n\n## Usage\n1. Plug it to PostCSS\n\n    ```js\n    const postcss = require('postcss')\n    const rtl = require('postcss-rtl')\n\n    postcss([ rtl( options ) ])\n    ```\n\n    See [PostCSS] docs for examples for your environment.\n\n2. Manage direction by switching between `dir=\"ltr\"` and `dir=\"rtl\"` on `<html>` element.\n\n### With Webpack:\n```js\nmodule.exports = {\n  module: {\n    rules: [ {\n      test: /\\.css$/,\n      use: [\n        { loader: 'style-loader' },\n        { loader: 'css-loader' },\n        { loader: 'postcss-loader',\n          options: {\n            plugins: function () {\n              return [ require( 'postcss-rtl' )( options ) ]\n            }\n          }\n        }\n      ]\n    } ]\n  }\n}\n```\n\n### With Gulp:\n```js\ngulp.src( 'style.css' )\n    .pipe( postcss( [ rtl( options ) ]) )\n    .pipe( gulp.dest( './dest' ) )\n```\n\n### Options\n* `addPrefixToSelector`: Custom function for adding prefix to selector. Optional.\n    Example:\n    ```js\n    function addPrefixToSelector ( selector, prefix ) {\n        return `${prefix} > ${selector}` // Make selectors like [dir=rtl] > .selector\n    }\n    ```\n  **note:** the returned string _must_ include `prefix` to avoid an infinite recursion\n\n* `onlyDirection`: generate only one-direction version: `ltr` or `rtl`\n\n* `prefixType`: Switches between adding attributes and classes. Optional:\n    * `attribute` (by default, recommended): `.foo` => `[dir=rtl] .foo`\n    * `class` (useful for IE6): `.foo` => `.dir-rtl .foo`\n\n* `prefix`: Uses a custom string, instead of 'dir', for the added attribute and class selectors\n    * e.g. `'data-my-custom-dir'` (for attribute prefixType): `.foo` => `[data-my-custom-dir=rtl] .foo`\n    * e.g. `'my-custom-dir'` (for class prefixType): `.foo` => `.my-custom-dir-rtl .foo`\n\n* `removeComments` (default: `true`): remove `rtl:*` comments after process them\n\n* `fromRTL` (default: `false`): assume all styles are written in RTL direction and generate corresponding LTR styles for them\n\n* `blacklist`: the array of css properties which processing will be ignored\n    Example:\n    ```js\n    ['padding-left', 'padding-right']\n    ```\n* `whitelist`: the array of css properties which (and only them) will be processed\n    Example:\n    ```js\n    ['margin', 'border-color']\n    ```\n## Thanks\nGreat thanks to projects:\n* [PostCSS][PostCSS]\n* [RTLCSS][RTLCSS]\n\n[PostCSS]: https://github.com/postcss/postcss\n[RTLCSS]: https://github.com/MohammadYounes/rtlcss\n[rtlcss-directives]: http://rtlcss.com/learn/getting-started/why-rtlcss/#processing-directives\n",
	"readmeFilename": "README.md",
	"_downloads": 3
}