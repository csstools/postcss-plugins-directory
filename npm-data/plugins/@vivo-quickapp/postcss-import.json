{
	"_id": "@vivo-quickapp/postcss-import",
	"_rev": "1-db4e7aa6a06331fc35d7b3483b5ac2aa",
	"name": "@vivo-quickapp/postcss-import",
	"dist-tags": {
		"latest": "12.1.0"
	},
	"versions": {
		"12.1.0": {
			"name": "@vivo-quickapp/postcss-import",
			"version": "12.1.0",
			"description": "PostCSS plugin to import CSS files",
			"publishConfig": {
				"access": "public"
			},
			"keywords": [
				"css",
				"postcss",
				"postcss-plugin",
				"import",
				"node modules",
				"npm"
			],
			"author": {
				"name": "Maxime Thirouin"
			},
			"license": "MIT",
			"repository": {
				"type": "git",
				"url": "git+https://github.com/postcss/postcss-import.git"
			},
			"engines": {
				"node": ">=6.0.0"
			},
			"dependencies": {
				"postcss": "^7.0.1",
				"postcss-value-parser": "^3.2.3",
				"read-cache": "^1.0.0",
				"resolve": "^1.1.7"
			},
			"devDependencies": {
				"ava": "^1.0.1",
				"eslint": "^5.0.0",
				"eslint-config-i-am-meticulous": "^11.0.0",
				"eslint-plugin-import": "^2.17.1",
				"eslint-plugin-prettier": "^3.0.0",
				"postcss-scss": "^2.0.0",
				"prettier": "~1.17.0",
				"sugarss": "^2.0.0"
			},
			"scripts": {
				"ci": "eslint . && ava",
				"lint": "eslint . --fix",
				"pretest": "npm run lint",
				"test": "ava"
			},
			"eslintConfig": {
				"extends": "eslint-config-i-am-meticulous",
				"plugins": [
					"prettier"
				],
				"rules": {
					"prettier/prettier": [
						"error",
						{
							"semi": false,
							"trailingComma": "es5"
						}
					]
				}
			},
			"gitHead": "62c7730cbb57902b50fbe5d3e41fbe9ad6e43463",
			"bugs": {
				"url": "https://github.com/postcss/postcss-import/issues"
			},
			"homepage": "https://github.com/postcss/postcss-import#readme",
			"_id": "@vivo-quickapp/postcss-import@12.1.0",
			"_nodeVersion": "11.10.0",
			"_npmVersion": "6.7.0",
			"dist": {
				"integrity": "sha512-OqQLM41CzBDVIMnInGnO3rbyp5VrhpP6eweIGteMsepsWfbISAaCwke/txCbCNJBdHU9kDrqbDBqxraEa6xPeg==",
				"shasum": "060ce01d8d592c671ae5d857fcb267bc78682a25",
				"tarball": "https://registry.npmjs.org/@vivo-quickapp/postcss-import/-/postcss-import-12.1.0.tgz",
				"fileCount": 10,
				"unpackedSize": 34075,
				"npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeCqfwCRA9TVsSAnZWagAAV6gQAIjjSQW/taOHD8epNZZe\nhiQ5BG51G/IgK9lhhllwL050MuVipfDx8/b6HiJuFIRa7GOZt45qo6iqRIxd\nvdfd4DONsbDpkJqLh/ugsf9cKL5fHVDlmngog7FUvap7kKbVfdoESqinSQZ1\nWaNAO4p7oH3uKo1LHcpEa5T8uv8Q3V8VlyM/m1JXYJ3Z+rnBdjINXaOCDbFL\nTBd4+Fnr1kjbmiq9Wrf6RBMAR6dSdhKC6C+T5xC0payv7rGDy9smSeCwdYK2\nTGCw9A4x48XMO71qG4ggiow/hNb6EESChL1GLptfRC6lcQe6F98mHhzQlyMm\nbY2D+HUR0WbEszIV8t+BAPVEbjde6E2Uec6wxgmcHeUVM+1ZoxEKL7hc93RO\nonCKLzfCGwGnQthNOves18sMcts9pnqJOYDajWS9Uw3WoUQmZgzJlfJIaQ2L\ncXuF22ogl8StGT/Kvku8B0546u3J6FKHMFML7guWpbbA4gE1qcGm9IK17Cpb\n16FFhuk8fwckbD+qfRKMW3JJZ6ooEEIyVvuOtGggsz7dR02ypuu2xZsu/4fn\nZnYWJJENswEq2wIBiAvCd/tf8NW3KfeKAfNOVUGq6r9EMTPKI69kHvgoJOwL\nNeylO4Vj+Zw4GhdPPN7xUICrnzygPIhz8db27EnOV3QLYEnhUqwP7TWC0lMr\nvnkb\r\n=dD2z\r\n-----END PGP SIGNATURE-----\r\n",
				"signatures": [
					{
						"keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
						"sig": "MEYCIQCeUJ1I+j9Xmr3aS9al+R3RXSWEI6zH6cL64IwnzVHA+wIhAKfUPHPnJZmqZcXY49C/Uo9q64anrDcr6OIHO6c5/I4B"
					}
				]
			},
			"maintainers": [
				{
					"name": "zero_the_lost",
					"email": "lqzerogg@gmail.com"
				},
				{
					"name": "unclebill",
					"email": "billbill290@gmail.com"
				}
			],
			"_npmUser": {
				"name": "unclebill",
				"email": "billbill290@gmail.com"
			},
			"directories": {},
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/postcss-import_12.1.0_1577756655964_0.8283017253740239"
			},
			"_hasShrinkwrap": false
		}
	},
	"time": {
		"created": "2019-12-31T01:44:15.732Z",
		"12.1.0": "2019-12-31T01:44:16.087Z",
		"modified": "2022-04-07T11:03:36.535Z"
	},
	"maintainers": [
		{
			"name": "zero_the_lost",
			"email": "lqzerogg@gmail.com"
		},
		{
			"name": "unclebill",
			"email": "billbill290@gmail.com"
		}
	],
	"description": "PostCSS plugin to import CSS files",
	"homepage": "https://github.com/postcss/postcss-import#readme",
	"keywords": [
		"css",
		"postcss",
		"postcss-plugin",
		"import",
		"node modules",
		"npm"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/postcss/postcss-import.git"
	},
	"author": {
		"name": "Maxime Thirouin"
	},
	"bugs": {
		"url": "https://github.com/postcss/postcss-import/issues"
	},
	"license": "MIT",
	"readme": "# postcss-import\n\n<h3 style='background-color:#f66;color:#fff;font-weight:bold'>\n  This this an modified version of <a href='https://www.npmjs.com/package/postcss-import'>original postcss-import</a>, which just disables the @import-rule's preceding checking\n</h3>\n\n[![Unix Build status](https://img.shields.io/travis/postcss/postcss-import/master.svg?branch=master&label=unix%20build)](https://travis-ci.org/postcss/postcss-import)\n[![Windows Build status](https://img.shields.io/appveyor/ci/MoOx/postcss-import/master.svg?label=window%20build)](https://ci.appveyor.com/project/MoOx/postcss-import/branch/master)\n[![Version](https://img.shields.io/npm/v/postcss-import.svg)](https://github.com/postcss/postcss-import/blob/master/CHANGELOG.md)\n[![Greenkeeper badge](https://badges.greenkeeper.io/postcss/postcss-import.svg)](https://greenkeeper.io/)\n\n\n> [PostCSS](https://github.com/postcss/postcss) plugin to transform `@import`\nrules by inlining content.\n\nThis plugin can consume local files, node modules or web_modules.\nTo resolve path of an `@import` rule, it can look into root directory\n(by default `process.cwd()`), `web_modules`, `node_modules`\nor local modules.\n_When importing a module, it will look for `index.css` or file referenced in\n`package.json` in the `style` or `main` fields._\nYou can also provide manually multiples paths where to look at.\n\n**Notes:**\n\n- **This plugin should probably be used as the first plugin of your list.\nThis way, other plugins will work on the AST as if there were only a single file\nto process, and will probably work as you can expect**.\n- This plugin works great with\n[postcss-url](https://github.com/postcss/postcss-url) plugin,\nwhich will allow you to adjust assets `url()` (or even inline them) after\ninlining imported files.\n- In order to optimize output, **this plugin will only import a file once** on\na given scope (root, media query...).\nTests are made from the path & the content of imported files (using a hash\ntable).\nIf this behavior is not what you want, look at `skipDuplicates` option\n- **If you are looking for glob, or sass like imports (prefixed partials)**,\nplease look at\n[postcss-easy-import](https://github.com/trysound/postcss-easy-import)\n(which use this plugin under the hood).\n- Imports which are not modified (by `options.filter` or because they are remote\n  imports) are moved to the top of the output.\n- **This plugin attempts to follow the CSS `@import` spec**; `@import`\n  statements must precede all other statements (besides `@charset`).\n\n## Installation\n\n```console\n$ npm install postcss-import\n```\n\n## Usage\n\nUnless your stylesheet is in the same place where you run postcss\n(`process.cwd()`), you will need to use `from` option to make relative imports\nwork.\n\n```js\n// dependencies\nvar fs = require(\"fs\")\nvar postcss = require(\"postcss\")\nvar atImport = require(\"postcss-import\")\n\n// css to be processed\nvar css = fs.readFileSync(\"css/input.css\", \"utf8\")\n\n// process css\npostcss()\n  .use(atImport())\n  .process(css, {\n    // `from` option is needed here\n    from: \"css/input.css\"\n  })\n  .then(function (result) {\n    var output = result.css\n\n    console.log(output)\n  })\n```\n\n`css/input.css`:\n\n```css\n/* can consume `node_modules`, `web_modules` or local modules */\n@import \"cssrecipes-defaults\"; /* == @import \"../node_modules/cssrecipes-defaults/index.css\"; */\n@import \"normalize.css\"; /* == @import \"../node_modules/normalize.css/normalize.css\"; */\n\n@import \"foo.css\"; /* relative to css/ according to `from` option above */\n\n@import \"bar.css\" (min-width: 25em);\n\nbody {\n  background: black;\n}\n```\n\nwill give you:\n\n```css\n/* ... content of ../node_modules/cssrecipes-defaults/index.css */\n/* ... content of ../node_modules/normalize.css/normalize.css */\n\n/* ... content of css/foo.css */\n\n@media (min-width: 25em) {\n/* ... content of css/bar.css */\n}\n\nbody {\n  background: black;\n}\n```\n\nCheckout the [tests](test) for more examples.\n\n### Options\n\n### `filter`\nType: `Function`  \nDefault: `() => true`\n\nOnly transform imports for which the test function returns `true`. Imports for\nwhich the test function returns `false` will be left as is. The function gets\nthe path to import as an argument and should return a boolean.\n\n#### `root`\n\nType: `String`  \nDefault: `process.cwd()` or _dirname of\n[the postcss `from`](https://github.com/postcss/postcss#node-source)_\n\nDefine the root where to resolve path (eg: place where `node_modules` are).\nShould not be used that much.  \n_Note: nested `@import` will additionally benefit of the relative dirname of\nimported files._\n\n#### `path`\n\nType: `String|Array`  \nDefault: `[]`\n\nA string or an array of paths in where to look for files.\n\n#### `plugins`\n\nType: `Array`  \nDefault: `undefined`\n\nAn array of plugins to be applied on each imported files.\n\n#### `resolve`\n\nType: `Function`  \nDefault: `null`\n\nYou can provide a custom path resolver with this option. This function gets\n`(id, basedir, importOptions)` arguments and should return a path, an array of\npaths or a promise resolving to the path(s). If you do not return an absolute\npath, your path will be resolved to an absolute path using the default\nresolver.\nYou can use [resolve](https://github.com/substack/node-resolve) for this.\n\n#### `load`\n\nType: `Function`  \nDefault: null\n\nYou can overwrite the default loading way by setting this option.\nThis function gets `(filename, importOptions)` arguments and returns content or\npromised content.\n\n#### `skipDuplicates`\n\nType: `Boolean`  \nDefault: `true`\n\nBy default, similar files (based on the same content) are being skipped.\nIt's to optimize output and skip similar files like `normalize.css` for example.\nIf this behavior is not what you want, just set this option to `false` to\ndisable it.\n\n#### `addModulesDirectories`\n\nType: `Array`  \nDefault: `[]`\n\nAn array of folder names to add to [Node's resolver](https://github.com/substack/node-resolve).\nValues will be appended to the default resolve directories:\n`[\"node_modules\", \"web_modules\"]`.\n\nThis option is only for adding additional directories to default resolver. If\nyou provide your own resolver via the `resolve` configuration option above, then\nthis value will be ignored.\n\n#### Example with some options\n\n```js\nvar postcss = require(\"postcss\")\nvar atImport = require(\"postcss-import\")\n\npostcss()\n  .use(atImport({\n    path: [\"src/css\"],\n  }))\n  .process(cssString)\n  .then(function (result) {\n    var css = result.css\n  })\n```\n\n## `dependency` Message Support\n\n`postcss-import` adds a message to `result.messages` for each `@import`. Messages are in the following format:\n\n```\n{\n  type: 'dependency',\n  file: absoluteFilePath,\n  parent: fileContainingTheImport\n}\n```\n\nThis is mainly for use by postcss runners that implement file watching.\n\n---\n\n## CONTRIBUTING\n\n* ⇄ Pull requests and ★ Stars are always welcome.\n* For bugs and feature requests, please create an issue.\n* Pull requests must be accompanied by passing automated tests (`$ npm test`).\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
	"readmeFilename": "README.md",
	"_downloads": 8
}